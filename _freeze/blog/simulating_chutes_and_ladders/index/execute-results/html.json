{
  "hash": "3e33cbaa23da5efb08ea66f08b9627b3",
  "result": {
    "markdown": "---\nlayout: post\ntitle:  \"Simulating Chutes and Ladders\"\ndate:   2019-04-24 15:41:00 -0400\ndate-modified: 2023-10-06\ncategories:\n  - Animations\n  - Github\n  - Side Projects\n  - Simulations\n---\n\n\n\n\nWe tried teaching our little almost-three-year-old *Chutes and Ladders* today. She wasn't very good at counting tiles. But, as I was sitting there climbing up and sliding down over and over, I wondered what the average number of turns it would take to finish the game. So I decided to take a stab at simulating the game. So here's a post on a simple simulation of *Chutes and Ladders*  that demonstrates absolutely nothing about linguistics and instead shows off some R skills.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scico)\nlibrary(readxl)\nlibrary(gganimate)\n```\n:::\n\n\nI'm trying to increase my Github presence, so the code for this project can be found on my [Github](http://joeystanley.com/blog/simulating_chutes_and_ladders).\n\n:::callout-note\nOn October 6, 2023, I updated the code for this post to reflect a few changes in some of the tidyverse functions.\n:::\n\n## The game\n\nFor those of you deprived people who have never played *Chutes and Ladders*, the game is quite simple. There are 100 tiles arranged in a 10 by 10 board. With 1--3 of your closest friends, you start at Tile 1, roll a die, and advance that number of tiles. Players take turns moving up the board boustrophedonically.[I'll admit that half the reason I wrote this post was so I could use this word!]{.aside} until one person reaches 100. The catch is that there are various \"chutes\" and \"ladders\" on the board. If you land on the bottom of one of about half a dozen ladders, you climb to the top, advancing anywhere from 10 to 54 tiles. But, if you land at the top of about a dozen chutes, you slide down anywhere from 4 to 63 tiles. There is no skill and it's 100% luck---perfect for small kids. \n\nHere's a simplified version of the board. First, I'll read in the data I prepared ahead of time. It just gives the *x*-*y* coordinates for each of the 100 tiles.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_f660d57b53f40713d3d4a147a37dab6a'}\n\n```{.r .cell-code}\ntile_data <- readxl::read_excel(\"chutes_ladders_data.xlsx\", sheet = 1)\nhead(tile_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n   tile     x     y\n  <dbl> <dbl> <dbl>\n1     1     1     1\n2     2     2     1\n3     3     3     1\n4     4     4     1\n5     5     5     1\n6     6     6     1\n```\n:::\n:::\n\n\nNow, I'll read in information about the chutes and ladders themselves, as in where they start and where they stop. \n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_6c86bd66b6917ee3f261b4662db30dc2'}\n\n```{.r .cell-code}\nchutes_and_ladders_data <- readxl::read_excel(\"chutes_ladders_data.xlsx\", sheet = 2) %>%\n  rowid_to_column(\"id\") %>%\n  gather(position, tile, start, end) %>%\n  left_join(tile_data, by = \"tile\")\nchutes_and_ladders_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 × 6\n      id type   position  tile     x     y\n   <int> <chr>  <chr>    <dbl> <dbl> <dbl>\n 1     1 ladder start        1     1     1\n 2     2 ladder start        4     4     1\n 3     3 ladder start        9     9     1\n 4     4 ladder start       21     1     3\n 5     5 ladder start       28     8     3\n 6     6 ladder start       36     5     4\n 7     7 ladder start       51    10     6\n 8     8 ladder start       71    10     8\n 9     9 ladder start       80     1     8\n10    10 chute  start       16     5     2\n# ℹ 28 more rows\n```\n:::\n:::\n\n\nJust some information about the lines for the chutes and ladders, mostly for visual purposes.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_99deffb22fc35bd10727fb12a1e2cd11'}\n\n```{.r .cell-code}\nlines_data <- read_excel(\"chutes_ladders_data.xlsx\", sheet = 3) %>%\n  rowid_to_column(\"id\") %>%\n  gather(point, value, beg_x, beg_y, end_x, end_y) %>%\n  separate(point, into = c(\"location\", \"axis\")) %>%\n  spread(axis, value)\nhead(lines_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n     id type    location     x     y\n  <int> <chr>   <chr>    <dbl> <dbl>\n1     1 outside beg        0.5   0.5\n2     1 outside end       10.5   0.5\n3     2 outside beg        0.5  10.5\n4     2 outside end       10.5  10.5\n5     3 outside beg        0.5   0.5\n6     3 outside end        0.5  10.5\n```\n:::\n:::\n\n\nNow make a basic plot.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_b180a27e25687a2101c82ea7b2ee7805'}\n\n```{.r .cell-code}\nggplot(tile_data, aes(x, y)) + \n  geom_line(data = lines_data, aes(group = id, linetype = type)) + \n  geom_text(aes(label = tile), size = 3, nudge_x = -0.25, nudge_y = 0.25) +\n  labs(title = \"A Simplified Chutes and Ladders Board\",\n       caption = \"joeystanley.com\") +\n  geom_path(data = chutes_and_ladders_data, aes(group = id, linetype = type),\n            arrow = arrow(angle = 20, length = unit(0.1, \"in\"), type = \"closed\")) +\n  scale_linetype_manual(values = c(\"solid\", \"solid\", \"dashed\", \"solid\", \"dotted\", \"dotted\")) +\n  coord_fixed(ratio = 1) + \n  theme_void() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\nThe game we bought is actually a knock-off (I'm a poor grad student---what do you expect?), but I found an image of the authentic version online so I'll go with that for this blog post. And for simplicity, I'll just simulate a one-person game.\n\n## The simulation\n\nSimulating the game is relatively straightforward. All you really need is a way to keep track of what tile you're on, a way to roll the die, and sequence of if-else statements to simulate the chutes and ladders. The die rolling is pretty simple with the help of `sample`. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(6, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nWe could wrap that up into a function to make it slightly more transparent too: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_die <- function() { \n  sample(6, 1) \n}\nroll_die()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nroll_die()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nroll_die()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nNow, in this game, every time you roll a die, you'll need to advance your token by that many pieces. I could write a separate `advance_token` function, but with functions this simple, I'll just combine them into one. This time, it'll take an argument, `spot`, which is the current tile number (from 1 to 100) that you're on. The function takes this spot, rolls a die, and adds that value to it, returning the tile you'll land on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_die <- function(spot) { \n  spot + sample(6, 1)\n}\nroll_die(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nroll_die(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\nroll_die(50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56\n```\n:::\n\n```{.r .cell-code}\nroll_die(80)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82\n```\n:::\n:::\n\n\nAwesome. Now with this, it makes for a pretty uneventful game, so we'll have to simulate the chutes and ladders. I know base R has `switch` syntax, but I've never been able to get it to work, so I'll use `case_when` from the `dplyr` package to do this. I'll of course wrap it up in another function verbosely called `check_for_chute_or_ladder`. Here, I input the start and end points to all the chutes and ladders. So for example, if you land on the very first tile, there's a ladder that'll take you to tile 38. If you land on tile 16, you'll slide down a chute to tile 6. The function will return the new tile you'll end up on. If you don't land on any of them, the function will return the same number you sent in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_for_chute_or_ladder <- function(spot) {\n  case_when(\n    \n    # Ladders (9)\n    spot ==  1 ~  38,\n    spot ==  4 ~  14,\n    spot ==  9 ~  31,\n    spot == 21 ~  42,\n    spot == 28 ~  84,\n    spot == 36 ~  44,\n    spot == 51 ~  67,\n    spot == 71 ~  91,\n    spot == 80 ~ 100,\n    \n    # Chutes (10)\n    spot == 16 ~   6,\n    spot == 47 ~  26,\n    spot == 49 ~  11,\n    spot == 56 ~  53,\n    spot == 62 ~  19,\n    spot == 64 ~  60,\n    spot == 87 ~  24,\n    spot == 93 ~  73,\n    spot == 95 ~  76,\n    spot == 98 ~  78,\n    \n    # No change\n    TRUE ~ spot)\n}\ncheck_for_chute_or_ladder(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38\n```\n:::\n\n```{.r .cell-code}\ncheck_for_chute_or_ladder(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\ncheck_for_chute_or_ladder(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nGreat. Now we've got a full turn. For kicks, I can wrap all this up into yet another function that'll simulate taking a turn in the game:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntake_turn <- function(spot) {\n  spot %>%\n    roll_die() %>% \n    check_for_chute_or_ladder()\n}\ntake_turn(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\ntake_turn(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\ntake_turn(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\ntake_turn(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\ntake_turn(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n\nSo as it turns out, these are all the functions I need to simulate an entire game. But, the way it's set up now, I have to run each turn one at a time, check the output, and run it again. It would be better if I could automate the whole thing and save the results into a dataframe or something. \n\nSo I've created the larger `simulate_game` function below. When I run this function, it'll simulate an entire (1-player) game. First, it'll create a mostly empty data frame that will be populated as the turns advance. I know that some programming languages are slow if you try to append rows to a dataframe with each iteration of a loop,[I think Perl doesn't care, and I miss that...]{.aside} so I wanted to make sure there was room for a full game before we do anything else. Also, in theory, the game could last forever because of looping chutes and ladders, so I made it large enough to handle a game with 1000 turns---probably way too many for this, but I wanted to make sure.[I started with 100 turns, but that actually wasn't enough turns for some of the simulated games!]{.aside} In that dataframe, I have columns for the turn number, what the dice roll was (those are all predetermined), where you landed, whether it has a chute or a ladder, and finally, where you ended up after traveling on that chute or ladder.\n\nI've never done a simulation in R before, so I don't know what the protocol is for looping through something an unknown number of times, so I did this whole `while(keep_playing)` thing. The `keep_playing` object is initially true, and at the end of each iteration, I check to see if we've gotten to 100; if so, I'll set that to false, which'll kill the loop. However, I wanted some sort of iterating number (like in a `for` loop), so I added `i` myself.[I tried just looping through the `turn_num` column, but I couldn't get the loop to stop after the player hit tile 100.]{.aside}\n\nOkay, so then inside that loop, there are several main chunks. Most of it is fluff for handling the data and keeping track of stuff and the actual game portion is just two lines in the middle. \n\n1. First, if it's the first iteration of the loop, set the start tile number to 0. Otherwise, set it to wherever we ended up last time. \n\n1. Then, I add the dice roll to to the start tile to get the (potentially) temporary `land` tile. I then send that number off to `check_for_chute_or_ladder` and get the actual `end` tile. \n\n1. I then do another conditional to tell whether I had a chute or ladder. In theory, I should just be able to tell that with the `check_for_chute_or_ladder` function, but I'm not sure how to return two values at once in R like I can with Perl. \n\n1. Finally, I'll do one more conditional to see if we've reached tile 100. If not, go on to the next iteration of the loop. If so, we're done.\n\nAfter the looping is done, we've completed a game. Remember that I started by declaring enough space for 1000 turns. I don't need all the extra rolls, so just before I return the dataframe with all the game information, filter out the rolls that didn't happen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_game <- function(game_num = 0) {\n  \n  # Declare space for the full game.\n  n <- 1000\n  turns <- tibble(turn_num = 1:n,\n                  start    = NA,\n                  roll     = sample(6, n, replace = TRUE),\n                  land     = NA,\n                  chute_or_ladder = NA,\n                  end      = NA)\n  \n  # Loop until the game is over\n  i <- 1\n  keep_playing <- TRUE\n  while(keep_playing) {\n    \n    # Step 1: Start at zero\n    if (i == 1) {\n      turns$start[[i]] <- 0\n      \n      # Otherwise, start where the last turn ended.\n    } else {\n      turns$start[[i]] <- turns$end[[i - 1]]\n    }\n    \n    # Step 2: This is where the game actually happens.\n    # Add dice roll to the start tile\n    turns$land[[i]] <- turns$start[[i]] + turns$roll[[i]]\n    # Check for chute or ladder\n    turns$end[[i]] <- check_for_chute_or_ladder(turns$land[[i]])\n    \n    # Step 3: Keep track of whether I had a chute or ladder.\n    if (turns$land[[i]] > turns$end[[i]]) {\n      turns$chute_or_ladder[[i]] <- \"ladder\"\n    } else if (turns$land[[i]] < turns$end[[i]]) {\n      turns$chute_or_ladder[[i]] <- \"chute\"\n    } else {\n      turns$chute_or_ladder[[i]] <- NA\n    }\n    \n    # Step 4: Check if it's game over.\n    if (turns$end[[i]] >= 100) {\n      keep_playing <- FALSE\n    } else {\n      i <- i + 1\n    }\n  }\n  \n  turns %>%\n    filter(turn_num <= i) %>%\n    return()\n}\n```\n:::\n\n\nNow let's see it in action!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_game()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 6\n   turn_num start  roll  land chute_or_ladder   end\n      <int> <dbl> <int> <dbl> <chr>           <dbl>\n 1        1     0     2     2 <NA>                2\n 2        2     2     6     8 <NA>                8\n 3        3     8     6    14 <NA>               14\n 4        4    14     2    16 ladder              6\n 5        5     6     1     7 <NA>                7\n 6        6     7     5    12 <NA>               12\n 7        7    12     5    17 <NA>               17\n 8        8    17     1    18 <NA>               18\n 9        9    18     1    19 <NA>               19\n10       10    19     6    25 <NA>               25\n# ℹ 11 more rows\n```\n:::\n:::\n\n\nHooray! A complete game. This one appears to have been completed in just 15 moves after hitting four chutes and one ladder. \n\n# Simulating lots of games\n\nOkay, so I've got the code for simulating a game of *Chutes and Ladders* and in the example above, I finished a game in just 15 moves. Is that average or did I finish a bit sooner than normal? \n\nTo answer this question, I'll just run the `simulate_game` function a whole bunch of times and then see if I can see some generalizations. I'll accomplish this with `map` from the `purrr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201006)\ngames <- tibble(game_num = 1:1000) %>%\n  mutate(game = map(game_num, simulate_game)) %>%\n  unnest(col = game)\ngames\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36,003 × 7\n   game_num turn_num start  roll  land chute_or_ladder   end\n      <int>    <int> <dbl> <int> <dbl> <chr>           <dbl>\n 1        1        1     0     2     2 <NA>                2\n 2        1        2     2     3     5 <NA>                5\n 3        1        3     5     1     6 <NA>                6\n 4        1        4     6     4    10 <NA>               10\n 5        1        5    10     4    14 <NA>               14\n 6        1        6    14     5    19 <NA>               19\n 7        1        7    19     3    22 <NA>               22\n 8        1        8    22     1    23 <NA>               23\n 9        1        9    23     3    26 <NA>               26\n10        1       10    26     1    27 <NA>               27\n# ℹ 35,993 more rows\n```\n:::\n:::\n\n\nThis `games` object now contains the data for 1000 games of *Chutes and Ladders*. It's nothing more than a bunch of outputs from the `simulate_game` function all combined into one mega dataframe. It's got about 36K rows in it, so there's a lot of information. We can now take this and get some summarized information about each of the games. With `summarize` I have reduced this down into just one row per game, with information about how many turns the game took, as well as how many chutes and ladders I went through.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_summary <- games %>%\n  group_by(game_num) %>%\n  summarize(turns = max(turn_num),\n            n_chutes  = sum(chute_or_ladder == \"chute\", na.rm = TRUE),\n            n_ladders = sum(chute_or_ladder == \"ladder\", na.rm = TRUE))\ngames_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 × 4\n   game_num turns n_chutes n_ladders\n      <int> <int>    <int>     <int>\n 1        1   114        4        14\n 2        2    18        2         0\n 3        3    28        3         2\n 4        4    16        1         1\n 5        5    17        4         1\n 6        6    54        4         5\n 7        7    23        3         2\n 8        8    16        2         1\n 9        9    48        4         5\n10       10    52        7         7\n# ℹ 990 more rows\n```\n:::\n:::\n\n\nLooks like there's a lot of variation. Game 1 was finished in 68 moves, but Game 2 was done in just 11. Game 4 took a whopping 144 moves! With just plain ol' `summary`, I can now just get some information about what an average game was like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(games_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    game_num          turns        n_chutes       n_ladders     \n Min.   :   1.0   Min.   :  7   Min.   : 0.00   Min.   : 0.000  \n 1st Qu.: 250.8   1st Qu.: 19   1st Qu.: 2.00   1st Qu.: 1.000  \n Median : 500.5   Median : 29   Median : 3.00   Median : 3.000  \n Mean   : 500.5   Mean   : 36   Mean   : 3.24   Mean   : 4.014  \n 3rd Qu.: 750.2   3rd Qu.: 47   3rd Qu.: 4.00   3rd Qu.: 6.000  \n Max.   :1000.0   Max.   :200   Max.   :15.00   Max.   :32.000  \n```\n:::\n:::\n\n\nSo it appears that it took about 36 turns on average to make it to tile 100. That Game 4 in 16 turns was pretty short---in the top 25%. But now the shortest one took just 7 moves. However, the game theoretically could go on forever, and indeed one game took a whopping 200 turns to finish! I don't think my two-year-old would appreciate that so much. \n\nSince the data looks a little skewed, let's visualize that distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(games_summary, aes(turns)) + \n  geom_histogram(binwidth = 2, fill = \"#376092\", color = \"#132A45\") + \n  scale_x_continuous(breaks = seq(0, 200, 20), expand = expansion(0, 1)) + \n  scale_y_continuous(breaks = seq(0, 60, 10), expand = expansion(0, c(0, 1))) + \n  labs(title = \"Number of turns finish Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\",\n       y = \"number of games\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nSo, most of the time, I'll finish my game in about 15--30 moves. I guess that's not too bad.\n\nObviously the most exciting part of the game is getting to travel on some chutes or ladders. How many times did I do that on average? The summary statistics above suggest maybe 3 or 4, but it was also pretty skewed. Let's look at some visuals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(games_summary, aes(n_chutes)) + \n  geom_histogram(binwidth = 1, fill = \"#376092\", color = \"#132A45\") + \n  labs(title = \"Number of chutes in a game of Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\",\n       x = \"chutes per game\",\n       y = \"number of games\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nSo it looks like given that there are 10 chutes in this game, I'm probably going to hit about three or four of them. Sometimes it'll be more though, which would make for an unfortunate game. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(games_summary, aes(n_ladders)) + \n  geom_histogram(binwidth = 1, fill = \"#376092\", color = \"#132A45\") + \n  labs(title = \"Number of ladders in a game of Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\",\n       x = \"ladders per game\",\n       y = \"number of games\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nCompared to the chutes though the ladders had even more variation. Over 10% of the games didn't see any of the nine ladders. You're most likely to hit just one of them, but there were still plenty of games that had as many as 10. I'm not sure why the distribution of chutes and ladders is so different. \n\nSo I guess that answered the questions I had. I'm typically going to finish the game in about 20--30 moves, and I'll have perhaps a half dozen eventful rolls with a chute or a ladder. \n\n# Animating a Game\n\nI'm just learning how to use gganimate, and it's pretty cool, so here's an animation of the longest game. I was curious as to why the one game took 200 moves to finish! \n\n\n::: {.cell}\n\n```{.r .cell-code}\none_long_game <- games %>%\n  group_by(game_num) %>%\n  filter(max(turn_num) == 200) %>%\n  ungroup() %>%\n  select(-game_num) %>%\n  gather(timing, tile, start, land, end) %>%\n  mutate(timing = factor(timing, levels = c(\"start\", \"land\", \"end\"))) %>%\n  arrange(turn_num, timing) %>%\n  filter(!(is.na(chute_or_ladder) & timing == \"land\")) %>%\n  left_join(tile_data, by = \"tile\") %>%\n  rowid_to_column(\"t\")\n\nlong_game_animation <- ggplot(tile_data, aes(x, y)) + \n  geom_line(data = lines_data, aes(group = id, linetype = type), color = \"gray33\") + \n  geom_text(aes(label = tile), size = 3, nudge_x = -0.25, nudge_y = 0.25) + \n  geom_point(data = one_long_game, size = 4) + \n  geom_path(data = chutes_and_ladders_data, aes(group = id, linetype = type),\n            arrow = arrow(angle = 20, length = unit(0.1, \"in\"), type = \"closed\")) +  \n  scale_linetype_manual(values = c(\"solid\", \"solid\", \"dashed\", \"solid\", \"dotted\", \"dotted\")) + \n  coord_fixed(ratio = 1) + \n  labs(title = \"A 200-turn game of Chutes and Ladders\",\n       subtitle  = 'Turn {floor(frame / 10)} of 200',\n       caption = \"joeystanley.com\") + \n  theme_void() + \n  theme(legend.position = \"none\") + \n  transition_time(t) + \n  ease_aes('cubic-in-out')\nanimate(long_game_animation, nframe = 2000)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.gif)\n:::\n:::\n\n\nIt's simultaneously entertaining and frustrating to watch.\n\n# Most likely tiles\n\nSo of course the next question you might want to ask is what tiles are you most likely to land on. Well it's not going to be an even distribution because of the chutes and ladders throwing you all over the place. Here's a simple plot that shows how often the simulation ended a turn on a particular tile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(games, aes(end)) + \n  geom_histogram(binwidth = 1, fill = \"#376092\", color = \"#132A45\") + \n  scale_x_continuous(breaks = seq(0, 100, 10)) + \n  scale_y_continuous(breaks = seq(0, 1000, 200)) + \n  labs(title = \"Tile frequency in Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\",\n       x = \"tile\",\n       y = \"number of turns\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nNow obviously the large spikes are the ends of ladders and chutes, so you're twice as likely to end up there, either because you took the chute/ladder or because you ended up there by approaching it from a previous tile. But what is interesting to me is the gradual ebb and flow: you'll spend more time in the 20--50 range and in the 80s, but less time in the 50--70 range. Kinda cool. \n\nHere's a different way of looking at that data in a way that more closely matches the board.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntile_freq <- games %>%\n  rename(tile = end) %>%\n  count(tile) %>%\n  full_join(tile_data, by = \"tile\")\n\nggplot(tile_freq, aes(x, y)) + \n  geom_point(aes(color = n), shape = \"square\", size = 18) + \n  geom_line(data = lines_data, aes(group = id, linetype = type), color = \"black\", linewidth = 0.5) + \n  geom_text(aes(label = tile), size = 3, nudge_x = -0.25, nudge_y = 0.25) + \n  geom_path(data = chutes_and_ladders_data, aes(group = id, linetype = type),\n            arrow = arrow(angle = 20, length = unit(0.1, \"in\"), type = \"closed\")) + \n  scale_color_scico(name = \"turns\", palette = \"lajolla\", direction = -1) + \n  scale_linetype_manual(values = c(\"solid\", \"solid\", \"dashed\", \"solid\", \"dotted\", \"dotted\")) + \n  coord_fixed(ratio = 1) + \n  labs(title = \"Tile frequency in Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\") + \n  theme(axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text  = element_blank(),\n        panel.grid = element_blank(),\n        panel.border = element_blank(),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=576}\n:::\n:::\n\n\nThis is a cool plot and I'm glad I figured out how to make it, but because of the boustrophedonic[There it is again!]{.aside} layout, the overall pattern isn't quite as clear as the histogram above. \n\n\n\n# Changing the game\n\nOkay so now the last thing I want to do is explore what happens if you change the game up. If I take away a ladder, how does that affect the game? It probably depends on the length, but let's try taking out the longest ones and see what happens.\n\nTo do this, I'll create a new version of `check_for_chute_and_ladder` only the longest ladder is commented out. I'll then rerun the simulation and compare the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_for_chute_or_ladder <- function(spot) {\n  case_when(\n    \n    # Ladders (9)\n    spot ==  1 ~  38,\n    spot ==  4 ~  14,\n    spot ==  9 ~  31,\n    spot == 21 ~  42,\n    #spot == 28 ~  84,\n    spot == 36 ~  44, \n    spot == 51 ~  67,\n    spot == 71 ~  91,\n    spot == 80 ~ 100,\n    \n    # Chutes (10)\n    spot == 16 ~   6,\n    spot == 47 ~  26,\n    spot == 49 ~  11,\n    spot == 56 ~  53,\n    spot == 62 ~  19,\n    spot == 64 ~  60,\n    spot == 87 ~  24,\n    spot == 93 ~  73,\n    spot == 95 ~  76,\n    spot == 98 ~  78,\n    \n    # No change\n    TRUE ~ spot)\n}\ngames_without_longest_ladder <- tibble(game_num = 1:1000) %>%\n  mutate(game = map(game_num, simulate_game)) %>%\n  unnest(cols = game)\n```\n:::\n\nNow I'll do the same thing without the longest chute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_for_chute_or_ladder <- function(spot) {\n  case_when(\n    \n    # Ladders (9)\n    spot ==  1 ~  38,\n    spot ==  4 ~  14,\n    spot ==  9 ~  31,\n    spot == 21 ~  42,\n    spot == 28 ~  84,\n    spot == 36 ~  44, \n    spot == 51 ~  67,\n    spot == 71 ~  91,\n    spot == 80 ~ 100,\n    \n    # Chutes (10)\n    spot == 16 ~   6,\n    spot == 47 ~  26,\n    spot == 49 ~  11,\n    spot == 56 ~  53,\n    spot == 62 ~  19,\n    spot == 64 ~  60,\n    #spot == 87 ~  24,\n    spot == 93 ~  73,\n    spot == 95 ~  76,\n    spot == 98 ~  78,\n    \n    # No change\n    TRUE ~ spot)\n}\ngames_without_longest_chute <- tibble(game_num = 1:1000) %>%\n  mutate(game = map(game_num, simulate_game)) %>%\n  unnest(cols = game)\n```\n:::\n\n\nNow I'll combine all this game data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodified_games <- bind_rows(list(original = games,\n                                 `w/o longest ladder`  = games_without_longest_ladder,\n                                 `w/o longest chute`   = games_without_longest_chute),\n                            .id = \"modification\") %>%\n  group_by(modification, game_num) %>%\n  summarize(turns = max(turn_num),\n            n_chutes  = sum(chute_or_ladder == \"chute\", na.rm = TRUE),\n            n_ladders = sum(chute_or_ladder == \"ladder\", na.rm = TRUE),\n            .groups = \"drop_last\")\nmodified_games\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,000 × 5\n# Groups:   modification [3]\n   modification game_num turns n_chutes n_ladders\n   <chr>           <int> <int>    <int>     <int>\n 1 original            1   114        4        14\n 2 original            2    18        2         0\n 3 original            3    28        3         2\n 4 original            4    16        1         1\n 5 original            5    17        4         1\n 6 original            6    54        4         5\n 7 original            7    23        3         2\n 8 original            8    16        2         1\n 9 original            9    48        4         5\n10 original           10    52        7         7\n# ℹ 2,990 more rows\n```\n:::\n:::\n\n\nAnd now I'll plot their distributions all overlaid on top of each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(modified_games, aes(turns, color = modification)) + \n  geom_density(linewidth = 1) + \n  scale_x_continuous(breaks = seq(0, 500, 20)) + \n  labs(title = \"Number of turns finish Chutes and Ladders\",\n       subtitle = \"Based on 1000 simulated games\",\n       caption = \"joeystanley.com\",\n       y = \"proportion of games\") + \n  scale_color_manual(values = c(\"#376092\", \"#4237C4\", \"#C46D37\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nSo, not surprisingly, if you ignore the longest chute, the games tend to be a little shorter. More games were finished in less than 40 moves and far fewer games took more than about 50 to get finished. And it turns out if you remove the longest ladder, the games are less likely to be shorter and more likely to be longer. \n\n## The End\n\nSo that's it. Thanks for joining me on my journey of simulating *Chutes and Ladders*!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}