{
  "hash": "e68a51f67307ed7bfe55575acab2b40d",
  "result": {
    "markdown": "---\nlayout: post\ntitle: \"generations: Convert birth years to generation names\"\ndate: 2020-10-18 22:11:00 -0600\ncategories:\n  - Github\n  - R\n  - R Packages\n---\n\n\nI'm happy to announce the release of another R package, `generations`! I've apparently caught the creating-R-packages bug because this is my fourth one this year ([`futurevisions`](/blog/futurevisions-my-first-r-package), [`barktools`](/blog/barktools), [`joeysvowels`](/blog/joeysvowels), and now `generations`). This one provides some functions to easily convert years to generational cohorts (Boomer, Gen X, Millennial, Gen Z, etc.).\n\nI recently read Howe & Strauss' book, *[Generations: The History of America's Future, 1584 to 2069](https://www.amazon.com/Generations-History-Americas-Future-1584/dp/0688119123)*. While the generational theory they propose isn't water-tight, it is intriguing. Relatedly, I've seen lots of linguistics studies that model age in generational cohorts. (Ideally, we'd model age as a continuous variable, of course, but sometimes there's just not enough data to do so.) I used a categorical age variable in the models in my dissertation and in other recent studies and, while it's not perfect, it seems to work well enough.\n\nWell, so now that I'm converting age into generational cohorts in lots of different projects, my code is starting to get a little repetitive. And in the R world, they say if you end up writing the same code a lot, might as well wrap it up into a package. This idea came to me about a week ago and this weekend I found some time to put this together.\n\nThe result is `generations`. And, I've made it so that it doesn't depend on any other packages, so it was fun for me to figure out how to do some things in base R that I only knew how to do in tidyverse, which was fun for me! The rest of this post is the readme page for the package. You can find more about the package at [joeystanley.github.io/generations](https://joeystanley.github.io/generations/). \n\n## Installation\n\nThe package currently lives on GitHub, so you can install it like you would with any other package on GitHub:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"joeystanley/generations\")\n```\n:::\n\n\nYou can then load it like you can with any library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(generations)\n```\n:::\n\n\nFor the purposes of this tutorial, I'll load `ggplot` and `dplyr` as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Converting years to generations\n\nThe main function in this package is `generations()`. Given a vector of integers, it'll return a factor of generation names.  First, I'll generate some random years of birth.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyobs <- floor(runif(10, 1900, 2020))\nyobs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1972 1932 1987 2018 1974 1979 1952 1937 1994 1980\n```\n:::\n:::\n\n\nI can now easy convert that into generations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerations(yobs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Gen X      Silent     Millennial Gen Z      Gen X      Gen X     \n [7] Boomer     Silent     Millennial Gen X     \nLevels: Silent Boomer Gen X Millennial Gen Z\n```\n:::\n:::\n\n\nThis function works on any year between 1435 and 2030. Numbers outside that range return `NA`. \n\nNote that by default, the function will return the vector as *factor*, with the levels ordered so that the oldest generation in the vector is first. To get a character vector instead, add the argument `as_factor = FALSE`.\n\n### Customizing output\n\nThere are some tweaks you can do to adjust the output of `generations`. First, you can return longer forms of the generational names by specifying `full_names = TRUE`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerations(yobs, full_names = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Generation X          Silent Generation     Millennial Generation\n [4] Generation Z          Generation X          Generation X         \n [7] Boomer Generation     Silent Generation     Millennial Generation\n[10] Generation X         \n5 Levels: Silent Generation Boomer Generation ... Generation Z\n```\n:::\n:::\n\n\nWhat this does is simply add `\"Generation\"` to the end of each one, unless it's `\"Gen X\"` (or Y, or Z), in which case it'll expand it out to simply `\"Generation X\"`.\n\nYou can also show the years included in each generation by adding the `years = TRUE` argument. This will add a space and, inside a pair of parentheses, the start and end years of that generation, separated by an en dash. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerations(yobs, years = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Gen X (1964–1983)      Silent (1929–1945)     Millennial (1984–2007)\n [4] Gen Z (2008–2030)      Gen X (1964–1983)      Gen X (1964–1983)     \n [7] Boomer (1946–1963)     Silent (1929–1945)     Millennial (1984–2007)\n[10] Gen X (1964–1983)     \n5 Levels: Silent (1929–1945) Boomer (1946–1963) ... Gen Z (2008–2030)\n```\n:::\n:::\n\n\nThe primary purpose of this is for visualizations, since not everyone is familiar with (or agrees with) the year ranges. For example, if you've got a bunch of people and want to visualize the distribution of when they were born, you could have very informative legends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmany_yobs <- tibble(yob = floor(rnorm(1000, 1975, 15))) %>%\n  mutate(gen = generations(yob, full_names = TRUE, years = TRUE))\nggplot(many_yobs, aes(yob, fill = gen)) + \n  geom_histogram(binwidth = 1) + \n  scale_fill_brewer(name = NULL, palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHow this additional portion is formatted can be adjusted. If rendering an en dash is troublesome for you, you can change it to something else with `years_range_sep`. You may also want to change the space between the generation name and the opening parenthesis into a newline character with `years_sep`, again for visualization purposes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmany_yobs <- many_yobs %>%\n  mutate(gen = generations(yob, full_names = TRUE, years = TRUE,\n                           years_sep = \"\\n\", years_range_sep = \" to \"))\n\nggplot(many_yobs, aes(yob, fill = gen)) + \n  geom_histogram(binwidth = 1) + \n  scale_fill_brewer(name = NULL, palette = \"Set1\") + \n  labs(x = NULL) + \n  theme(legend.key.height = unit(1, \"cm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIf you want to get really fancy, you can make the legend keys approximate the width they take up on the *x*-axis and put better tics marks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwidths <- many_yobs %>%\n  group_by(gen) %>%\n  summarize(width = max(yob) - min(yob)) %>%\n  ungroup() %>%\n  mutate(width = width / max(width) * 1.4) # you may have to fudge this a little more\n\nggplot(many_yobs, aes(yob, fill = gen)) + \n  geom_histogram(binwidth = 1) + \n  scale_fill_brewer(name = NULL, palette = \"Set1\") + \n  scale_x_continuous(breaks = c(1929, 1946, 1964, 1984, 2008, 2030)) + \n  labs(x = NULL) + \n  theme(legend.position = \"bottom\") + \n  guides(fill = guide_legend(nrow = 1, label.position = \"bottom\", \n                             keywidth = widths$width, default.unit = \"inches\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Querying generation data\n\nTo see a list of the generational data, you can use `show_generations()`, which will return a data frame containing the names, start years, and end years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_generations()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             name start  end\n1           Gen Z  2008 2030\n2      Millennial  1984 2007\n3           Gen X  1964 1983\n4          Boomer  1946 1963\n5          Silent  1929 1945\n6            G.I.  1908 1928\n7            Lost  1886 1907\n8      Missionary  1865 1885\n9     Progressive  1844 1864\n10         Gilded  1822 1843\n11 Transcendental  1794 1821\n12     Compromise  1773 1793\n13     Republican  1746 1772\n14        Liberty  1727 1745\n15      Awakening  1704 1726\n16  Enlightenment  1675 1703\n17       Glorious  1649 1674\n18       Cavalier  1621 1648\n19        Puritan  1594 1620\n20  Parliamentary  1569 1593\n21    Elizabethan  1542 1568\n22       Reprisal  1517 1541\n23    Reformation  1497 1516\n24       Humanist  1459 1496\n25     Aurthurian  1435 1458\n```\n:::\n:::\n\n\nYou can also get simple information. For example, if you want to know when the start or end year of a particular generation is, you can use `get_start()` or `get_end()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_start(\"Silent\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1929\n```\n:::\n\n```{.r .cell-code}\nget_end(\"Millennial\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2007\n```\n:::\n:::\n\n\nYou can also find the names of neighboring generations with `get_prev_gen()` and `get_next_gen()`, though these were mostly created for internal purposes only rather than for you to use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_next_gen(\"Millennial\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Gen Z\"\n```\n:::\n\n```{.r .cell-code}\nget_prev_gen(\"Missionary\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Progressive\"\n```\n:::\n:::\n\n\nNote that if ask for something newer than Gen Z or older than Aurthurian it will return `NA`.\n\n## Customizing generation data\n\nThe data that this package uses is loaded as a hidden object when you load the package. You may modify it with the functions described in this section. These changes will affect the dataset so long as the `generations` package is loaded. You'll have to reset the data each time to reload it. \n\nThe labels and years for each generation are mostly borrowed from Howe & Strauss' Generational Theory books. However, not everyone agrees on the names and year ranges for the various generations. For this reason, the `generations` package makes it easy to modify the generations data to your liking. \n\nTo rename a generation, use `rename_generation()`, with the old name first and the new name second. For example, if you want to use *Zoomer* instead of *Gen Z*, you can do so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename_generation(\"Gen Z\", \"Zoomer\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGen Z has been renamed Zoomer\n```\n:::\n:::\n\n\nYou'll get a message informing you that the change has been made. If you now run `show_generations()` you'll see that the change has been made and if you rerun `generations()`, you'll get updated results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_generations()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             name start  end\n1          Zoomer  2008 2030\n2      Millennial  1984 2007\n3           Gen X  1964 1983\n4          Boomer  1946 1963\n5          Silent  1929 1945\n6            G.I.  1908 1928\n7            Lost  1886 1907\n8      Missionary  1865 1885\n9     Progressive  1844 1864\n10         Gilded  1822 1843\n11 Transcendental  1794 1821\n12     Compromise  1773 1793\n13     Republican  1746 1772\n14        Liberty  1727 1745\n15      Awakening  1704 1726\n16  Enlightenment  1675 1703\n17       Glorious  1649 1674\n18       Cavalier  1621 1648\n19        Puritan  1594 1620\n20  Parliamentary  1569 1593\n21    Elizabethan  1542 1568\n22       Reprisal  1517 1541\n23    Reformation  1497 1516\n24       Humanist  1459 1496\n25     Aurthurian  1435 1458\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerations(yobs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Gen X      Silent     Millennial Zoomer     Gen X      Gen X     \n [7] Boomer     Silent     Millennial Gen X     \nLevels: Silent Boomer Gen X Millennial Zoomer\n```\n:::\n:::\n\n\nBecause people may want to use the term *Zoomer* instead of *Gen Z*, a shortcut function, `use_zoomer()`, which is just a wrapper around `rename_generation(\"Gen Z\", \"Zoomer\")`, is included in the package. The other shortcut functions are `use_gen_y()`, `use_13th()`, `use_baby_boom()` as well as their reciprocals `use_gen_z()`, `use_millennial()`, `use_gen_x()` and `use_boomer()`. \n\nYou may also want to change the years. For example, many people consider 1997 as the end of the Millennial Generation. You can make this change with `redefine_generation()`. With this function, you must specify the new start and the new end year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nredefine_generation(\"Millennial\", 1983, 1997)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGen X is now from 1964 to 1982\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMillennial is now from 1983 to 1997\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nZoomer is now from 1998 to 2030\n```\n:::\n:::\n\n\nSince changing one generation impacts adjacent generations, you'll get a message showing you what the new ranges are for this, the previous, and the next generations.\n\nYou can reset the data back to its original form with `reset_generations()`.\n\n## Conclusion\n\nThat's the package so far! I plan on adding more things in the future, primarily to handle stability issues and to include some error catching. Hopefully, if you use generational cohorts in your data, this package is useful for you. \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}