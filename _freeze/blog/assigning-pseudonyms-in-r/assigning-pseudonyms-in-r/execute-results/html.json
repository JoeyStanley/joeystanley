{
  "hash": "e7470397cc20d6dc8491d6a5e0008f9b",
  "result": {
    "markdown": "---\nlayout: post\ntitle:  \"Assigning Pseudonyms in R with the babynames package\"\ndate:   2019-04-09 13:41:00 -0400\ncategories:\n  - Github\n  - How-to Guides\n  - Methods\n  - R\n  - Side Projects\n  - Skills\n---\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(dplyr.summarise.inform = FALSE)\n```\n:::\n\n\n\nRecently, on [RWeekly.org](https://rweekly.org/#UpdatedPackages89), I saw that Hadley Wickham's [babynames](http://hadley.github.io/babynames/) package had been updated. I had never heard of it, but when I saw that it contained Social Security data for births in the US from 1880 to 2017, I immediately thought that it would make coming up with pseudonyms a lot quicker in the future. So here's a tutorial on how I've done that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Pseudonyms\n\nLots of linguistic research involves the use of anonymized data. As part of the process of ensuring our participants' identities, a common practice is to use pseudonyms when referring to them in research papers. My IRB asks that I destroy records of their actual names once data collection is complete, so these pseudonyms are the only way that I can refer to these folks now.\n\nAs long as the pseudonym isn't the person's actual name, you're free to call them technically whatever you want.[I suppose you could use whimsical names like *Spiderman* and *Batman*, but that might not be the most professional or respectful.]{.aside} Some people use identifiers that contain lots of metadata (Proj_003_F_1991), but are not particularly personable or easy to read sometimes.\n\nI like to take a more personal approach and give them real, plausible names, leaving the metadata to other spreadsheets. Tagliamonte (2006:51) and Schilling (2013:253--254)[Tagliamonte, Sali A. (2006) [*Analysing sociolinguistic variation*](https://doi.org/10.1017/CBO9780511801624). Cambridge: Cambridge University Press.<br/><br/>Schilling, Natalie. (2013) [*Sociolinguistic fieldwork*](https://doi.org/10.1017/CBO9780511980541). Cambridge: Cambridge University Press.]{.aside} both recommend this approach. It gives a little more life to any quotations you might pull from the interviews and the names are easier to remember, which is helpful not only for yourself but also for your readers if you use multiple quotes from any one person (especially when spread across multiple papers). \n\nExactly how you choose these pseudonyms is up to you, but typically you pick something that is consistent with the age, gender, and ethnicity of the speaker. As it turns out, you can use the `babynames` package to help automate some of this name selection. (Edit: The code for this post is now available on [GitHub](https://github.com/JoeyStanley/generating-pseudonyms).)\n\n## The `babynames` package\n\nSome R packages contain lots of new functions that perform some task. Others, like the `babynames` package, just contain data. Specifically, it contains all[Okay, *almost* all of them: names that were used less than five times in a year are not released by Social Security for privacy concerns. This makes up 2%--9% of people each year.]{.aside} the baby names registered by Social Security from 1880 to 2017  There are four datasets here, but the one that I'll focus on is simply called `babynames`. Let's load the data and see what it looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"babynames\")\nlibrary(babynames)\n```\n:::\n\n\nTo access the data, I'll type `babynames::babynames`. The first `babynames` refers to the package, and the second refers to the dataset called `babynames` within that package. Slightly confusing, but no biggie.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(babynames::babynames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n   year sex   name          n   prop\n  <dbl> <chr> <chr>     <int>  <dbl>\n1  1880 F     Mary       7065 0.0724\n2  1880 F     Anna       2604 0.0267\n3  1880 F     Emma       2003 0.0205\n4  1880 F     Elizabeth  1939 0.0199\n5  1880 F     Minnie     1746 0.0179\n6  1880 F     Margaret   1578 0.0162\n```\n:::\n:::\n\n\nA you can see, it contains five columns. The `year`, `sex`, and `name` columns are straightforward. The last two, `n` and `prop`, help give you an idea of how common the name was, with `n` being the number of babies born that year with that name and `prop` being the proportion of babies that year with that name for that sex.\n\nAs it turns out, this dataset is a lot of fun to play with. I'll let you explore what you want, but this is nice to see trends for a specific name over time and other stuff. I've got a bonus section down at the bottom where I make a couple plots.\n\n## Assigning a single pseudonym\n\nSo, with this dataset, we can easily filter out names from a specific year and sex and then sort them by frequency to get a quick list of what the most common names were that year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames::babynames %>%\n    filter(year == 1989, sex == \"M\") %>%\n    arrange(-prop) %>%\n    head(n = 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 5\n    year sex   name            n   prop\n   <dbl> <chr> <chr>       <int>  <dbl>\n 1  1989 M     Michael     65382 0.0312\n 2  1989 M     Christopher 53176 0.0254\n 3  1989 M     Matthew     45371 0.0217\n 4  1989 M     Joshua      44090 0.0210\n 5  1989 M     David       35216 0.0168\n 6  1989 M     Daniel      34998 0.0167\n 7  1989 M     Andrew      34811 0.0166\n 8  1989 M     Justin      32842 0.0157\n 9  1989 M     James       32698 0.0156\n10  1989 M     Robert      30064 0.0143\n11  1989 M     Joseph      29869 0.0143\n```\n:::\n:::\n\n\nOh, hey, me, there in 11th place. Other than showing my name there, this code actually illustrates the gist of what I want to show. If I had interviewed a man who was born the same year as me, this is a list of 11 possible pseudonyms I could choose from.\n\nWe could take this a little further and actually turn it into a function. Doing so can really simplify the script quite a bit when I search for lots of names. I'll also add an argument specifying how many names to show, with 10 as the default.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        head(n = n)\n}\nshow_nyms(1989, \"M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n    year sex   name            n   prop\n   <dbl> <chr> <chr>       <int>  <dbl>\n 1  1989 M     Michael     65382 0.0312\n 2  1989 M     Christopher 53176 0.0254\n 3  1989 M     Matthew     45371 0.0217\n 4  1989 M     Joshua      44090 0.0210\n 5  1989 M     David       35216 0.0168\n 6  1989 M     Daniel      34998 0.0167\n 7  1989 M     Andrew      34811 0.0166\n 8  1989 M     Justin      32842 0.0157\n 9  1989 M     James       32698 0.0156\n10  1989 M     Robert      30064 0.0143\n```\n:::\n\n```{.r .cell-code}\nshow_nyms(1995, \"F\", 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n   year sex   name         n   prop\n  <dbl> <chr> <chr>    <int>  <dbl>\n1  1995 F     Jessica  27935 0.0145\n2  1995 F     Ashley   26602 0.0138\n3  1995 F     Emily    24380 0.0127\n4  1995 F     Samantha 21645 0.0113\n5  1995 F     Sarah    21376 0.0111\n```\n:::\n:::\n\n\nFrom here, you can choose a pseudonym that you feel is appropriate for that person. Unfortunately, because race and ethnicity data are not included here, if your speaker is part of a minority group and you would like their pseudonym to reflect their identity that more visibly, these names might not be the most appropriate since White Americans dominate this dataset. In such cases, you might set `n` to a larger number and scan through to find a more suitable name for your speaker if you want.\n\n# Filtering out existing pseudonyms\n\nOkay, so this works really well for when you want to find a single pseudonym. However, a lot of us have studies that include multiple people, perhaps a couple dozen. Large projects have hundreds of names. We'll get to how to automate this process later, but the first thing we want to watch out for is duplicate names. *Michael* has been one of the most common male names for decades. If we just went with what the most common names were during our participants' years of birth, we'd end up with a whole bunch of Michaels.\n\nWhat we need to do is display the most names that were common for that year---except for the ones that we've already used. It's probably not a good idea to use the same pseudonym within a project. I don't even like repeating names across projects. So if *Michael* was used for a speaker in my very first project, I'll never use that name again. Because I've recorded a lot of nineties babies, my latest batch of interviewees are getting some unusual names[They were from Utah anyway, so it  [fits](https://bycommonconsent.com/2016/03/28/mormons-name-their-kids-the-darnedest-things-born-in-2015-edition/).]{.aside}, so I've resorted to using alternative forms, like *Mike*, which I resisted initially, but have come to accept.\n\nAnyway, all this is to say that you'll need a way to keep track of what names you've used. Probably the most straightforward way to do this is to use whatever metadata spreadsheet you have for your project. Once you've chosen a name for one person, save it to your spreadsheet. When you want to choose a name for someone else, reread the spreadsheet again, pull out the pseudonym column, and exclude names that are in that list. Here's a sample metadata spreadsheet I've created:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nused_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE) %>%\n    print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n   name     sex     yob\n   <chr>    <chr> <dbl>\n 1 Michelle F      1998\n 2 Natalie  F      1993\n 3 Rebecca  F      1998\n 4 Mary     F      2000\n 5 Ashley   F      1999\n 6 Maria    F      1997\n 7 Samuel   M      1991\n 8 Victoria F      1997\n 9 Shelby   F      1996\n10 Rachel   F      1990\n# ℹ 90 more rows\n```\n:::\n:::\n\n\nSo, what we'll need to do is update our `show_nyms` function to exclude these 100 names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    babynames::babynames %>%\n        filter(year == yob, sex == sx, \n               !name %in% used_names$name) %>% # <- exclude these names\n        arrange(-prop) %>%\n        head(n = n)\n}\nshow_nyms(1989, \"M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n    year sex   name        n    prop\n   <dbl> <chr> <chr>   <int>   <dbl>\n 1  1989 M     Jeffrey 12012 0.00573\n 2  1989 M     Travis  11523 0.00550\n 3  1989 M     Dustin   9720 0.00464\n 4  1989 M     Paul     9029 0.00431\n 5  1989 M     Jesse    8855 0.00423\n 6  1989 M     Scott    8851 0.00422\n 7  1989 M     Gregory  8757 0.00418\n 8  1989 M     Kenneth  8556 0.00408\n 9  1989 M     Derek    8362 0.00399\n10  1989 M     Corey    8003 0.00382\n```\n:::\n:::\n\n\nNow I can see new names that I've never used before. For funsies, I like to see what rank those candidate names are for that year. I can do that by adding `rowid_to_column`, but I'll have to do this before filtering out the used names and after filtering for year and sex, so I'll have to split the `filter` up a little bit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>% # <- add rank for each year\n        filter(!name %in% used_names$name) %>%\n        head(n = n)\n}\nshow_nyms(1989, \"M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n    rank  year sex   name        n    prop\n   <int> <dbl> <chr> <chr>   <int>   <dbl>\n 1    37  1989 M     Jeffrey 12012 0.00573\n 2    41  1989 M     Travis  11523 0.00550\n 3    48  1989 M     Dustin   9720 0.00464\n 4    49  1989 M     Paul     9029 0.00431\n 5    50  1989 M     Jesse    8855 0.00423\n 6    51  1989 M     Scott    8851 0.00422\n 7    52  1989 M     Gregory  8757 0.00418\n 8    53  1989 M     Kenneth  8556 0.00408\n 9    54  1989 M     Derek    8362 0.00399\n10    55  1989 M     Corey    8003 0.00382\n```\n:::\n:::\n\n\nOkay so it looks like the first 36 most common boy names in 1989 are already used. These are definitely still common names, but like my high school class probably only had about one of each.\n\nSo let's say I've chosen *Jeffrey* as the new name for my 101st participant. I'll go ahead and add that to my `sample_metadata.csv` spreadsheet, save it, and rerun this entire script. Actually, rather than reading it in fresh every time, we could just read it in as a part of the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms(1989, \"M\") %>%\n  filter(name == \"Jeffrey\") %>% \n  select(name, sex, yob = year) %>%\n  write_csv(\"sample_metadata.csv\", append = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    # Read in the used names\n    used_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE)\n    \n    # Find the candidate names\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>%\n        filter(!name %in% used_names$name) %>%\n        head(n = n)\n}\nshow_nyms(1989, \"M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n    rank  year sex   name        n    prop\n   <int> <dbl> <chr> <chr>   <int>   <dbl>\n 1    41  1989 M     Travis  11523 0.00550\n 2    48  1989 M     Dustin   9720 0.00464\n 3    49  1989 M     Paul     9029 0.00431\n 4    50  1989 M     Jesse    8855 0.00423\n 5    51  1989 M     Scott    8851 0.00422\n 6    52  1989 M     Gregory  8757 0.00418\n 7    53  1989 M     Kenneth  8556 0.00408\n 8    54  1989 M     Derek    8362 0.00399\n 9    55  1989 M     Corey    8003 0.00382\n10    56  1989 M     Bryan    7852 0.00375\n```\n:::\n:::\n\n\nSo once I've saved *Jeffrey* into my spreadsheet, I can just run this `show_nyms` function and it'll read in the spreadsheet, check against names that already exist, and find more appropriate names. Next on my list would be Travis, ranking as the 41st most common baby boy name in 1989. Pretty cool.\n\n## Ignore names\n\nAt some point, you may run into a name that you just don't want to use. There were some names I just didn't like for whatever reason. More likely though was that there were alternative spellings of names that I've already used. Like *Corey* instead of *Cory* or maybe *Kathy* instead of *Cathy*. For these homophonous names, I just don't want to use them to avoid potential confusion. In other cases, I chose a name but decided to go for the shortened version, like *Pat* instead of *Patrick*, so I'd need a way to ignore *Patrick* even though *Pat* is in my metadata spreadsheet. What I'll need to do is come up with a separate list of names that I have not used but I want my function to ignore. You have two options: create a separate spreadsheet like your metadata spreadsheet, or just create and maintain the list in the R script itself. It's up to you which one you do but I'll create the list in R. \n\nWhat names should I ignore? For this walk-through, I'll take a look at girls' names born in 1995.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms(1995, \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n    rank  year sex   name          n    prop\n   <int> <dbl> <chr> <chr>     <int>   <dbl>\n 1    43  1995 F     Sydney     7358 0.00383\n 2    49  1995 F     Erin       6564 0.00342\n 3    52  1995 F     Brooke     6374 0.00332\n 4    53  1995 F     Marissa    6082 0.00317\n 5    55  1995 F     Andrea     6009 0.00313\n 6    57  1995 F     Miranda    5978 0.00311\n 7    58  1995 F     Paige      5733 0.00298\n 8    59  1995 F     Katelyn    5573 0.00290\n 9    60  1995 F     Sierra     5494 0.00286\n10    61  1995 F     Gabrielle  5447 0.00284\n```\n:::\n:::\n\n\nSo here, I'd want to ignore *Erin* (not to confuse with *Aaron*) and *Katelyn* (I've already got *Kaitlyn*), so I'll create a list called `ignored_names` with those two as starters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nignored_names <- c(\"Erin\", \"Katelyn\")\n```\n:::\n\n\nI can now update my `show_nyms` function one last time to ignore these too:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    # Read in the used names\n    used_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE)\n    \n    # Find the candidate names\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>%\n        filter(!name %in% used_names$name,\n               !name %in% ignored_names) %>% # <- ignore these names\n        head(n = n)\n}\nshow_nyms(1995, \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n    rank  year sex   name          n    prop\n   <int> <dbl> <chr> <chr>     <int>   <dbl>\n 1    43  1995 F     Sydney     7358 0.00383\n 2    52  1995 F     Brooke     6374 0.00332\n 3    53  1995 F     Marissa    6082 0.00317\n 4    55  1995 F     Andrea     6009 0.00313\n 5    57  1995 F     Miranda    5978 0.00311\n 6    58  1995 F     Paige      5733 0.00298\n 7    60  1995 F     Sierra     5494 0.00286\n 8    61  1995 F     Gabrielle  5447 0.00284\n 9    62  1995 F     Julia      5411 0.00282\n10    63  1995 F     Vanessa    5403 0.00281\n```\n:::\n:::\n\n\nNow those two are ignored from my list. So it's as easy as just creating a list of names you want to ignore. If you'd like you can incorporate that list into the function itself, which will ensure that the function takes into account the most up-to-date list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_nyms <- function(yob, sx, n = 10) {\n    # Read in the used names\n    used_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE)\n    \n    # List of ignored names\n    ignored_names <- c(\"Erin\", \"Katelyn\")\n    \n    # Find the candidate names\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>%\n        filter(!name %in% used_names$name,\n               !name %in% ignored_names) %>%\n        head(n = n)\n}\n```\n:::\n\n\nSo now with this `show_nyms` function, all I need to do is call it once and it'll show me the best names to choose from. When I choose a name, I'll add it to my metadata spreadsheet and save. If there's a name I see and want to ignore, I'll add it to my `ignored_names` list. I'd then go through one at a time and choose pseudonyms for all my participants.\n\n## Automate all this\n\nCurrently, the `show_nyms` function is great for one-at-a-time stuff. If you're actively doing fieldwork, you might only add a couple people a day, and it would be a piece of cake to run this function a couple times. Furthermore, since you know these people personally, you might want to spend a moment to decide on the most appropriate pseudonym given the top 10 or whatever.\n\nOther times, you might just want to automate all this and assign whatever name shows up at the top of the list. Like if you've got 1,000 pseudonyms to dish out, you might not want to sit there and decide on every one. We can modify our existing code to do this task, making sure to not give two people the same name.\n\nOkay, so the first thing I'll do is create a new function. The old one was `show_nyms`. This one is slightly different so I'll call it `assign_nyms` because it'll return the top one. Because I don't need to specify how many to print, I'll remove the `n` argument. I'll also take out the `head(n = n)` line, and replace it with `pull(name)` and then `first()` so that it gets just the first name itself and not any other information associated with it.\n\nIn order to pull off not assigning the same name twice, I'll need to add a new argument, `ignore`. This will be the running list of names I've already assigned. I'll give it a default list that is 1 element long (`\"Joey\"`) so the code doesn't break. In the `filter` function, I'll add yet another filter saying to only return names that are *not* in this list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_nym <- function(yob, sx, ignore = c(\"Joey\")) {\n    # Read in the used names\n    used_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE)\n    \n    # List of ignored names\n    ignored_names <- c(\"Erin\", \"Katelyn\")\n    \n    # Find the candidate names\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>%\n        filter(!name %in% used_names$name,\n               !name %in% ignored_names, \n               !name %in% ignore) %>%  # <- ignore names I just assigned \n        pull(name) %>%\n        first()\n}\n```\n:::\n\n\nOkay, so to use this new function, I'll create a dummy list of randomly generated birth years between 1990 and 2000, with alternating sexes. I'll also create an empty list for the name because the code depends on there being *something* there the first time though.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_be_named <- tibble(yob = sample(1990:2000, 100, replace = TRUE),\n                      sex = rep(c(\"F\", \"M\"), 50),\n                      name = rep(\"\", 100))\nhead(to_be_named)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    yob sex   name \n  <int> <chr> <chr>\n1  1999 F     \"\"   \n2  1991 M     \"\"   \n3  1999 F     \"\"   \n4  1990 M     \"\"   \n5  1990 F     \"\"   \n6  1993 M     \"\"   \n```\n:::\n:::\n\n\nNow, I'm a fan of using functions to iterate through things in R and I've done it many times[I tried using `purrr::map` for this, but just couldn't get it figured out and it wasn't worth the effort for this post.]{.aside}. In general, `for` loops are ignored (and even frowned upon) in R code because they're supposedly slow. But, Hadley Wickham has said that they are *not* slow, and since I've already allocated memory space for the names to go (the new `name` column in my `to_be_named` data frame), it shouldn't be too bad. Furthermore, he said that loops are the only solution when one iteration depends on the values in some other row, which is the case here.\n\nSo, I'll write a `for` loop that assigns a new name for every row of my 100-row dataframe of generated data. The first two arguments of `assign_nym` are the same as we've seen before (I've added the argument names just to be clear what I'm doing). But the third one is where I make sure it doesn't assign two names twice. I've included the argument `ignore = to_be_named$name[1:i]` because that's the list of names that have already been assigned in this loop. When that gets sent to `assign_nym`, it becomes the `ignore` argument (replacing the default `\"Joey\"`), and then when the function is filtering out names, it'll make sure not to let those go through.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:nrow(to_be_named)) {\n    to_be_named$name[[i]] <- assign_nym(yob    = to_be_named$yob[[i]], \n                                        sx     = to_be_named$sex[[i]], \n                                        ignore = to_be_named$name[1:i])\n}\n```\n:::\n\n\nThe result is that `to_be_named` now has the `name` column populated with new, unique pseudonyms that are appropriate for their age and sex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_be_named\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n     yob sex   name  \n   <int> <chr> <chr> \n 1  1999 F     Emma  \n 2  1991 M     Travis\n 3  1999 F     Sydney\n 4  1990 M     Jesse \n 5  1990 F     Erica \n 6  1993 M     Alex  \n 7  1994 F     Andrea\n 8  1994 M     Juan  \n 9  1995 F     Brooke\n10  1998 M     Noah  \n# ℹ 90 more rows\n```\n:::\n:::\n\n\nFortunately, because this list is deterministic and it'll be the same every time you run the code, if you scan through and see names you don't like, you can update your `ignored_names` list and rerun it. So, I found that *Corey*, *Briana*, and *Shawn* were in there and I don't want to confuse them with the homophonous names *Cory*, *Breanna*, and *Sean*. When I remove those, every thing up until them will be the same, but from then on there will be some differences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_nym <- function(yob, sx, ignore = c(\"Joey\")) {\n    # Read in the used names\n    used_names <- read_csv(\"sample_metadata.csv\", show_col_types = FALSE)\n    \n    # List of ignored names\n    ignored_names <- c(\"Erin\", \"Katelyn\", \"Corey\", \"Briana\", \"Shawn\")\n    \n    # Find the candidate names\n    babynames::babynames %>%\n        filter(year == yob, sex == sx) %>%\n        arrange(-prop) %>%\n        rowid_to_column(\"rank\") %>%\n        filter(!name %in% used_names$name,\n               !name %in% ignored_names, \n               !name %in% ignore) %>% \n        pull(name) %>%\n        first()\n}\nfor (i in 1:nrow(to_be_named)) {\n    to_be_named$name[[i]] <- assign_nym(to_be_named$yob[[i]], \n                                        to_be_named$sex[[i]], \n                                        to_be_named$name[1:i])\n}\nto_be_named\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n     yob sex   name   \n   <int> <chr> <chr>  \n 1  1999 F     Sydney \n 2  1991 M     Jesse  \n 3  1999 F     Emma   \n 4  1990 M     Travis \n 5  1990 F     Amy    \n 6  1993 M     Juan   \n 7  1994 F     Marissa\n 8  1994 M     Alex   \n 9  1995 F     Andrea \n10  1998 M     Hunter \n# ℹ 90 more rows\n```\n:::\n:::\n\n\nSo that was quick. This could theoretically be expanded to include a thousand names and it would work just fine. You might end up with some unusual names, but this will in principle work so long as you haven't exhausted all the names. And it would take a ton of people do to do. Here's what the last 10 names are in my sample of 1000 people. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_be_named <- tibble(yob = sample(1990:2000, 1000, replace = TRUE),\n                      sex = rep(c(\"F\", \"M\"), 500),\n                      name = rep(\"\", 1000))\nfor (i in 1:nrow(to_be_named)) {\n    to_be_named$name[[i]] <- assign_nym(to_be_named$yob[[i]], \n                                        to_be_named$sex[[i]], \n                                        to_be_named$name[1:i])\n}\ntail(to_be_named, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n     yob sex   name   \n   <int> <chr> <chr>  \n 1  1991 F     Shana  \n 2  1992 M     Earl   \n 3  2000 F     Zoey   \n 4  1995 M     Kurtis \n 5  2000 F     Alayna \n 6  1991 M     Norman \n 7  2000 F     Lilly  \n 8  1991 M     Bret   \n 9  1993 F     Paris  \n10  1996 M     Raekwon\n```\n:::\n:::\n\n\nSo with just a couple lines of code, you can very quickly assign age- and sex-appropriate pseudonyms to all your participants.\n\n## Conclusion\n\nFinding pseudonyms is not the *most* important part of your research, but it is likely a necessary step. I figure it's nice to use R to help you out even on the little stuff.\n\n<br/>\n\n## Bonus \n\nHere are just some fun plots I made when playing around with the data. This first one shows the trends for the name *Parker*, which my wife and I considered for our daughter. This plot shows that there would have been many more boys her age with that name than girls.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames::babynames %>%\n    filter(name == \"Parker\") %>%\n    ggplot(aes(year, y = prop, color = sex)) + \n    geom_line(size = 1) + \n    scale_color_manual(values = c(\"pink\", \"lightblue\")) + \n    theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](assigning-pseudonyms-in-r_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nMy given name, Joseph, has historically been among the most common male names. Through about the 1920s, at least 1 in 50 baby boys were called Joseph. There was a drop in frequency between the World Wars and in the 1980s it started becoming less common. Ever since then there have been fewer and fewer Josephs born. If this trend continues, Joseph will become old-fashioned as I age, which is kinda fun to think about.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames::babynames %>%\n    filter(name == \"Joseph\") %>%\n    ggplot(aes(year, y = prop, color = sex)) + \n    geom_line(size = 1) + \n    scale_color_manual(values = c(\"pink\", \"lightblue\")) + \n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](assigning-pseudonyms-in-r_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nFinally, the plot below was just an interesting one that shows the diversity in names. I add up the total proportion of people per year are represented in this dataset. Remember that this dataset does not include names if fewer than five people in a year had that name. So if all the data adds up to only 0.96, then 4% of people that year had somewhat unusual names. The higher number is, the fewer uncommon names there were. This chart shows that compared to the 1960s, there are more unusual names, particularly among the women. I'll let the folks in onomastics interpret this, but I thought it was kind of a fun graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames::babynames %>%\n    group_by(year, sex) %>%\n    summarize(total = sum(prop)) %>%\n    ungroup() %>%\n    ggplot(aes(year, total, color = sex)) + \n    geom_line() + \n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](assigning-pseudonyms-in-r_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThat's all! Have fun with `babynames`!",
    "supporting": [
      "assigning-pseudonyms-in-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}