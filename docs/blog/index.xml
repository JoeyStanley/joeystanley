<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Joey Stanley</title>
<link>https://joeystanley.com/blog/</link>
<atom:link href="https://joeystanley.com/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Fri, 17 Oct 2025 14:46:00 GMT</lastBuildDate>
<item>
  <title>MSU Linguistics Colloquium Series</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/msu/</link>
  <description><![CDATA[ 





<p>Thank you for coming to my presentation today! You can download a copy of the slides <a href="../../downloads/251017-MSU.pdf">here</a>.</p>



 ]]></description>
  <category>resentations</category>
  <guid>https://joeystanley.com/blog/msu/</guid>
  <pubDate>Fri, 17 Oct 2025 14:46:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/multinomial-logistic-regression/</link>
  <description><![CDATA[ undefined ]]></description>
  <category>How-to Guides</category>
  <guid>https://joeystanley.com/blog/multinomial-logistic-regression/</guid>
  <pubDate>Mon, 04 Aug 2025 16:46:00 GMT</pubDate>
  <media:content url="https://joeystanley.com/blog/multinomial-logistic-regression/elsewheres.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Testing out the tidynorm package</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/tidynorm/</link>
  <description><![CDATA[ 





<p>Josef Fruehwald has recently released the <a href="https://jofrhwld.github.io/tidynorm/">tidynorm</a> R package. It “provide[s] convenient and tidy functions to normalize vowel formant data.” Since I normalize my data a lot and am entrenched in the <a href="https://www.tidyverse.org">tidyverse</a>, I thought I’d give it a try, especially since I have also written some functions that normalize vowel data and I wanted to compare them. <strong>After playing around <code>tidynorm</code>, I can confidently say it’s a <em>lot</em> better than what my R packages did.</strong> So, the purpose of this post is to</p>
<ol type="1">
<li><p>Show a little bit of what <code>tidynorm</code> can do.</p></li>
<li><p>Convince you to switch from the normalization functions in my own packages (namely, <code>joeyr</code>) and to <code>tidynorm</code>.</p></li>
</ol>
<p>On this page, I walk through the functions in <code>tidynorm</code> that normalized point-based (i.e.&nbsp;not trajectory) formant data. I’ll follow along <a href="https://jofrhwld.github.io/tidynorm/articles/norm-methods.html">this article</a>. As I go through each one, I’ll show how you can implement each method using my own packages if applicable, and how it’s done in <code>tidynorm</code>. Hopefully by the end, I will have convinced you to start adopting <code>tidynorm</code>.</p>
<section id="preliminaries" class="level2">
<h2 class="anchored" data-anchor-id="preliminaries">Preliminaries</h2>
<p>I’ll load the packages I need, including my own <a href="https://joeystanley.github.io/joeysvowels/"><code>joeysvowels</code></a> package from Github.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidynorm)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("joeystanley/joeysvowels")</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(joeysvowels)</span></code></pre></div>
</div>
<p>I’ll play around with the Idahoans dataset in this post, which sample data from 10 people from Idaho.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">idahoans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> joeysvowels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowid_to_column</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sex, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>F4) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 6
   token_id speaker vowel    F1    F2    F3
      &lt;int&gt; &lt;fct&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1        1 01      AA     699. 1655. 2019.
 2        2 01      AA     685. 1360. 1914.
 3        3 01      AA     713. 1507. 2460.
 4        4 01      AA     801. 1143. 1868.
 5        5 01      AA     757. 1258. 1772.
 6        6 01      AA     804. 1403. 2339.
 7        7 01      AA     664. 1279. 1714.
 8        8 01      AA     757. 1325. 1929.
 9        9 01      AA     730. 1578. 2297.
10       10 01      AA     700. 1546. 2109.
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<p>I created this dataset for the express purpose of testing out normalization functions. Let’s take a peek at it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(idahoans, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(F2, F1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> vowel)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>speaker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/tidynorm/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I’ll load my packages as well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("joeystanley/joeyr")</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(joeyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'joeyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:tidynorm':

    norm_deltaF</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("joeystanley/barktools")</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(barktools)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'barktools'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:joeysvowels':

    mouth</code></pre>
</div>
</div>
</section>
<section id="lobanov-normalization" class="level2">
<h2 class="anchored" data-anchor-id="lobanov-normalization">Lobanov normalization</h2>
<p>Though Barreda (<a href="https://doi.org/10.1017/S0954394521000016">2021</a> and <a href="https://doi.org/10.1016/j.wocn.2025.101409">2025</a>) advises against Lobanov normalization, I’ll start there because it’s probably the most familiar to the most number of people. Lobanov normalization is straightforward and can be easily implemented with the <code>scale</code> function in base R. Here’s a more verbose way of doing things:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(speaker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F1_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(F1),</span>
<span id="cb11-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F2_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(F2),</span>
<span id="cb11-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F3_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(F3))</span></code></pre></div>
</div>
<p>Here’s a more compact way that is functionally equivalent using some tidyverse tricks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, scale, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.col}_z"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker)</span></code></pre></div>
</div>
<p>Here’s how you’d do the Lobanov normalization in <code>tidynorm</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">idahoans_lob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm_lobanov</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 10
     .id token_id speaker    F1    F2    F3  F1_z   F2_z   F3_z vowel
   &lt;int&gt;    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;
 1     1        1 01       699. 1655. 2019. 1.15  -0.341 -1.31  AA   
 2     2        2 01       685. 1360. 1914. 1.04  -0.906 -1.57  AA   
 3     3        3 01       713. 1507. 2460. 1.26  -0.624 -0.239 AA   
 4     4        4 01       801. 1143. 1868. 1.94  -1.32  -1.68  AA   
 5     5        5 01       757. 1258. 1772. 1.59  -1.10  -1.91  AA   
 6     6        6 01       804. 1403. 2339. 1.97  -0.824 -0.534 AA   
 7     7        7 01       664. 1279. 1714. 0.872 -1.06  -2.06  AA   
 8     8        8 01       757. 1325. 1929. 1.60  -0.972 -1.53  AA   
 9     9        9 01       730. 1578. 2297. 1.39  -0.488 -0.637 AA   
10    10       10 01       700. 1546. 2109. 1.15  -0.550 -1.09  AA   
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<p>So, the output is identical. The benefit of using <code>scale</code> is that you pop the hood a little bit and it’s easier to see what mathematically is happening. The benefit of using <code>norm_lobanov</code> is that it’s easy to see that you’re doing the Lobanov normalization.</p>
<p>One thing that I think is worth mentioning here—and this will be true of all the <code>tidynorm</code> functions I show here—is that there are two changes to the dataframe other than the addition of new normalized vowel formant columns. First, there is a new <code>.id</code> column, which just shows the row numbers. That gets added during the normalization procedure and apparently stays. Also, the order of columns has shifted a little bit. The formant columns are now located before the vowel column.</p>
<p>Also, please note that <code>tidynorm</code> function calls by default return some helpful information that provides some good feedback to make sure you’ve normalized the way you meant to. For me though, those messages were causing some issues in my R console, so throughout this post I’ll use <code>.silent = TRUE</code> anytime I run a <code>tidynorm</code> function. Be sure to look at the output in your own code though, which you can can always do with <code>check_norm</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_norm</span>(idahoans_lob)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Normalization Step
• normalized with `tidynorm::norm_lobanov()`
• normalized `F1`, `F2`, and `F3`
• normalized values in `F1_z`, `F2_z`, and `F3_z`
• grouped by `speaker`
• within formant: TRUE
• (.formant - mean(.formant, na.rm = T))/(sd(.formant, na.rm = T))</code></pre>
</div>
</div>
</section>
<section id="logmeans-neary-normalization" class="level2">
<h2 class="anchored" data-anchor-id="logmeans-neary-normalization">Logmeans (=Neary) normalization</h2>
<p>My go-to normalization procedure now is the Nearey method, thanks to Barreda’s work. In my <code>joeyr</code> package, I had a function called <code>norm_logmeans</code>, which handled everything as best I could. (Although it was crashing for some users, and I’m not sure why.) It was pretty clunky because it required you to log transform the formant measurements first and I always ended up renaming the columns afterwards anyway. Because it was inhereted code, it also was a departure from <code>tidyverse</code> under the hood, so the result didn’t get returned as a tibble.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, log, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.col}_log"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">joeyr_norm_logmeans</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.formant_cols =</span> F1_log<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3_log,</span>
<span id="cb17-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.speaker_col =</span> speaker,</span>
<span id="cb17-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vowel_col =</span> vowel) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F1_logmeans =</span> F1_log_logmeans,</span>
<span id="cb17-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F2_logmeans =</span> F2_log_logmeans,</span>
<span id="cb17-8">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F3_logmeans =</span> F3_log_logmeans) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 12
   token_id speaker vowel    F1    F2    F3 F1_log F2_log F3_log F1_logmeans
      &lt;int&gt; &lt;fct&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt;
 1        1 01      AA     699. 1655. 2019.   6.55   7.41   7.61      -0.645
 2        2 01      AA     685. 1360. 1914.   6.53   7.22   7.56      -0.666
 3        3 01      AA     713. 1507. 2460.   6.57   7.32   7.81      -0.626
 4        4 01      AA     801. 1143. 1868.   6.69   7.04   7.53      -0.509
 5        5 01      AA     757. 1258. 1772.   6.63   7.14   7.48      -0.567
 6        6 01      AA     804. 1403. 2339.   6.69   7.25   7.76      -0.505
 7        7 01      AA     664. 1279. 1714.   6.50   7.15   7.45      -0.697
 8        8 01      AA     757. 1325. 1929.   6.63   7.19   7.56      -0.566
 9        9 01      AA     730. 1578. 2297.   6.59   7.36   7.74      -0.602
10       10 01      AA     700. 1546. 2109.   6.55   7.34   7.65      -0.644
# ℹ 1,090 more rows
# ℹ 2 more variables: F2_logmeans &lt;dbl&gt;, F3_logmeans &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Fortunately, <code>tidynorm</code> makes this much easier to do now and you can do the whole thing with just one line of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm_nearey</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 10
     .id token_id speaker    F1    F2    F3  F1_lm    F2_lm F3_lm vowel
   &lt;int&gt;    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;
 1     1        1 01       6.55  7.41  7.61 -0.645  0.216   0.415 AA   
 2     2        2 01       6.53  7.22  7.56 -0.666  0.0197  0.361 AA   
 3     3        3 01       6.57  7.32  7.81 -0.626  0.123   0.613 AA   
 4     4        4 01       6.69  7.04  7.53 -0.509 -0.154   0.337 AA   
 5     5        5 01       6.63  7.14  7.48 -0.567 -0.0583  0.285 AA   
 6     6        6 01       6.69  7.25  7.76 -0.505  0.0506  0.562 AA   
 7     7        7 01       6.50  7.15  7.45 -0.697 -0.0416  0.251 AA   
 8     8        8 01       6.63  7.19  7.56 -0.566 -0.00604 0.369 AA   
 9     9        9 01       6.59  7.36  7.74 -0.602  0.169   0.544 AA   
10    10       10 01       6.55  7.34  7.65 -0.644  0.148   0.459 AA   
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>It appears that the original F1–F3 columns have been lost and new log-transformed versions of them take their place. This appears to be a bug in the procedure and will hopefully be fixed soon.</p>
</div>
</div>
<p>As I was playing with this, I realized that my own <code>norm_logmeans</code> function wasn’t necessarily returning the same output. I found out it was for two reasons. First, I have been using <code>log10</code> instead of <code>log</code> as input. I’m now pretty concerned that I might has messed up a lot of people’s analyses, including my own! The other reason was I had to make sure that I was using all the same formants (F1–F3 and not just F1 and F2) when doing the two procedures to get them to match. Fortunately, they do, which means my <code>norm_logmeans</code> function did indeed have the match all incorporated correctly. Still, I’d recommend switching over to <code>tidynorm</code> because it’s a whole lot less clunky than my own version.</p>
</section>
<section id="delta-f-normalization" class="level2">
<h2 class="anchored" data-anchor-id="delta-f-normalization">Delta-F Normalization</h2>
<p>In my joeyr package, I have a function called <code>norm_deltaF</code>. I wrote it quickly without much testing and I honestly haven’t used it much. But it does work:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-2">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(speaker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">joeyr_norm_deltaF</span>(F1, F2, F3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 9
# Groups:   speaker [10]
   token_id speaker vowel    F1    F2    F3 F1_deltaF F2_deltaF F3_deltaF
      &lt;int&gt; &lt;fct&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1        1 01      AA     699. 1655. 2019.     0.626      1.48      1.81
 2        2 01      AA     685. 1360. 1914.     0.614      1.22      1.71
 3        3 01      AA     713. 1507. 2460.     0.639      1.35      2.20
 4        4 01      AA     801. 1143. 1868.     0.718      1.02      1.67
 5        5 01      AA     757. 1258. 1772.     0.677      1.13      1.59
 6        6 01      AA     804. 1403. 2339.     0.720      1.26      2.09
 7        7 01      AA     664. 1279. 1714.     0.595      1.15      1.53
 8        8 01      AA     757. 1325. 1929.     0.678      1.19      1.73
 9        9 01      AA     730. 1578. 2297.     0.654      1.41      2.06
10       10 01      AA     700. 1546. 2109.     0.627      1.38      1.89
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<p>But, this too was a bit clunky because rather than passing in all the formant columns at once, it actually required F1, F2, and F3 to be separate arguments. As expected, <code>tidynorm::norm_deltaF</code> handles this in a much more straightforward manner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-2">   tidynorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm_deltaF</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 10
     .id token_id speaker    F1    F2    F3 F1_df F2_df F3_df vowel
   &lt;int&gt;    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;
 1     1        1 01       699. 1655. 2019. 0.626  1.48  1.81 AA   
 2     2        2 01       685. 1360. 1914. 0.614  1.22  1.71 AA   
 3     3        3 01       713. 1507. 2460. 0.639  1.35  2.20 AA   
 4     4        4 01       801. 1143. 1868. 0.718  1.02  1.67 AA   
 5     5        5 01       757. 1258. 1772. 0.677  1.13  1.59 AA   
 6     6        6 01       804. 1403. 2339. 0.720  1.26  2.09 AA   
 7     7        7 01       664. 1279. 1714. 0.595  1.15  1.53 AA   
 8     8        8 01       757. 1325. 1929. 0.678  1.19  1.73 AA   
 9     9        9 01       730. 1578. 2297. 0.654  1.41  2.06 AA   
10    10       10 01       700. 1546. 2109. 0.627  1.38  1.89 AA   
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<p>One (of several) major benefits to <code>tidynorm</code> is its consistency in syntax. All three of my normalization procedures had different syntax, which reflected wildly different implementations under the hood. It was not good. <code>tidynorm</code>’s functions are all consistent because they actually call a more general <code>norm_generic</code>.</p>
</section>
<section id="bark-difference-metric" class="level2">
<h2 class="anchored" data-anchor-id="bark-difference-metric">Bark Difference Metric</h2>
<p>The last one that I’ve written code for that <code>tidynorm</code> handles so much better is the Bark Difference Metric. This was once a part of <code>joeyr</code> but I moved it to <code>barktools</code> instead. Here’s how you’d get the Bark Difference Metric using that package. First, you calculate the barks, and then you manually get the difference metric.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, bark, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.col}_bark"</span>),</span>
<span id="cb25-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F1_barkdiff =</span> F1_bark <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> F3_bark,</span>
<span id="cb25-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F2_barkdiff =</span> F2_bark <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> F3_bark)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 11
   token_id speaker vowel    F1    F2    F3 F1_bark F2_bark F3_bark F1_barkdiff
      &lt;int&gt; &lt;fct&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;
 1        1 01      AA     699. 1655. 2019.    6.52   11.7     13.1       -6.55
 2        2 01      AA     685. 1360. 1914.    6.41   10.5     12.7       -6.30
 3        3 01      AA     713. 1507. 2460.    6.62   11.1     14.4       -7.77
 4        4 01      AA     801. 1143. 1868.    7.25    9.34    12.6       -5.30
 5        5 01      AA     757. 1258. 1772.    6.94    9.95    12.2       -5.26
 6        6 01      AA     804. 1403. 2339.    7.27   10.7     14.1       -6.79
 7        7 01      AA     664. 1279. 1714.    6.25   10.1     12.0       -5.72
 8        8 01      AA     757. 1325. 1929.    6.94   10.3     12.8       -5.83
 9        9 01      AA     730. 1578. 2297.    6.75   11.4     13.9       -7.19
10       10 01      AA     700. 1546. 2109.    6.53   11.3     13.4       -6.84
# ℹ 1,090 more rows
# ℹ 1 more variable: F2_barkdiff &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Straightforward and transparent. Here’s how you’d do it in <code>tidynorm</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm_barkz</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 10
     .id token_id speaker    F1    F2    F3 F1_bz F2_bz F3_bz vowel
   &lt;int&gt;    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;
 1     1        1 01       6.52 11.7   13.1 -6.55 -1.33     0 AA   
 2     2        2 01       6.41 10.5   12.7 -6.30 -2.26     0 AA   
 3     3        3 01       6.62 11.1   14.4 -7.77 -3.27     0 AA   
 4     4        4 01       7.25  9.34  12.6 -5.30 -3.21     0 AA   
 5     5        5 01       6.94  9.95  12.2 -5.26 -2.25     0 AA   
 6     6        6 01       7.27 10.7   14.1 -6.79 -3.41     0 AA   
 7     7        7 01       6.25 10.1   12.0 -5.72 -1.92     0 AA   
 8     8        8 01       6.94 10.3   12.8 -5.83 -2.48     0 AA   
 9     9        9 01       6.75 11.4   13.9 -7.19 -2.51     0 AA   
10    10       10 01       6.53 11.3   13.4 -6.84 -2.08     0 AA   
# ℹ 1,090 more rows</code></pre>
</div>
</div>
<p>Like what we saw with the Lobanov method above, the benefit of using the more lower-level functions is that you are more closely connected to the math. The downside is that it’s prone to error and it’s not clear from the code what it’s actually doing. The benefit of this <code>norm_barkz</code> function is that it’s all wrapped up into one tidy function and the purpose is clear. In this case the <code>F1_bz</code> and <code>F2_bz</code> columns correspond to the difference metrics. The <code>F3_bz</code> column is not helpful since it’s just <code>Bark(F3) - Bark(F3)</code>, which is zero, so you can drop it.</p>
</section>
<section id="watt-and-fabricious-method" class="level2">
<h2 class="anchored" data-anchor-id="watt-and-fabricious-method">Watt and Fabricious method</h2>
<p>This is not a method I have ever implemented in any of my packages, so I’ll just show how it’s done in tidynorm. (You can probably guess the syntax by now though!)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">idahoans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm_wattfab</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> speaker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,100 × 10
     .id token_id speaker    F1    F2    F3 F1_wf F2_wf F3_wf vowel
   &lt;int&gt;    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;
 1     1        1 01       699. 1655. 2019.  1.27 0.903 0.789 AA   
 2     2        2 01       685. 1360. 1914.  1.24 0.742 0.748 AA   
 3     3        3 01       713. 1507. 2460.  1.29 0.822 0.962 AA   
 4     4        4 01       801. 1143. 1868.  1.45 0.623 0.730 AA   
 5     5        5 01       757. 1258. 1772.  1.37 0.686 0.693 AA   
 6     6        6 01       804. 1403. 2339.  1.46 0.765 0.914 AA   
 7     7        7 01       664. 1279. 1714.  1.20 0.698 0.670 AA   
 8     8        8 01       757. 1325. 1929.  1.37 0.723 0.754 AA   
 9     9        9 01       730. 1578. 2297.  1.32 0.861 0.898 AA   
10    10       10 01       700. 1546. 2109.  1.27 0.843 0.824 AA   
# ℹ 1,090 more rows</code></pre>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>As you can see here, <code>tidynorm</code> handles various normalization procedures in a simple way with consistent syntax across functions. While some of my functions kinda worked, this works way better.</p>
<p>In fact, as of today, <strong>I have depreciated the three normalizations functions within <code>joeyr</code></strong> (<code>norm_logmeans</code>, <code>norm_anae</code>, and <code>norm_deltaF</code>). The functions still do exist, but they do nothing other than give a message saying that you should switch to <code>tidynorm</code>. This means, if you update to <code>joeyr</code> version 0.10, it’ll introduce breaking changes into your code. If you want to keep using my functions, you can by adding <code>joeyr_</code> as a prefix to the function name (e.g.&nbsp;<code>joeyr_norm_logmeans</code>).</p>
<p>There is more to <code>tidynorm</code> beyond what I’ve shown here, namely that it handles normalizing trajectory data and DCT coefficients, but I’ll have to play around with those later.</p>


</section>

 ]]></description>
  <category>How-to Guides</category>
  <category>Methods</category>
  <category>Phonetics</category>
  <category>R</category>
  <category>Skills</category>
  <guid>https://joeystanley.com/blog/tidynorm/</guid>
  <pubDate>Wed, 18 Jun 2025 15:39:00 GMT</pubDate>
</item>
<item>
  <title>New publication in Journal of English Linguistics</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/new-publication-in-jengl/</link>
  <description><![CDATA[ 





<p>I’m thrilled to announce my latest journal article, “LTH Affrication: A sociolinguistic indicator in the American West”, co-authored with <a href="https://jessicashepherd.github.io">Jessica Shepherd</a>, has been published in <em>Journal of English Linguistics</em>! Jess was an undergraduate at BYU and was an RA for me when we started this project. She is now a PhD student at Michigan State and <a href="https://mi-diaries.org/2023/08/28/9798/">is working</a> on the <a href="https://mi-diaries.org">MI Diaries project</a>.</p>
<section id="summary" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<section id="the-phenomenon" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-phenomenon">The phenomenon</h3>
<p>I don’t remember when I first noticed the phenomena that we’re calling “LTH Affrication”, but sometime maybe five years ago I started hearing people pronounce words like <em>health</em> and <em>stealth</em> with some sort of pause between the /l/ and /θ/. In the manuscript, we transcribe it as a dental affricate [t̪͡θ]. I don’t think I’ve ever seen this mentioned in linguistics literature at all, so it’s kind of exciting to be the first to describe something!</p>
<p>Here are the examples we showed in Figure 2 of the paper.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://joeystanley.com/blog/new-publication-in-jengl/ID051-Jamie-noclosure.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Figure 2a: An example of no closure. This is from “Jaime”, a White Latter-day Saint female born in 1982 and raised in Idaho Falls, Idaho.</figcaption>
</figure>
</div>
<center style="font-size: 85%;">
<audio src="ID051-Jaime_filth.wav" controls="" preload="">
</audio>
<br> A clear example of no closure. <br> (“Jamie”, White, female, 1982, Latter-day Saint, Idaho Falls)
</center>
<p><br></p>
<img src="https://joeystanley.com/blog/new-publication-in-jengl/ID034-Connie-closure.png" class="preview-image img-fluid">
<center style="font-size: 85%;">
<audio src="ID034-Connie_filth.wav" controls="" preload="">
</audio>
<br> A clear example of closure. <br> (“Connie”, White, female, 1967, Latter-day Saint, Blackfoot Idaho)
</center>
<p><br></p>
<img src="https://joeystanley.com/blog/new-publication-in-jengl/MT059-Melody-ambiguous.png" class="img-fluid">
<center style="font-size: 85%;">
<audio src="MT059-Melody_filth.wav" controls="" preload="">
</audio>
<br> An unclear case. <br> (“Melody”, White, female, 1982, Helena Montana)
</center>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>As a bonus to you, dear blog reader, you can download this audio <a href="examples.Collection">here</a>.</p>
</div>
</div>
<p>At first, I thought it was some sort of [t]-insertion similar to what I occasionally hear in words like <em>false</em> and <em>else</em>. An earlier version of the manuscript called it <em>t</em>-excrescence, that word referring to a specific kind of insertion where consonant is inserted between two other consonants. When a reviewer pushed back on the obscure jargon term, we reconsidered the name. We eventually decided insertion implies a phonological process that we’re not fully committed to, and we instead opted for a more descriptive, phonetic name, <em>affrication</em>.</p>
</section>
<section id="the-study" class="level3">
<h3 class="anchored" data-anchor-id="the-study">The study</h3>
<p>Around the time I was hearing this affrication, I was starting two different data collection projects that involved wordlists. So I threw in a couple LTH words just to see what would happen. The data from one of these projects eventually became the dataset for this study and we got recordings from 265 people, mostly from the region we’re calling the Middle Rockies, which includes Utah, Idaho, Montana, and Wyoming.</p>
<p>A surprising number of people—about a third—had LTH affrication! We didn’t expect it to be so high, so that was pretty cool for us. However, despite being so variable, none of the demographic variables we collected were significant predictors for whether someone had affrication or not. It seems to occur somewhat randomly across our sample. We take this as evidence that LTH affrication is an <em>indicator</em> in the Labov (1972:178–180) sense, which are linguistic variables that are socially invisible. We’ve scoured the internet for comments on English in the region and we have not found anybody saying anything about words with /lθ/, even though a third of people have it. It’s kinda cool to catch such an under-the-radar linguistic variable.</p>
<p>Focusing then on the 88 people who did have affrication, we looked at the duration of the closures in that affricate. Women, suburban-oriented people, and practicing Latter-day Saints had the longest closure durations. Age was not a significant predictor, but there is weak evidence that Utahns have longer durations too. So, there may be some social meaning involved in those durations (see Hallie Davidson’s <a href="../../downloads/241109-NWAV_ClosureDurations.pdf">work-in-progress</a> on exploring that specifically!), which would be a cool thing to discover.</p>
</section>
<section id="theoretical-implications" class="level3">
<h3 class="anchored" data-anchor-id="theoretical-implications">Theoretical implications</h3>
<p>In the paper, we discuss at length the idea of infrequent phonological variables. LTH Affrication certainly qualifies: there are only about four commonly used words with /lθ/: <em>health</em>, <em>wealth</em>, <em>stealth</em>, and <em>filth</em>, plus their derived forms. We estimate that you might hear /lθ/ roughly once every 51 minutes of continuous speech. The only real way to study such infrequent variables is to elicit them directly with wordlists or reading passages. We compare this to /æɡ/- or /ɛɡ/-raising, which people have specifically mentioned not being able to study because of a lack of data. However, we observe that /æɡ/-raising in places like Washington State still have complex indexical fields, similar to more common variables like /æ/-lowering, /t/-release, and ING. If it takes fewer tokens to accrue such complex meanings, listeners apparently store rich sociolinguistic information with every instance of every variable, which is exactly what Exemplar Theory proposes.</p>
<p>We then talk about how LTH Affrication appears to be part of the Latter-day Saint religiolect. This is yet another example of how fortition generally is common among Latter-day Saint Utahns and we speculate as to why fortition would be used as a linguistic device to index one’s Latter-day Saint identity. Part of this is also tied up with the idea of suburban identity because most of the Wasatch Front, where 90% of Utahns live and is where the core Latter-day Saint culture is found, is one long stretch of suburbs. We also point out that former Latter-day Saints pattern more with people of other faiths, which not only strengthens the idea that LTH is associated with Latter-day Saints, but also acknowledges this group as distinct from practicing Latter-day Saints.</p>
<p>There are lots of places where insertion or affrication happens in English: <em>empty</em>, <em>glimpse</em>, <em>pumpkin</em>, <em>el</em>[t]<em>se</em>, <em>prin</em>[t]<em>ce</em>, <em>ham</em>[p]<em>ster</em>, <em>warm</em>[p]<em>th</em>, <em>streng</em>[k]<em>th</em>, and <em>ten</em>[t]<em>sion</em>. All of these have sonorants followed by obstruents. Are there communities that have such insertion or affrication in /lf/ (<em>itself</em>, <em>golf</em>, <em>welfare</em>), /lʃ/ (<em>expulsion</em>, <em>convulsion</em>, <em>propulsion</em>), /mf/ (<em>emphasis</em>, <em>comfort</em>, <em>triumph</em>), or /nθ/ (<em>month</em>, <em>tenth</em>, <em>anthem</em>)?</p>
<p>Anyway, it has been a fun paper to work on and I’m thrilled to finally see it in print.</p>
</section>
</section>
<section id="behind-the-scenes" class="level2">
<h2 class="anchored" data-anchor-id="behind-the-scenes">Behind the scenes</h2>
<p>I like hearing about the behind the scenes of others’ papers, so here’s that background on this one.</p>
<p>On September 8, 2022, Jess stopped by my office out of the blue, started chatting about things, looked through a lot of the data I had just collected a few months prior, and we got interested in LTH because she’s heard it before. I have in my notes that it was such a small topic that I wasn’t planning on doing a full publication on it, but because a student was interested in it, I changed my mind!</p>
<p>Later that month, we met again. Jess had reviewed what others have said about <em>excrescence</em> and we decided that closure duration was the thing we’d focus on. At the time we were considering <em>English Language and Linguistics</em> since we didn’t think we could make enough of a theoretical contribution for it to be in <em>Journal of English Linguistics</em></p>
<p>By the end of Fall 2022, I had finished transcribing all the data and had gotten duration measurements. We had basically found the results that we presented in the paper. The methods and results sections of the paper were written.</p>
<p>In February 2023, I recoded all the data and got new duration measures since I noticed a bit of an error in how I did it before. The general findings were unchanged though. On February 10, 2023 I was in the zone and wrote about 1800 words, mostly in the literature review. By February 27th, we had a full manuscript.</p>
<p>In March 2023, we submitted to <em>Language Variation and Change</em>, but got a very fair desk reject. So we made some changes and on March 15th, submitted it to <em>Journal of English Linguistics</em>. I guess I was feeling good about the theoretical contribution that this makes.</p>
<p>We got our first R&amp;R from them on August 17th, 2023, about five months after submission. However, it was terrible timing for both of us. I had just started parental leave so I wasn’t going to work on it for several months. And Jess had just moved across the country and was about to start her first year of her PhD program, so she wasn’t available to work on it either. We finally revisited the reviews in February 2024 and on March 15th, we resubmitted it to <em>JEngL</em> (exactly one year after our first submission).</p>
<p>We got a conditional accept on April 2, 2025 (12½ months after we submitted). I’m not quite sure why it took <em>JEngL</em> so long. We resubmitted on April 22 and got the official accept on May 2. It was published online today, June 17th.</p>
<p>So from initial idea to publication took about three years.</p>
</section>
<section id="bonus" class="level2">
<h2 class="anchored" data-anchor-id="bonus">Bonus</h2>
<p>This is one of the coolest clips I have. Here is a recording and spectrogram of someone saying <em>both</em>. But, not only does she have [l] insertion in the word, saying it as if it were <em>bolth</em>, but she then has LTH-affrication on top of it!</p>
<img src="https://joeystanley.com/blog/new-publication-in-jengl/UT153-Giselle_both.png" class="img-fluid">
<center style="font-size: 85%;">
<audio src="UT153-Giselle_both.wav" controls="" preload="">
</audio>
<br> <em>both</em> as [boɫt̪͡θ], with some creak. <br> (“Giselle”, White, female, 2001, non-practicing Latter-day Saint, Provo Utah)
</center>
<p><br></p>


</section>

 ]]></description>
  <category>Mormonese</category>
  <category>Phonetics</category>
  <category>Publications</category>
  <category>Research</category>
  <category>Students</category>
  <category>Utah</category>
  <category>West</category>
  <guid>https://joeystanley.com/blog/new-publication-in-jengl/</guid>
  <pubDate>Tue, 17 Jun 2025 14:56:00 GMT</pubDate>
  <media:content url="https://joeystanley.com/blog/new-publication-in-jengl/ID034-Connie-closure.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Kohler Tapes (Update #3)</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/kohler-tapes-update3/</link>
  <description><![CDATA[ 





<p>I am ecstatic to report that I have now have my Kohler Tapes collection processed! In this post, I’ll give an update on how I was able to process so much data. I’ll also give a really quick demonstration of how to use new-fave and I’ll show some of the very first vowel plots from this dataset, even as I see them!</p>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I’ve given some explanations of the Kohler Tapes collection <a href="../../blog/kohler-tapes">here</a>, <a href="../../blog/kohler-tapes-update">here</a>, and <a href="../../blog/kohler-tapes-update2">here</a>, so I won’t give a full history of the processing here. But, in January 2018, I met Norm Kohler in Heber, Utah. When he was a middle school teacher there in the 80s and 90s, he asked his students interview their grandparents or some other older person in town as part of a local history unit. He collected 1200 tapes and intended to write a compilation of some of these oral narratives. He unfortunately never did and after his passing, the tapes fell into the custody of the Wasatch Historical Society. They knew I was interested in the tapes, so they got into contact and in 2021, I finally got the tapes.</p>
<p>Over the next few months, I carefully photographed and cataloged the 751 tapes. BYU’s Office of Digital Humanities digitized them, and I learned I had 631 hours of audio from 806 interviewees from 1986 to 2001. Thanks to a John Topham and Susan Redd Butler BYU Faculty Research Award from the <a href="https://reddcenter.byu.edu">Charles Redd Center for Western Studies</a>, I hired an RA to listen to the first few minutes of each tape to write down any demographic information she could gather. She was then able to find over half the people in a genealogy database, which we used to fill out the rest of the metadata. With that, I learned that the birth years were from 1892 to 1953 and most people were from Wasatch County.</p>
<section id="transcription" class="level3">
<h3 class="anchored" data-anchor-id="transcription">Transcription</h3>
<p>With that metadata filled out, I had to start the arduous task of transcribing all of these tapes. The problem is it was simply too much for me to do. It took me <a href="../../blog/transcribing-a-sociolinguistic-corpus/index.html">172 hours</a> of work to transcribe about 46½ hours of audio for my dissertation. At that rate, it would take me 2,334 hours to do all of these tapes. Even when I was highly motivated during my dissertation transcription, I couldn’t do more than about two hours of work a day without burning out, so if I plan on just two hours a day, it’d end up taking me 1,167 work days, or 233 work weeks, or about 5 years. Two hours a day for five years. No way.</p>
<p>Well, I thought maybe I could hire some students to move things along and divide the labor. I’ve found that student transcribers are typically a bit slower, so based on previous work I supervised, I calculated that it’d take a team of about 14 student workers two years to get it all done. Not to mention the roughly $100,000 I’d need to pay them. I don’t foresee myself securing a grant that big or managing a lab that involved for a while. So intimidated by the amount of audio, the tapes sat untranscribed for a couple years.</p>
<p>Then, about a year ago, a bright new student expressed interest in the project. So applied for an received an Annaley Naegle Redd Assistantship, also awarded by the Redd Center. That paid for that student to begin transcribing a few key tapes. I’ve already <a href="../../blog/kohler-tapes-update2/">mentioned</a> that I was interested in Wallsburg, so we selected a few tapes from there and from Heber to be the first ones to analyze.</p>
<p>Well so then in Fall 2024 I attended a talk by a PhD student in computer science who has a background in linguistics. The talk was basically, “Here’s all the cool stuff that linguists can do with AI.” I’ve already <a href="../../blog/whisper/index.html">tried using Whisper</a> to transcribe some of these tapes with some success. But most of what my RA had been doing for transcription was correcting those AI-generated transcriptions, and most of that time was adding back in the speech errors and filled pauses that Whisper didn’t include. When I spoke to the CS student presenter about this he said, it would certainly be feasible to use AI to transcribe the rest of tapes.</p>
<p>So, over the next several months, the CS student started working on this.<sup>1</sup> At first, we tried fine-tuning Whisper. He said with about 10 hours of manually transcribed audio from a wide variety of tapes, that’d be enough to get Whisper to perform better on this collection, namely the audio quality, the variety of English, and the speech errors. So, my RA transcribed a random 10 minutes from numerous tapes and we used that train Whisper.</p>
<p>In January 2025, we discovered that it wasn’t doing as well as we had hoped. But, the CS student heard about a model called <a href="https://arxiv.org/pdf/2408.16589">CrisperWhisper</a>. It’s a fine-tuned version of Whisper that claims to transcribe every spoken word exactly as is, including fillers, pauses, stutters, and false starts. Perfect! So, the CS student started playing with it and we found that the results were quite good! There is some nuance and complexity that is involved in getting this to work, but I’ll explain more of that another time. The point is, we were now ready to start transcribing all the audio.</p>
<p>Over the next six weeks or so, the CS student used BYU’s supercomputer to transcribe the tapes. It took a while because 1) it is a complex task, 2) this is a lot of audio to work with, and 3) other tasks sometimes took priority so we were often bumped down the processing queue. But he got it done!</p>
<p>The next step for the student was to turn those transcriptions into a format that is suitable for me, namely a Praat TextGrid. What underlies this though was extensive checking to make sure it did a good job. This took most of that semester, partly because this is a back-burner project for this student and I had a busy time teaching so I didn’t have much time to help.</p>
<p>But on May 22, 2025, I finally got my first copy of the TextGrids! There are still some issues to work out, like correcting some things, making sure boundaries don’t overlap, converting numerals to text, and most importantly, speaker diarization. But, I’m super excited to have these transcriptions finally! I can now say there are approximately 4.7 million words of transcribed audio in this collection.</p>
</section>
<section id="forced-alignment" class="level3">
<h3 class="anchored" data-anchor-id="forced-alignment">Forced Alignment</h3>
<p>While the CS student’s work is mostly done, sociophoneticians know that this is just the beginning of the pipeline of data processing. My next task was to use the Montreal Forced Aligner to take those utterance-level transcriptions and turn them into word- and phoneme-level transcriptions.</p>
<p>My first step was to rethink how I had been running MFA. Normally, I use a custom Praat script to move the files to the MFA folder and clean them up along the way, like removing things that I know will slow MFA down. Once I run MFA, I then have a post-processing script to move them back and to some other cleaning up. This is a one-file-at-a-time kind of task, and while that’s fine for all my projects so far, it was not going to work for this one. I have about 1,184 files (751 tapes, many of which have content on side B). And since I know the transcriptions I have are just a first pass, I’ll need to run these again at some point (perhaps multiple times). This means that I really needed to find a way to run them all at once.</p>
<p>Fortunately, MFA can handle many files at the same time. And all the transcriptions were in one folder already. However, I ran into some trouble and I’m not sure what was wrong. Perhaps it’s just my unfamiliarity with MFA, but I could not get it to run on all the files at once.<sup>2</sup> What I eventually did was move all the files to their respective folders and generate the command line prompt to run each one. I then dumped all of those commands into a shell script and had MFA run all of them in succession. (I wrote an R script to automate this entire process.) I’ll probably do a blog post about it at some point because I think it worked quite well. So, after a few days of working on this, I eventually was able to process all the files with the click of a button. And 36 hours later, the forced alignment was done!</p>
</section>
<section id="formant-extraction" class="level3">
<h3 class="anchored" data-anchor-id="formant-extraction">Formant Extraction</h3>
<p>The next step is to extract formants. I wanted to try <a href="https://forced-alignment-and-vowel-extraction.github.io/new-fave/">new-fave</a> because 1) it’s new, 2) it looks fantastic, 3) it’s the only automated way I know of to do all the files. Fortunately, getting that script set up was straightforward. After my success with MFA, I decided to use the same approach and generate a shell script that processes each file one at a time. I couldn’t use FAVE’s built-in function for handling lots of files because the file structure for this project wasn’t conducive to it, and that’s fine. Again, I’ll probably do a tutorial on this soon because it worked really well.</p>
<p>The tricky part was just the size of the collection. I’ve learned that reading and writing too much on an external harddrive can cause problems. These files were in some cloud storage, which worked for a while, but it caused some memory problems partway through because files weren’t downloading. So I moved the entire collection to my computer’s harddrive and continued from there. It was moving slowly, but it was moving.</p>
<p>It took about five days of non-stop processing on my computer, but I’m thrilled to see that as of 2:04pm today, all the files were processed. I am writing this at 2:11pm, so I’m still in the euphoria of having the data finished. So, come with me as I process the files for the first time.</p>
</section>
</section>
<section id="first-look" class="level2">
<h2 class="anchored" data-anchor-id="first-look">First look</h2>
<p>I’ll start by loading <code>tidyverse</code> and my own package that has some data processing functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(joeyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(geomtextpath)</span></code></pre></div>
</div>
<p>Just yesterday, Joe Fruehwald <a href="https://forced-alignment-and-vowel-extraction.github.io/new-fave/usage/outputs/">posted about the output of new-fave</a>. Let’s start with the point data. I’ll use <code>Sys.glob</code> and to fetch the pathnames of all the files I want to read in, and then I’ll use <code>map</code> to actually read them in. Unfortunately, I won’t be able to show the actual data here because Github had some problems with me reading in and processing this much data on the fly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">raw_points_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.glob</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/joeystan/Desktop/KohlerTapes/audio/*/FAVE/*_points.csv"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(path, read_csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>path) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(data)</span></code></pre></div>
</div>
<p>This combined spreadsheet has a whopping 2.5 million rows of vowel data. That’s… a lot. 😅</p>
<p>I’m going to go ahead and recode FAVE’s coding scheme into something I’m more familiar with. Just for this first pass.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">fave_code_allophones <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.df) {</span>
<span id="cb3-2">  .df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phoneme =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_collapse</span>(label, </span>
<span id="cb3-4">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FLEECE"</span>  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iyF"</span>),</span>
<span id="cb3-5">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KIT"</span>     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span>,</span>
<span id="cb3-6">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FACE"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ey"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eyF"</span>),</span>
<span id="cb3-7">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DRESS"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>,</span>
<span id="cb3-8">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TRAP"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ae"</span>,</span>
<span id="cb3-9">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LOT"</span>     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>,</span>
<span id="cb3-10">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"THOUGHT"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oh"</span>,</span>
<span id="cb3-11">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GOAT"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owF"</span>),</span>
<span id="cb3-12">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FOOT"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>,</span>
<span id="cb3-13">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GOOSE"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuw"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uw"</span>),</span>
<span id="cb3-14">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STRUT"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ʌ"</span>,</span>
<span id="cb3-15">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRICE"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ay"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ay0"</span>),</span>
<span id="cb3-16">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MOUTH"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aw"</span>,</span>
<span id="cb3-17">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHOICE"</span>  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oy"</span>,</span>
<span id="cb3-18">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NURSE"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*hr"</span>,</span>
<span id="cb3-19">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEAR"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iyr"</span>,</span>
<span id="cb3-20">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"START"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ahr"</span>,</span>
<span id="cb3-21">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FORCE"</span>   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owr"</span>,</span>
<span id="cb3-22">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CURE"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uwr"</span>), </span>
<span id="cb3-23">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.after =</span> label)</span>
<span id="cb3-24">}</span></code></pre></div>
</div>
<p>I’ll then incorporate that into my pipeline of processing to get the data into a format I can work with. For now, I’ll just look at stressed, non-r-colored allophones.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">points_processed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_points_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  </span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recode FAVE's allophones using the function above</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fave_code_allophones</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-5">  </span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset the data</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(stress <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-8">         <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>phoneme <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRICE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MOUTH"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHOICE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NURSE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEAR"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"START"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FORCE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CURE"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-9">  </span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use joeyr to further recode allophones</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code_allophones</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.old_col =</span> phoneme, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pre_seg =</span> pre_seg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fol_seg =</span> fol_seg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-12">  </span>
<span id="cb4-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select the columns I'll need for now.</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(file_name, </span>
<span id="cb4-15">         pre_word, word, fol_word,</span>
<span id="cb4-16">         id, time, dur, prop_time, stress, phoneme, allophone, allophone_environment, pre_seg, fol_seg, context,</span>
<span id="cb4-17">         F1, F2, F3, B1, B2, B3,</span>
<span id="cb4-18">         max_formant) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(file_name, time)</span></code></pre></div>
</div>
<p>That brings it down to 1.4 million vowels. Still a ton of data.</p>
<section id="query-the-data" class="level3">
<h3 class="anchored" data-anchor-id="query-the-data">Query the data</h3>
<p>Let me pause just to do some quick queries. First, how many files do I have?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">n_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(points_processed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>file_name))</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1131</span></span></code></pre></div>
</div>
<p>I think there were about 50 that had some problems. Crazy to think that that’s the amount of data I got for my dissertation and now I can just shrug it off!</p>
<p>How many stressed monophthongs per file per file?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(points_processed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_files</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1255.718</span></span></code></pre></div>
</div>
<p>How much audio? I could query Praat for this information, but I’ll just take a shortcut and get the end time of the last vowel per file. The number is in seconds, so I’ll get a minutes version as well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">durations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> points_processed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration_s =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dur), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> file_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration_m =</span> duration_s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</div>
<p>How much audio is here?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(durations<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration_m)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 571.2587</span></span></code></pre></div>
</div>
<p>About 60 hours short of my earlier estimate. But I know some tapes didn’t get processed, so that makes sense.</p>
<p>So what are some summary stats for the durations?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(durations)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># file_name           duration_s        duration_m     </span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Length:1131        Min.   :  13.15   Min.   : 0.2191  </span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class :character   1st Qu.:1323.67   1st Qu.:22.0612  </span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mode  :character   Median :1895.92   Median :31.5987  </span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                    Mean   :1818.33   Mean   :30.3055  </span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                    3rd Qu.:2545.16   3rd Qu.:42.4193  </span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                    Max.   :3724.96   Max.   :62.0827  </span></span></code></pre></div>
</div>
<p>The average is about 1,818 seconds or 31.59 minutes. Here’s a plot showing the distributions.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(durations, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(duration_m)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of approximate durations for each file"</span>,</span>
<span id="cb10-5">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration (in minutes)"</span>,</span>
<span id="cb10-6">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of (sides) of tapes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
</details>
</div>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update3/durations.png" class="img-fluid"></p>
<p>Keep in mind that each filename corresponds to a side of a tape. I am just a little bit too young to really be familiar with cassette tapes, but I guess tapes back then could hold either about 32 or maybe 48 minutes of audio, so it makes sense that most files are around that long.</p>
</section>
<section id="vowel-plots" class="level3">
<h3 class="anchored" data-anchor-id="vowel-plots">Vowel plots</h3>
<p>Now the moment of truth. Here’s a plot showing the raw F1-F2 measurements for the entire dataset. All 1.4 million points are plotted here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(points_processed, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(F2, F1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All 1.4 million stressed monophthongs from the Kohler Tapes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
</div>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update3/raw_plot.png" class="img-fluid"></p>
<p>I think right away, this is a testament to how amazing new-fave is. I’ve worked with legacy data before, and normally there are tons of datapoints in the extreme bottom left of the vowel space. These are the result of formant tracking errors. And that was using the original FAVE! This dataset appears to be <em>remarkably</em> clean, at least when it comes to that.</p>
</section>
<section id="normalizing" class="level3">
<h3 class="anchored" data-anchor-id="normalizing">Normalizing</h3>
<p>Before I look at too much more, I should normalize the data. Fruehwald has <a href="https://jofrhwld.github.io/dct_normalization/#transforming-dct-coefficients">an extremely useful paper</a> on how to use DCT to normalize new-fave output. I’ll read those DCT coefficients after they’ve been log-transformed, which is required when doing the Nearey normalization. I’ll process them in the same way that I did above, except I will keep all vowels.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">dct_coefs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.glob</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/joeystan/Desktop/KohlerTapes/audio/*/FAVE/*_logparam.csv"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(path, read_csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>path) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-5">  </span>
<span id="cb12-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recode FAVE's allophones using the function above</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fave_code_allophones</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-8">  </span>
<span id="cb12-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset the data</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(stress <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-11">  </span>
<span id="cb12-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use joeyr to further recode allophones</span></span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code_allophones</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.old_col =</span> phoneme, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pre_seg =</span> pre_seg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fol_seg =</span> fol_seg)</span></code></pre></div>
</div>
<p>This produces a dataframe with millions of rows. Intimidating, but I can work with it.</p>
<p>Doing normalization on the DCT coefficients involves jumping over to Python, which is new for me but worth it because of all the reasons Fruehwald explains in his paper. I’ll follow the code he has <a href="https://jofrhwld.github.io/blog/posts/2024/07/2024-07-19_dct-r/">here</a> because this is still new to me, but I’ll try to explain as best I can.</p>
<p>I needed to install the <code>scipy</code> package, so I did that first. I’ll then load it with <code>reticulate::import</code> and then save a particular function within that package into an R object called <code>idct</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reticulate::py_install("scipy") # in case you need to install it</span></span>
<span id="cb13-2">scipy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scipy"</span>)</span>
<span id="cb13-3">idct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> scipy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>idct</span></code></pre></div>
</div>
<p>I’ll get the average of the DCT parameters by token. I’ll then apply the python function, <code>idct</code> to those averages. With this dataset, I’m working with full trajectory data, not just single points, so the result will be a trajectory. For later analyses, I’ll get average smooths by speaker, but for now, I’ll just collapse all speakers together into averages per allophone.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">avg_smooths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dct_coefs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  </span>
<span id="cb14-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Getting the average of the DCT parameters by allophone.</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, mean),</span>
<span id="cb14-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(param, phoneme, allophone, allophone_environment)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-6">  </span>
<span id="cb14-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Apply `idct` to the averages</span></span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reframe</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(F1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>F3, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">idct</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orthogonalize =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">norm =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forward"</span>)),</span>
<span id="cb14-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(phoneme, allophone, allophone_environment)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_time =</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb14-11">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(phoneme, allophone, allophone_environment))</span></code></pre></div>
</div>
<p>Sweet. For what it’s worth, processing this data was <em>quite</em> fast. Definitely the way I’ll be normalizing from now on. Now I can show average trajectories in this dataset.</p>
</section>
<section id="more-vowel-plots" class="level3">
<h3 class="anchored" data-anchor-id="more-vowel-plots">More vowel plots</h3>
<p>I’ll start with elsewhere allophones. I’ll plot it with <code>ggtextpath</code>. <a href="../../blog/geomtextpath/">I wasn’t a fan</a> of this package when it first came out, but it’s growing on me.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">avg_smooths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(allophone_environment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elsewhere"</span>,</span>
<span id="cb15-3">         phoneme <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NURSE"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(F2, F1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> allophone)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_textpath</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> allophone), </span>
<span id="cb15-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_smoothing =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb15-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb15-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">joey_arrow</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average trajectories for preobstruent vowels in the Kohler Tapes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
</details>
</div>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update3/elsewheres.png" class="img-fluid"></p>
<p>Looks like a vowel plot! I won’t get into heavy interpretation without further digging into the variation and stuff, but it’s noteworthy how diphthongal and lowered that <sc>bait</sc> vowel is and how monopthongal that <sc>boot</sc> vowel is. It’s also interesting how separated <sc>bot</sc> and <sc>bought</sc> are, but again I’ll have to look at the data more closely to say anything. Keep in mind that this plot is just preobstruent data, so it’s not like that separation is due to prerhotics or prenasals or anything.</p>
<p>Let’s look at my favorite class of allophones: prelaterals. I’ll use the Wells-inspired labels I came up with <a href="../../blog/extending-wells-lexical-sets-to-prelateral-vowels/index.html">in an earlier blog post</a>.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">avg_smooths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(allophone_environment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prelateral"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(F2, F1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> allophone)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geom_path(arrow = joey_arrow()) + </span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_textpath</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> allophone), </span>
<span id="cb16-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_smoothing =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb16-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb16-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">joey_arrow</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average trajectories for prelateral monophthongs in the Kohler Tapes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
</details>
</div>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update3/prelaterals.png" class="img-fluid"></p>
<p>Lots to unpack here, which will undoubtedly happen in future publications. For now, it’s noteworthy that the front vowel pairs <sc>zeal-guilt</sc> and <sc>flail-shelf</sc> are not merged as they are for some Utahns today. The back vowels are interesting. Looks like there might be a <sc>mulch-golf</sc> (that is, /ʌl/-/ɑl/, or <em>dull-doll</em>) merger. And possibly a <sc>jolt-fault</sc> (that is, /ol/-/ɔl/ or <em>hole-hall</em>) merger. Interestingly, <sc>golf</sc> and <sc>fault</sc> are separated, <sc>spool</sc> is not fully backed, and <sc>child</sc> is pretty monophthongal.</p>
<p>Now let’s look at prerhotics.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">avg_smooths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(allophone_environment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prerhotic"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(F2, F1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> allophone)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geom_path(arrow = joey_arrow()) + </span></span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_textpath</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> allophone), </span>
<span id="cb17-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_smoothing =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb17-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb17-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">joey_arrow</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average trajectories for prerhotic monophthongs in the Kohler Tapes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
</details>
</div>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update3/prerhotics.png" class="img-fluid"></p>
<p>I anticipated some weirdness here. <sc>Cure</sc> is just weird for lots of reasons because, <a href="../../pages/idiolect/#my-cure-lexical-set">at least for me</a>, it could have lots of different realizations, and I’m assuming that’s true in this dataset too. <sc>Force</sc> and <sc>start</sc> are seemingly straightforward, but there’s actually a lot going on here because of the <em>cord-card</em> merger. I’ve already been analyzing that merger in this dataset, so stay tuned for updates on that.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Anyway, it could take a career to really dive into this data, and I’m happy to finally have something to work with after hearing about it 7½ years ago!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I insisted on him teaching me how to do it so I wouldn’t be so reliant on him, but he basically said, “with all due respect, it would take you a long time to learn how to do this, and I can do this while watching Netflix. It would just be easier if I did it.” Fair enough! Hooray for collaborations!↩︎</p></li>
<li id="fn2"><p>One issue was that it considered all the tapes a single speaker, even though the file names were different. I even tried changing the tier names in each file and that didn’t help. for whatever reason, this means that only a few words in each file were transcribed.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Kohler Tapes</category>
  <category>Research</category>
  <category>Utah</category>
  <guid>https://joeystanley.com/blog/kohler-tapes-update3/</guid>
  <pubDate>Tue, 10 Jun 2025 06:00:00 GMT</pubDate>
  <media:content url="https://joeystanley.com/blog/kohler-tapes-update3/elsewheres.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Simulating Candyland</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/simulating_candyland/</link>
  <description><![CDATA[ 





<p>About six years ago, I did a blog post about how I <a href="../../blog/simulating_chutes_and_ladders">simulated Chutes and Ladders</a> after playing it countless times with my child. Recently, I’ve been playing tons of Candyland with my next child. The games are kinda similar and they take zero skill, which means they’re perfect for little kiddos. It also means I can simulate them pretty easily.</p>
<p>I’m going to base the game off the board that I’ve been playing with, which we got at a thrift store. Here’s what that looks like:</p>
<p><img src="https://joeystanley.com/blog/simulating_candyland/board.jpg" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you’re not interested in how I did the simulation and just want to see the results, just jump to Section&nbsp;3.</p>
</div>
</div>
<section id="the-simulation" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="the-simulation"><span class="header-section-number">1</span> The simulation</h2>
<section id="setting-up-the-game" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="setting-up-the-game"><span class="header-section-number">1.1</span> Setting up the game</h3>
<p>The first step in simulating Candyland is to set up the board. There’s no real easy way to do that, so I just went through and hard-coded the tiles and colors. I’ve got a simple dataframe with a column for the tile number, the color of the tile, and if there’s anything special about it. In my original spreadsheet, if there was nothing special about the tile, I left it blank, but because of issues with <code>NA</code>s down the road, I’ve replaced those blank cells with <code>"none"</code>. Here’s what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candyland_data.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">special =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(special, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 132 × 3
    tile color  special              
   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                
 1     1 red    none                 
 2     2 purple none                 
 3     3 yellow none                 
 4     4 blue   peppermint pass start
 5     5 orange none                 
 6     6 green  none                 
 7     7 red    none                 
 8     8 purple none                 
 9     9 pink   cupcake              
10    10 yellow none                 
# ℹ 122 more rows</code></pre>
</div>
</div>
<p>Now that we’ve got the board, we need to get the cards. This one is actually straightforward enough that I can create it on the fly. First, I’ll create the seven candy cards. I’m not sure if these are the official names, but that’s what we call them in my house.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">candy_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cupcake"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ice cream cone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy star"</span>, </span>
<span id="cb3-2">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gingerbread man"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lollipop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popsicle"</span>, </span>
<span id="cb3-3">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chocolate truffle"</span>)</span></code></pre></div>
</div>
<p>There are six “single-color” cards four “double-color” cards for each color. So, I’ve first created a function that takes in a color name and creates those ten cards as a vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">create_one_color_card <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.color) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-4">}</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "double red" "double red" "double red" "double red" "single red"
 [6] "single red" "single red" "single red" "single red" "single red"</code></pre>
</div>
</div>
<p>So now, I can use that those to generate the full deck of 67 cards.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb6-2">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>),</span>
<span id="cb6-3">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>),</span>
<span id="cb6-4">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>),</span>
<span id="cb6-5">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb6-6">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>),</span>
<span id="cb6-7">           candy_cards)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "single red"        "popsicle"          "single purple"    
 [4] "single purple"     "single green"      "single yellow"    
 [7] "gingerbread man"   "double blue"       "single orange"    
[10] "single blue"       "single red"        "double orange"    
[13] "single yellow"     "double yellow"     "single green"     
[16] "single green"      "single red"        "single orange"    
[19] "single red"        "single green"      "double blue"      
[22] "single green"      "double orange"     "single purple"    
[25] "double yellow"     "single blue"       "single orange"    
[28] "double purple"     "double yellow"     "single green"     
[31] "double red"        "lollipop"          "single purple"    
[34] "single purple"     "single red"        "ice cream cone"   
[37] "double purple"     "single purple"     "double green"     
[40] "double yellow"     "double red"        "single blue"      
[43] "single yellow"     "double red"        "single blue"      
[46] "single blue"       "single orange"     "single red"       
[49] "double blue"       "double red"        "single yellow"    
[52] "double orange"     "cupcake"           "gummy star"       
[55] "single orange"     "single yellow"     "chocolate truffle"
[58] "double blue"       "single orange"     "double green"     
[61] "double green"      "double purple"     "double purple"    
[64] "double orange"     "double green"      "single blue"      
[67] "single yellow"    </code></pre>
</div>
</div>
<p>So, with the board and cards set up, let’s start simulating some games. Note that because there is virtually zero interaction between the players, I’m just going to simulate single-player games.</p>
</section>
</section>
<section id="explaining-the-simulation" class="level2 page-columns page-full" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="explaining-the-simulation"><span class="header-section-number">2</span> Explaining the simulation</h2>
<p>In this section, I’ll explain the mechanics of the simulation. If you’re not interested in that and just want to get to the results, feel free to skip to Section&nbsp;3. The mechanics are similar to my <a href="../../blog/simulating-chutes-and-ladders">Chutes and Ladders</a> simulation.</p>
<section id="preliminaries" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="preliminaries"><span class="header-section-number">2.1</span> Preliminaries</h3>
<p>First, I want to allocate space for a full game. First, I’ll create a tibble called <code>turns</code> that has as many rows as twice the number of cards in the deck. After doing some simulations, I’ve found that, very rarely, a single player can get through all the cards and will need to shuffle them. I haven’t yet run into a simulation where a second shuffle is needed, though I suppose it could theoretically go on forever I think.</p>
<p>I’ll then simulate shuffling the cards by randomly sorting the cards with <code>sample(cards, replace = FALSE)</code>. And I’ll string—not shuffle—two decks together in case we have a really long game. I’ll do that by just doing that <code>sample(...)</code> two times and strung together with <code>c()</code>.</p>
<p>As additional columns in this tibble, I’ll create empty columns for the start time number, the end tile number, whether that tile was a shortcut or not. Those will be populated as the game happens.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">n_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cards)</span>
<span id="cb8-2">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb8-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start    =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb8-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">card  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), </span>
<span id="cb8-5">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb8-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shortcut =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb8-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end      =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span></code></pre></div>
</div>
<p>Since I’ll need to do this a lot in the explanation of the simulation, I’ll save it as a function so it takes up less room.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">setup_turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb9-2">  n_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cards)</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb9-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start    =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb9-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">card  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), </span>
<span id="cb9-6">                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb9-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shortcut =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb9-8">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end      =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb9-9">}</span>
<span id="cb9-10">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span></code></pre></div>
</div>
</section>
<section id="setting-up-the-loop" class="level3 page-columns page-full" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="setting-up-the-loop"><span class="header-section-number">2.2</span> Setting up the loop</h3>
<p>Now that we’ve got the cards shuffled and ready to go for this game, let’s start the turns. Since I don’t know how many iterations I’ll need, I’ll set up a <code>while</code> loop that goes until I tell it to stop.<sup>1</sup> Here’s what the barebones loop looks like:</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;There might be a more elegant way using <code>for</code> loop. Maybe my R looping skills aren’t where they need to be, but I just couldn’t figure out how to get it to exit the loop the way I wanted to and return the dataframe. I’ve hacked a bit of a solution by incrementing <code>i</code> each iteration. I miss Perl’s <code>last</code> function which made it so that it would exit the loop at the end of the current iteration, not necessarily right at that moment like R’s <code>break</code> function does. The <code>keep_playing</code> variable simulates that.</p></div></div><div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop until the game is over</span></span>
<span id="cb10-3">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-4">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb10-6">  </span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put the game here</span></span>
<span id="cb10-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't run this code though; it'll go on forever</span></span>
<span id="cb10-9">  </span>
<span id="cb10-10">}</span></code></pre></div>
</div>
<p>Of course, this is going to run forever because we haven’t put in any for it to stop. So I’ll increment <code>i</code> each iteration and end the loop after <code>n_cards*2</code> iterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop until the game is over</span></span>
<span id="cb11-4">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-5">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb11-7">  </span>
<span id="cb11-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb11-9">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb11-11">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-12">  }</span>
<span id="cb11-13">  </span>
<span id="cb11-14">}</span></code></pre></div>
</div>
<p>Okay, so we’re now looping through code enough times to go through the game. Now let’s start to add some content to that game.</p>
</section>
<section id="start-at-tile-zero" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="start-at-tile-zero"><span class="header-section-number">2.3</span> Start at tile zero</h3>
<p>First, I need to get the start tile. On the first turn, the start tile is zero. Let’s add that. Here’s what that code looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb12-2">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-3">}</span></code></pre></div>
</div>
<p>Here, I’ve added a conditional that checks what iteration number we’re on. If we’re on the first one, then go ahead and declare the start tile for this iteration to be zero. Here’s that code in context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb13-2"></span>
<span id="cb13-3">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-4">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb13-6"></span>
<span id="cb13-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb13-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb13-9">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-10">  }</span>
<span id="cb13-11">  </span>
<span id="cb13-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End the game</span></span>
<span id="cb13-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb13-14">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb13-15">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb13-16">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-17">  }</span>
<span id="cb13-18">  </span>
<span id="cb13-19">}</span>
<span id="cb13-20">turns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 134 × 5
   turn_num start card          shortcut end  
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;lgl&gt;    &lt;lgl&gt;
 1        1     0 single red    NA       NA   
 2        2    NA double orange NA       NA   
 3        3    NA double red    NA       NA   
 4        4    NA lollipop      NA       NA   
 5        5    NA double purple NA       NA   
 6        6    NA single green  NA       NA   
 7        7    NA double green  NA       NA   
 8        8    NA double orange NA       NA   
 9        9    NA single yellow NA       NA   
10       10    NA single yellow NA       NA   
# ℹ 124 more rows</code></pre>
</div>
</div>
<p>Later on, we’ll add code saying that the start tile for all other turns is the end tile of the previous turn, but because we haven’t added any code yet for the end tiles, it won’t do us any good yet. So, to avoid issues with <code>NA</code>s, I’ll skip that for now.</p>
</section>
<section id="adding-candy-cards" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="adding-candy-cards"><span class="header-section-number">2.4</span> Adding candy cards</h3>
<p>What we do need to do though is “draw a card” and figure out how many tiles we need to advance. Keep in mind that the cards are already there for us, so we don’t need to randomly sample from the deck or anything. We just need to take the info that’s already there and use it to figure out where to end up.</p>
<p>First, let’s account for the candy cards. These are easy: regardless of what your start tile is, your end tile will always be the same. The code that I’ll add looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb15-2">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb15-3">}</span></code></pre></div>
</div>
<p>So here, I’m checking to see if the name of the card that has been assigned for this turn matches the one of the candy cards I have saved in the <code>candy_cards</code> vector I declared earlier. If there’s a match, then I’ll basically look up the tile of that candy card in my <code>board</code> dataframe—that’s the one I manually created in a separate file. It searches for the name of the candy, and fetches the tile number for it. That number is then assigned to this turn’s end tile. Here’s that code in context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb16-2">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-3">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb16-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb16-5">  </span>
<span id="cb16-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb16-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb16-8">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-9">  }</span>
<span id="cb16-10">  </span>
<span id="cb16-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb16-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb16-13">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb16-14">  }</span>
<span id="cb16-15"></span>
<span id="cb16-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End the game</span></span>
<span id="cb16-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb16-18">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb16-19">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb16-20">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-21">  }</span>
<span id="cb16-22">  </span>
<span id="cb16-23">}</span>
<span id="cb16-24">turns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 134 × 5
   turn_num start card           shortcut   end
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;lgl&gt;    &lt;dbl&gt;
 1        1     0 double yellow  NA          NA
 2        2    NA double red     NA          NA
 3        3    NA ice cream cone NA          20
 4        4    NA single yellow  NA          NA
 5        5    NA double yellow  NA          NA
 6        6    NA double purple  NA          NA
 7        7    NA single green   NA          NA
 8        8    NA single red     NA          NA
 9        9    NA single orange  NA          NA
10       10    NA double yellow  NA          NA
# ℹ 124 more rows</code></pre>
</div>
</div>
<p>So far, the game does nothing unless you run into a candy card. If you do, it’ll note where the end position should be.</p>
<p>At this point, I might as well add some code in that makes it so that the start tile of the next turn is the previous tile of the last turn.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb18-2">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-3">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb18-5">  </span>
<span id="cb18-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb18-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb18-8">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb18-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb18-11">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb18-12">  }</span>
<span id="cb18-13">  </span>
<span id="cb18-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb18-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb18-16">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb18-17">  }</span>
<span id="cb18-18"></span>
<span id="cb18-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb18-20">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb18-21">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb18-22">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-23">  }</span>
<span id="cb18-24">  </span>
<span id="cb18-25">}</span>
<span id="cb18-26">turns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 134 × 5
   turn_num start card              shortcut   end
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;lgl&gt;    &lt;dbl&gt;
 1        1     0 double green      NA          NA
 2        2    NA double red        NA          NA
 3        3    NA double orange     NA          NA
 4        4    NA chocolate truffle NA         117
 5        5   117 double green      NA          NA
 6        6    NA double green      NA          NA
 7        7    NA single green      NA          NA
 8        8    NA gingerbread man   NA          69
 9        9    69 single green      NA          NA
10       10    NA single yellow     NA          NA
# ℹ 124 more rows</code></pre>
</div>
</div>
<p>So in the above game, we see that we got candy tiles in two of the first couple turns. The end position is saved and the start position of the next turn is the same.</p>
</section>
<section id="adding-other-cards" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="adding-other-cards"><span class="header-section-number">2.5</span> Adding other cards</h3>
<p>Adding the colored cards is slightly less straightforward than the candy cards, but still isn’t too bad. There are two kinds of cards for each color: single cards, which means you advance to the next tile of that color, and double cards, which means you advance to to the second next tile of that color. Keep in mind that the cards have already been shuffled and assigned turns, so all I need to do is take the card and figure out how far I need to get.</p>
<p>So, right now, the cards take the form of a character vector with values like <code>"single red"</code> or <code>"double blue"</code>. To extract the color, I’ll use <code>str_extract</code> and pull out the last word. And to get whether it’s a single or double, I’ll do the same thing and pull out the first word.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb20-2">card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span></code></pre></div>
</div>
<p>Now, I need to figure out where to go then. I’m less concerned about figuring out the exact number of tiles I need to advance. I think it’ll be easier to select all upcoming tiles of that color and find the tile number of the first or second one. So, first, I’ll create <code>eligible_spots</code>, which takes the board, filters it so that only tiles greater than the tile I’m on and whose color matches the card I drew, and pull out just the tile numbers. So if my starting position were 0 and I drew a single red, here are the eligible spots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">start_position <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-2">card_color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span></span>
<span id="cb21-3">eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> start_position,</span>
<span id="cb21-5">         color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb21-7">eligible_spots</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   7  14  21  27  33  39  46  52  58  64  71  77  83  89  96 103 109 115
[20] 121 127</code></pre>
</div>
</div>
<p>Now I need to just take the first one if it’s a single card and then take the second one if it’s a double.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb23-2">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb23-3">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb23-4">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb23-5">}</span>
<span id="cb23-6">turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]]</span></code></pre></div>
</div>
<p>Great! Now if we just incorporate that bit of code into the main loop, we <em>should</em> be well on our way to a functioning game.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb24-2">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-3">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb24-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb24-5">  </span>
<span id="cb24-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb24-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb24-8">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb24-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb24-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb24-11">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb24-12">  }</span>
<span id="cb24-13">  </span>
<span id="cb24-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb24-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb24-16">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb24-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's not, find the next colors.</span></span>
<span id="cb24-18">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb24-19">    card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb24-20">    card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb24-21">    </span>
<span id="cb24-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb24-23">    eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb24-25">             color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb24-27">    </span>
<span id="cb24-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb24-29">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb24-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb24-31">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb24-32">    }</span>
<span id="cb24-33">    </span>
<span id="cb24-34">  }</span>
<span id="cb24-35">  </span>
<span id="cb24-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End the game</span></span>
<span id="cb24-37">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb24-38">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb24-39">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb24-40">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-41">  }</span>
<span id="cb24-42">}</span></code></pre></div>
</div>
<p>Except, if you’re like me, then the loop breaks. After digging around, I found out that the game works perfectly until the end. So let’s add some better code to account for the end.</p>
</section>
<section id="ending-the-game" class="level3" data-number="2.6">
<h3 data-number="2.6" class="anchored" data-anchor-id="ending-the-game"><span class="header-section-number">2.6</span> Ending the game</h3>
<p>Candyland ends when someone reaches the end of the board. The problem with how our loop works now is that if you’re close to the end and there are no more eligible tiles left, it crashes because it doesn’t know where to go. So, what we need to do is add a conditional that says if there are no more eligible tiles, to move it to “tile 133”, which is just one space after the last tile. We also need to account for the possibility of getting a double when there’s just one eligible tile left, which causes the person to win. So let’s program that in. That updated block of code looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb25-2">n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb25-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb25-6">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb25-8">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb25-9">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb25-11">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb25-12">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb25-13">}</span></code></pre></div>
</div>
<p>Once we hit the end of the board, we should end the game. As is, the loop will continue drawing cards until we’ve gone through the deck twice. This may seem like innocent extra iterations of the loop, but the problem is that when we draw another candy card we get pulled back into the game.</p>
<p>So, let’s add some code at the end that says to end the game we’re on tile 133. That means we’ll extend that <code>if-else</code> statement at the bottom of the loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb26-3">  keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb26-5">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb26-6">  keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep going</span></span>
<span id="cb26-8">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb26-9">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb26-10">}</span></code></pre></div>
</div>
<p>Now, the game ends when we run out of cards (programmed as going through the deck twice) or we hit the end of the board. We tell the program that the game is over by setting <code>keep_going</code> to <code>FALSE</code>. That’ll stop the <code>while</code> loop from doing any more iterations. Here’s the game so far:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb27-2">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-3">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb27-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb27-5">  </span>
<span id="cb27-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb27-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb27-8">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb27-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb27-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb27-11">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb27-12">  }</span>
<span id="cb27-13">  </span>
<span id="cb27-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb27-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb27-16">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb27-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's not, find the next colors.</span></span>
<span id="cb27-18">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb27-19">    card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb27-20">    card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb27-21">    </span>
<span id="cb27-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb27-23">    eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb27-25">             color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb27-27">    </span>
<span id="cb27-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb27-29">    n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb27-30">    </span>
<span id="cb27-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb27-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb27-33">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb27-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb27-35">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb27-36">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb27-38">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb27-39">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb27-40">    }</span>
<span id="cb27-41">    </span>
<span id="cb27-42">  }</span>
<span id="cb27-43">  </span>
<span id="cb27-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb27-45">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb27-46">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb27-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb27-48">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb27-49">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb27-50">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb27-51">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-52">  }</span>
<span id="cb27-53">  </span>
<span id="cb27-54">}</span>
<span id="cb27-55">turns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 134 × 5
   turn_num start card          shortcut   end
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;lgl&gt;    &lt;dbl&gt;
 1        1     0 single orange NA           5
 2        2     5 double yellow NA          16
 3        3    16 single green  NA          19
 4        4    19 double green  NA          32
 5        5    32 double yellow NA          41
 6        6    41 single green  NA          45
 7        7    45 single blue   NA          49
 8        8    49 double green  NA          57
 9        9    57 single blue   NA          61
10       10    61 single green  NA          63
# ℹ 124 more rows</code></pre>
</div>
</div>
<p>Because we’ve allocated room in our <code>turns</code> dataframe for many more turns, what you’ll see if you scroll down to the bottom is a bunch of <code>NA</code>s in the <code>start</code> and <code>end</code> tiles. We’ll filter those out later. But first, we have to add one more component to the game: the shortcuts!</p>
</section>
<section id="adding-shortcuts" class="level3" data-number="2.7">
<h3 data-number="2.7" class="anchored" data-anchor-id="adding-shortcuts"><span class="header-section-number">2.7</span> Adding shortcuts</h3>
<p>The shortcuts are pretty easy to program. In fact, they’re the same as what I did for Chutes and Ladders. We add a conditional that says if the end tile is a certain number, change it to another number. Since there are only two, I’ll just hard-code it in. Here’s what that bit of code looks like.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the shortcuts.</span></span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb29-3">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb29-4">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span></span>
<span id="cb29-5">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>) {</span>
<span id="cb29-6">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span></span>
<span id="cb29-7">  turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy pass"</span></span>
<span id="cb29-8">}</span></code></pre></div>
</div>
<p>In order to keep track of which shortcuts were encountered, I added a small bit of code that saves the name of the shortcut to the <code>shortcut</code> column. That’ll come in handy later when we do lots of games and query the simulations.</p>
<p>Now our code is complete:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb30-2">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-3">keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb30-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb30-5">  </span>
<span id="cb30-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the start tile</span></span>
<span id="cb30-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb30-8">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb30-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb30-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb30-11">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb30-12">  }</span>
<span id="cb30-13">  </span>
<span id="cb30-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb30-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb30-16">    turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb30-17">    </span>
<span id="cb30-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's not, find the next colors.</span></span>
<span id="cb30-19">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb30-20">    card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb30-21">    card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb30-22">    </span>
<span id="cb30-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb30-24">    eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb30-26">             color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb30-28">    </span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb30-30">    n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb30-31">    </span>
<span id="cb30-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb30-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb30-34">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb30-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb30-36">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb30-37">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb30-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb30-39">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb30-40">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb30-41">    }</span>
<span id="cb30-42">    </span>
<span id="cb30-43">  }</span>
<span id="cb30-44">  </span>
<span id="cb30-45">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb30-46">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb30-47">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb30-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb30-49">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb30-50">    keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb30-51">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb30-52">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-53">  }</span>
<span id="cb30-54">  </span>
<span id="cb30-55">}</span>
<span id="cb30-56">turns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 134 × 5
   turn_num start card          shortcut   end
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;lgl&gt;    &lt;dbl&gt;
 1        1     0 double orange NA          12
 2        2    12 double yellow NA          23
 3        3    23 single yellow NA          29
 4        4    29 single green  NA          32
 5        5    32 gummy star    NA          42
 6        6    42 single yellow NA          48
 7        7    48 single red    NA          52
 8        8    52 single yellow NA          54
 9        9    54 single purple NA          59
10       10    59 double green  NA          70
# ℹ 124 more rows</code></pre>
</div>
</div>
<p>So, we now have a loop that does a full simulation of Candyland!</p>
<p>But, if you’re like me, just one simulation isn’t enough. I want to run <em>lots</em> of simulations! And since we’ve got this nice and tidy, might as well do just a little bit more and wrap it up into a function! Let’s do that now.</p>
</section>
<section id="wrap-it-up-into-a-function" class="level3" data-number="2.8">
<h3 data-number="2.8" class="anchored" data-anchor-id="wrap-it-up-into-a-function"><span class="header-section-number">2.8</span> Wrap it up into a function</h3>
<p>Turning this into a function is actually pretty straightforward from here. All we need to do is put this entire chunk of code into a function and then make sure we’re exporting the final dataset. Here’s where I’ll filter out the <code>NA</code> turns at the end of the game. I’ve also added the argument <code>game_num = 0</code> to the function call, mostly to help with the <code>map</code> function later on, since I can’t figure out how to <code>map</code> through a list without sending an argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">simulate_game <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb32-2">  </span>
<span id="cb32-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put everything we've done so far here</span></span>
<span id="cb32-4">  </span>
<span id="cb32-5">  turns <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(turn_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb32-8">}</span>
<span id="cb32-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_game</span>()</span></code></pre></div>
</div>
<p>So, to see that in context, here is the entire function from start to finish.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">simulate_game <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb33-2">  </span>
<span id="cb33-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declare space for the full game.</span></span>
<span id="cb33-4">  turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup_turns</span>()</span>
<span id="cb33-5">  </span>
<span id="cb33-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop until the game is over</span></span>
<span id="cb33-7">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb33-8">  keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb33-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb33-10"></span>
<span id="cb33-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Start at zero</span></span>
<span id="cb33-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb33-13">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb33-14"></span>
<span id="cb33-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb33-16">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb33-17">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb33-18">    }</span>
<span id="cb33-19"></span>
<span id="cb33-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: This is where the game actually happens.</span></span>
<span id="cb33-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb33-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb33-23">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb33-24">      </span>
<span id="cb33-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's not, find the next colors.</span></span>
<span id="cb33-26">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb33-27">      card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb33-28">      card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb33-29"></span>
<span id="cb33-30">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb33-31">      eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb33-33">               color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-34">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb33-35">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb33-36">      n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb33-37">      </span>
<span id="cb33-38">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb33-39">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb33-40">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb33-41">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb33-42">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb33-43">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb33-44">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb33-45">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb33-46">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb33-47">      }</span>
<span id="cb33-48">    }</span>
<span id="cb33-49">    </span>
<span id="cb33-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the shortcuts.</span></span>
<span id="cb33-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb33-52">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb33-53">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span></span>
<span id="cb33-54">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>) {</span>
<span id="cb33-55">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span></span>
<span id="cb33-56">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy pass"</span></span>
<span id="cb33-57">    }</span>
<span id="cb33-58">  </span>
<span id="cb33-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Check if it's game over.</span></span>
<span id="cb33-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb33-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb33-62">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb33-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb33-64">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb33-65">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb33-66">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb33-67">      i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb33-68">    }</span>
<span id="cb33-69">  }</span>
<span id="cb33-70"></span>
<span id="cb33-71">  turns <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-72">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(turn_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-73">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb33-74">}</span>
<span id="cb33-75"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_game</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 42 × 5
   turn_num start card          shortcut   end
      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;lgl&gt;    &lt;dbl&gt;
 1        1     0 double red    NA           7
 2        2     7 double purple NA          15
 3        3    15 double green  NA          26
 4        4    26 single purple NA          28
 5        5    28 double yellow NA          35
 6        6    35 double blue   NA          43
 7        7    43 double yellow NA          54
 8        8    54 single red    NA          58
 9        9    58 single red    NA          64
10       10    64 single blue   NA          67
# ℹ 32 more rows</code></pre>
</div>
</div>
</section>
<section id="simulate-lots-of-games" class="level3" data-number="2.9">
<h3 data-number="2.9" class="anchored" data-anchor-id="simulate-lots-of-games"><span class="header-section-number">2.9</span> Simulate lots of games!</h3>
<p>We can now call <code>simulate_game()</code> as many times as we want, and it’ll do a new simulation each time. Let’s set up a dataframe so that we can save the output of each game. Here, I’ll create a dataframe that has one column called <code>game_num</code> that is just the numbers 1 to 10,000. I’ll then use <code>purrr::map</code> to run the simulation once for each row. This takes about 1.8 minutes on my computer, so be patient if it’s a little slow for you. (Or just decrease the number of games.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">games <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(game_num, simulate_game)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(game))</span></code></pre></div>
</div>
<p>For what it’s worth, when I have code blocks that I know will take a long time to run, I wrap them up in some code to track the time, so I can remember that next time I run. I also add <code>beepr::beep()</code> to the bottom so that my computer makes a satisfying sound once the block is completed. I’ll also set the seed to today’s date to make all this replicable. You can do this if you want, but you obviously don’t need to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Takes 1.7ish minutes for 10K simulations.</span></span>
<span id="cb36-2">start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250312</span>)</span>
<span id="cb36-4">games <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(game_num, simulate_game)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(game))</span>
<span id="cb36-7">beepr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beep</span>()</span>
<span id="cb36-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 1.639684 mins</code></pre>
</div>
</div>
<p>Hooray! We now have a function that simulates an entire game of Candyland, and with just a few additional lines of code and a little bit of patience, we were able to run that simulation thousands of times. Let’s take a look at the output, just to see what we’re working with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">games</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 224,150 × 6
   game_num turn_num start card          shortcut   end
      &lt;int&gt;    &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;dbl&gt;
 1        1        1     0 single purple &lt;NA&gt;         2
 2        1        2     2 double orange &lt;NA&gt;        12
 3        1        3    12 single blue   &lt;NA&gt;        17
 4        1        4    17 single yellow &lt;NA&gt;        23
 5        1        5    23 single green  &lt;NA&gt;        26
 6        1        6    26 double red    &lt;NA&gt;        33
 7        1        7    33 single red    &lt;NA&gt;        39
 8        1        8    39 single yellow &lt;NA&gt;        41
 9        1        9    41 double green  &lt;NA&gt;        51
10        1       10    51 double orange &lt;NA&gt;        62
# ℹ 224,140 more rows</code></pre>
</div>
</div>
<p>We’ve got the same five columns that we’ve been used to working with, with the addition of one more, showing the game number. In total, there were 218,035 turns taken across these 10,000 games. So, you might be able to see where this is going: we can now query this giant spreadsheet to see patterns across the games.</p>
</section>
</section>
<section id="sec-results" class="level2 page-columns page-full" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sec-results"><span class="header-section-number">3</span> Results</h2>
<p>So, now that we have the simulation done, let’s take a look at the results! First, I’ll take the giant <code>games</code> object and summarize it. I don’t necessarily need to keep information about every single turn, but I can start to count some things that we can think about analyzing later. For now, Ill count the number of turns, candies, singles, doubles, and shortcuts, and I’ll do so by game.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">games_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> games <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(turn_num),</span>
<span id="cb40-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_candies =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(card <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards),</span>
<span id="cb40-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_singles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>)),</span>
<span id="cb40-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_doubles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>)),</span>
<span id="cb40-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_shortcuts =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(shortcut)),</span>
<span id="cb40-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> game_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 6
   game_num turns n_candies n_singles n_doubles n_shortcuts
      &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;     &lt;int&gt;       &lt;int&gt;
 1        1    20         0        10        10           0
 2        2    16         4         8         4           0
 3        3    25         2        16         7           1
 4        4     7         1         5         1           0
 5        5    23         0        16         7           1
 6        6    29         4        18         7           0
 7        7    13         1         8         4           0
 8        8    18         1        11         6           0
 9        9    27         2        15        10           0
10       10    17         3         9         5           0
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>We now have a spreadsheet that has one row per game, and how many times those things happened. We’ll do some additional queries of the <code>games</code> dataset later, but for now let’s work with that.</p>
<section id="sec-num_turns" class="level3 page-columns page-full" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="sec-num_turns"><span class="header-section-number">3.1</span> Number of turns</h3>
<p>First, let’s look at the number of turns. This plot shows how many turns it took to complete each game.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(games_summary, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(turns)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of turns required to finish a solo game of Candyland"</span>,</span>
<span id="cb42-6">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>This is an interesting distribution. I’ll bet a statistician could identify what kind of <a href="https://en.wikipedia.org/wiki/Probability_distribution">probability distribution</a> it looks like but it’s not one that I recognize. Broadly, we see that the typical number of turns is about 12–22. There’s an interesting double peak at the top there, one at around 13–14 turns and another centered around 20. I’m not sure what’s going on there, but it seems to show up every time I run these simulations, so there must be something real that is causing that distribution. (Edit: I found out what’s happening! See Section&nbsp;4.2!)</p>
<p>The number of a games that had more than about 22 turns goes down the more turns there were. It follows a nice (reverse?) exponential function. Keep in mind that there are 67 cards in the deck, which appears to be about the limit. There were a small number of games (just 28 out of 10,000) that took more than 67 turns. So, if you’re playing a solo game and have to reshuffle the deck, that’s a pretty rare thing!</p>
<p>The most number of turns I saw in this simulation was a whopping 114. It was an unfortunate sequence of going for a long time without getting any candy cards (or getting ones that were close to where they already were), nearly making it to the end, and then getting yanked back to close to the beginning. It happened over and over. There was one exciting set of turns (about 60 turns in) where they got four candies in just 10 turns. They were right near the end, got the beloved Chocolate Truffle and moved ahead six tiles, then immediately got pulled back to the Lollipop, made it a few turns and then when the deck reshuffled they got pulled back by the Gummy Star, and three turns later pulled back again to the Cupcake.</p>
<p>The fewest number of turns was three, which happened 38 times in my 10,000 games. My five-year-old had this happen to him just the other day—I didn’t realize there was a 0.38% chance of that happening!<sup>2</sup> In all cases, these three-turn games got the Chocolate Truffle on their first turn, and at least one double-color card after that.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;Again, a statistician could probably figure out the precise probability, but I figure these numbers based on the simulation are close.</p></div></div></section>
<section id="single-color-cards" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="single-color-cards"><span class="header-section-number">3.2</span> Single-color cards</h3>
<p>Let’s take a look at the single-color cards. What is the distribution of those cards across these simulations?</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">games_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(n_singles) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_singles, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb43-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>),</span>
<span id="cb43-9">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of single-color cards drawn in a game of Candyland"</span>,</span>
<span id="cb43-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb43-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of single-color cards drawn"</span>,</span>
<span id="cb43-13">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>Because they’re the most common kind of card, it should come as no surprise that the distribution of the number of single-color cards you draw parallels the total number of cards drawn in the came. We a hint of that mysterious double peak like we saw in the previous plot, but the first peak is more prominent instead of the second. Overall though, the general shape is the same as the number of turns in the game, only this time it peaks at around 9 rather than 20.</p>
<p>47 games saw zero single-color cards. Most of these involved drawing the Chocolate Truffle or Popsicle on the first turn and then getting two or three double-color cards until the end. A few got some double-candy cards, and then draw one of those candies and then continued to get doubles. Three games got some other candy card (or two) and otherwise “legitimately” made it across the board with just the double-color cards.</p>
</section>
<section id="double-color-cards" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="double-color-cards"><span class="header-section-number">3.3</span> Double-color cards</h3>
<p>Now, let’s focus on the double-candy cards.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">games_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(n_doubles) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_doubles, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb44-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb44-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>),</span>
<span id="cb44-9">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb44-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of double-color cards drawn in a game of Candyland"</span>,</span>
<span id="cb44-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb44-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of double-color cards drawn"</span>,</span>
<span id="cb44-13">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb44-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>This distribution is starting to look familiar now. The most likely outcome is that you’ll see roughly 5–10 double-color cards per game. A few games saw far more, more than 20 or even 25, but the odds of that are quite low. Like the single-color cards, there were a few games that saw no double-color cards. Most of those got a candy pretty early on and then finished the game without seeing any singles.</p>
</section>
<section id="shortcuts" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="shortcuts"><span class="header-section-number">3.4</span> Shortcuts</h3>
<p>There are two shortcuts in the game: the peppermint pass, which is available right at the start of the game and takes you ahead about a third of the way, and the gummy pass, which is a short pass again towards the beginning of the game. How many shortcuts are typically seen in a game?</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">games_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(n_shortcuts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_shortcuts, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb45-7">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of shortcuts in a solo game of Candyland"</span>,</span>
<span id="cb45-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb45-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shortcuts"</span>,</span>
<span id="cb45-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percentage of games"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>
<p>This figure shows that most of the time, about 73.4%, you’re not going to see a shortcut. About 25.2% of games saw one shortcut.</p>
<p>Interestingly, you can’t take both shortcuts without a candy card taking you back close to the beginning because the Peppermint Pass starts before and ends after the Gummy Pass. So, you need to get the Cupcake or Ice Cream Cone to bring you back. And even then, you’d only be able to take the Gummy Pass because once you’ve passed the beginning of the Peppermint Pass, there’s no chance of it again. Nevertheless, 1.35% of games took two shortcuts. In about 60.4% of those cases, the first shortcut was the Gummy Pass.</p>
<p>In two cases (just 0.02% of the time!), there were three shortcuts taken in a single game! In one case, they took the Gummy Pass three times. They got it their first time passing through, again after getting the Cupcake, and again after getting the Ice Cream Cone. In the other case, they took the Peppermint Pass the first time, and then again hit the Gummy Pass after getting the Cupcake and again after getting the Ice Cream Cone.</p>
<p>Three is the maximum unless you go through the deck a second time. But given how rare that happens, the odds of getting three shortcuts, going through the entire deck, and then getting either the Cupcake or Ice Cream Cone and getting the Gummy Pass yet again, is so slim. But not impossible!</p>
<p>Finally, what are the relative odds of the two shortcuts in relation to each other? Surprisingly, the Peppermint Pass is not as rare as I thought. Of all the shortcuts taken, it made up 41% of them. So, the Gummy Pass is about 1.4 times as likely. (I thought that number would be a lot higher!)</p>
</section>
<section id="candy-cards" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="candy-cards"><span class="header-section-number">3.5</span> Candy Cards</h3>
<p>Now let’s look at the number of candy cards that a person might encounter in a typical game of Candyland. Right now, we’re not so much concerned about which card but rather just the total number they see. This plot shows the distribution across the simulated games. I’ve added percentages at the top because we had some <em>very</em> small bars towards the right of the plot.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">games_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(n_candies) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_candies, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">percent</span>(prop)),</span>
<span id="cb46-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb46-9">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minor_breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb46-10">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>),</span>
<span id="cb46-12">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of candy cards drawn in a game of Candyland"</span>,</span>
<span id="cb46-14">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb46-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of candies"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-42-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>So, it looks like in about 91–92% of games, you’ll draw at least one candy card. The most typical outcome was just one card, but drawing up to four was not too uncommon. The most I saw in my simulations was drawing 13 cards, but that happened exactly one time. Keep in mind that there are only seven candy cards in the deck, so drawing that many would involve getting through the entire deck without finishing, and then drawing six of the seven cards <em>again</em> before finishing. In fact just 0.1% of games draw eight or more, meaning they went through the entire deck.</p>
<p>But that’s if we’re considering all the candy cards collectively. Let’s take a look at the candy cards individually to see if they have their own patterns.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This next bit of discussion gets into probability distributions and statistics a little bit.</p>
</div>
</div>
<p>This plot shows the percentage of times each candy card was drawn.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">candycard_distributions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> games <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(card <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(card) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n),</span>
<span id="cb47-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">card =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(candy_cards, </span>
<span id="cb47-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cupcake"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ice cream cone"</span>,</span>
<span id="cb47-7">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy star"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gingerbread man"</span>,</span>
<span id="cb47-8">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lollipop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popsicle"</span>,</span>
<span id="cb47-9">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chocolate truffle"</span>)))</span>
<span id="cb47-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(candycard_distributions, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(card, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb47-13">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1675</span>),</span>
<span id="cb47-14">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray40"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of candy cards across 10,000 simulated games"</span>,</span>
<span id="cb47-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candy card"</span>,</span>
<span id="cb47-18">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"perentage"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-43-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>You would expect the candies to be pretty evenly distributed, and they are pretty close. However, there is more variation between the cards than I expected. I’ve overlayed a gray dashed line at 14.28% (one-seventh), showing what the expected height of each bar would be if they were all drawn evenly. Some of these are a bit higher and lower than I expected. The Cupcake, for example, was drawn 16.34% of the time—just about a full 1% more than expected—and the ice cream code and Lollipop were drawn 13.01% of the time, more than 1% lower than expected.</p>
<p>You might be thinking, “Who cares? 1% is basically nothing. It’s just random chance.” I’m not so sure. Here’s what the distribution would be if it were truly random, plotted on the same scale as the above plot. I’ve randomly chosen a number between one and seven 10,000 times and plot them:</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250313</span>)</span>
<span id="cb48-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n),</span>
<span id="cb48-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diff =</span> prop <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(prop) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(num), prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb48-10">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1675</span>),</span>
<span id="cb48-11">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span>),</span>
<span id="cb48-12">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray40"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Pick a number between one and seven</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10,000 times"</span>,</span>
<span id="cb48-15"></span>
<span id="cb48-16">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span>, </span>
<span id="cb48-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percentage"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-44-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>These numbers are all much closer to the predicted value of 14.28%. None are further than 0.6% away. You might be thinking, “Okay, so you got lucky one time. The deviance observed in the candy cards is well within the range of possible values.” But still, I don’t think it is! I did the above experiment—pick a number between one and seven 10,000 times and then get the proportions of each number—itself 10,000 times. So I have 100 million data points. Below, I’ve plotted the distribution of those proportions from the 10,0000 experiments (where each experiment had 10,000 random draws).</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250313</span>)</span>
<span id="cb49-2">tenthousand_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iteration =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(iteration, num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> iteration)</span>
<span id="cb49-8">  </span>
<span id="cb49-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(tenthousand_draws, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What happens if you pick a number between one and seven 10,000 times, tally up how many</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">of each number you get, and repeat that 10,000 times? This plot shows the distribution of</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">those 10,000 tallies."</span>,</span>
<span id="cb49-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"They basically all look like the same bell curve."</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb49-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">tenthousand_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(prop),</span>
<span id="cb50-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(prop),</span>
<span id="cb50-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mean),</span>
<span id="cb50-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_sd   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sd)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_diff =</span> mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mean),</span>
<span id="cb50-8">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd_diff   =</span> sd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sd)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(mean_diff)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 7
    num  mean      sd mean_mean mean_sd   mean_diff    sd_diff
  &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;
1     4 0.143 0.00345     0.143 0.00349 -0.0000305  -0.0000343
2     7 0.143 0.00346     0.143 0.00349 -0.0000281  -0.0000244
3     6 0.143 0.00353     0.143 0.00349 -0.00000965  0.0000461
4     3 0.143 0.00345     0.143 0.00349 -0.00000472 -0.0000344
5     5 0.143 0.00350     0.143 0.00349  0.00000650  0.0000146
6     2 0.143 0.00354     0.143 0.00349  0.0000250   0.0000485
7     1 0.143 0.00347     0.143 0.00349  0.0000415  -0.0000160</code></pre>
</div>
</div>
<p>Unsurprisingly, those seven distributions are basically identical. Their means are 0.14285 ± 0.000041 and their standard deviations are 0.003489 ± .0000343. I’ll therefore collapse the seven numbers together and treat them as a single distribution. That’s visualized below with the means of each of the candy cards.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">tenthousand_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_rounded =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(prop, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(prop_rounded) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(prop_rounded, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> candycard_distributions,</span>
<span id="cb52-9">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> prop), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7575"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-10">  ggrepel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text_repel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> candycard_distributions,</span>
<span id="cb52-11">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> prop, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> card),</span>
<span id="cb52-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250318</span>,</span>
<span id="cb52-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of seven candy cards compared to their expected distributions"</span>,</span>
<span id="cb52-16">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb52-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expected proportion of draws"</span>,</span>
<span id="cb52-18">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"probability of expected draws"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-47-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>One candy card (the Gummy Star) is well within the expected range. The Popsicle is on the edge of the distribution, but still a plausible value. But the Cupcake was so far away from the expected value. The <em>z</em>-score was 5.688 and the <em>p</em>-value is about 0.0000001. So the odds of getting these cards as infrequently as we did, assuming they’re evenly probable, is quite small. I have no explanation for why that is, but I think it’s an intriguing finding here. It’s also intriguing that the Ice Cream Cone and the Lollipop are consistently drawn at around the same rate, and far lower than expected.</p>
<p>Finally, when I did this whole thing again based on a different random seed, I got strikingly similar results. There’s something here and I’m not sure what it is!</p>
</section>
<section id="sec-gains_and_losses" class="level3 page-columns page-full" data-number="3.6">
<h3 data-number="3.6" class="anchored" data-anchor-id="sec-gains_and_losses"><span class="header-section-number">3.6</span> Gains and Losses</h3>
<p>One of the biggest questions I have as to do with the candy cards still. It’s often the case that when you get a candy card, it’s an exciting thing because you jump ahead a lot. But, it also seems like a lot of the time it’s a bad thing because you fall back quite a bit.<sup>3</sup> So, is it overall better to get a candy card, or is it on average worse for your game?</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Fortunately, my five-year-old doesn’t care either way and is just excited to get a candy card!</p></div></div><div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">diffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> games <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(card <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diff =</span> end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start)</span>
<span id="cb53-4"></span>
<span id="cb53-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diffs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(diff)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb53-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minor_breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb53-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How far ahead or behind does a candy card take you?"</span>,</span>
<span id="cb53-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games of Candyland"</span>,</span>
<span id="cb53-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tiles advanced"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>Okay, so there’s a lot to unpack here. First off, we see that it’s centered right around zero with similar-looking distributions on either sides. The biggest jumps ahead were when a Chocolate Truffle was drawn right at the beginning of the game. The biggest fallbacks were when the Cupcake was drawn just before the end of the game. The dreaded scenario of drawing a Cupcake while sitting on the last tile happened 24 times!</p>
<p>The next thing I see in this plot is a few random spikes on the right side of the plot. Those are cases where you draw a candy right right at the start of the game.</p>
<p>Overall, the average number of tiles advanced across all these candy car draws was 1.26, with a median of 5. If we ignore the first turn of each game (since that seems to have caused those spikes), the average drops to -1.62 and the median is just 2 tiles. So, candy cards are sometimes good and sometimes bad, but overall it really is just a wash.</p>
</section>
<section id="most-likely-tiles" class="level3" data-number="3.7">
<h3 data-number="3.7" class="anchored" data-anchor-id="most-likely-tiles"><span class="header-section-number">3.7</span> Most likely tiles</h3>
<p>Finally, the last thing I’ll explore with these simulated games is the tiles on the board. Which ones are landed on the most? This figure below shows how many times each tile was landed on across the 10,000 games.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">games <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(end)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb54-6">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most likely landed-on tiles in a game of Candyland"</span>,</span>
<span id="cb54-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb54-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tile number"</span>,</span>
<span id="cb54-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"times landed on"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-53-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>The patterns here make a lot of sense. First, there are 11 tiles that are about twice as high. Seven of those are candy tiles and two of them are the ends of the shortcuts. It makes sense why the ends of the shortcuts are twice as high because you’ve got twice the odds of landing on them: once from taking the shortcut and once by approaching the end point the long way. The candy tiles are twice as high because they’re about as likely as taking the shortcuts.</p>
<p>You’ll also notice two tiles that were never landed on. Those are the beginning of the shortcuts. So, technically you do land on them, but you don’t <em>end your turn</em> on them.</p>
<p>The other two tiles that are landed on the most are two yellow tiles right at the end of the game. Why would those be landed on more than other tiles? As it turns out, I think it’s an error in how the game is laid out. Normally, when a candy tile is placed, it interrupts the sequence of colors across the board. However, in the case of the Chocolate Truffle, it actually takes the place of a yellow tile. Normally, if you’re within six tiles of a yellow tile (or any color), and draw a single color, you’ll land on that. But because that yellow was skipped, now if you’re within 12 tiles of that penultimate yellow, you’ll land there. And if you’re further back and get a double yellow, you’ll land there. So, the odds are just twice as greater because a yellow tile was skipped. That very last spike towards the end is the subsequent yellow, which you’d get if you drew a double yellow within five tiles of the Chocolate Truffle (on either side).</p>
<div class="callout callout-style-default callout-tip callout-titled" title="See the board again if you'd like">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
See the board again if you’d like
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://joeystanley.com/blog/simulating_candyland/board.jpg" class="img-fluid"></p>
</div>
</div>
</div>
<p>The other kind of intriguing pattern is that the number of times a tile is landed on decreases the further away one gets from a candy and shortcut tile. Since those tiles are the most likely, it makes sense then that the tiles immediately following them are more common. The further away you get from them though, the odds go up that you’ll see another candy card or something, pulling you away from that part of the board. The gap between tile 20 (Ice Cream Cone) and 41 (the end of the Gummy Pass followed by the Gummy Star) and the gap between tile 69 (Gingerbread Man) and 92 (Lollipop) show this especially well.</p>
</section>
<section id="summary" class="level3" data-number="3.8">
<h3 data-number="3.8" class="anchored" data-anchor-id="summary"><span class="header-section-number">3.8</span> Summary</h3>
<p>So, so far we’ve seen a lot of patterns in Candyland based on 10,000 simulated solo games. Most of the results are not too surprising, but it’s nice to put some numbers to things, like the number turns it takes, how many candy cards you’re likely to draw, whether candy cards are ultimately good or bad for your game, and how much more common one shortcut is compared to the other.</p>
</section>
</section>
<section id="changes" class="level2 page-columns page-full" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="changes"><span class="header-section-number">4</span> Changes</h2>
<p>Since we’ve got this all simulated, I can actually pretty easily change a few things about the game to see what kind of effect it might have on the results. I did this last time with my simulation of <a href="../../blog/simulating_chutes_and_ladders">Chutes and Ladders</a> and found that if you remove the longest chute, sure enough the average game length was shorter. What kinds of changes can we make to Candyland?</p>
<section id="triple-cards" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="triple-cards"><span class="header-section-number">4.1</span> Triple cards</h3>
<p>I think it would be fun to add one triple-color card for each color in the deck. It’d be a rare but really cool thing to encounter. Let’s add those six cards to the deck and see what happens to the stats.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Click here to see the details and code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Click here to see the details and code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>First, I’ll need to modify my <code>create_one_color_card</code> function to create a triple.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">create_one_color_card <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.color) {</span>
<span id="cb55-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb55-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb55-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"triple "</span>,  .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb55-5">}</span>
<span id="cb55-6">cards_with_triples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb55-7">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>),</span>
<span id="cb55-8">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>),</span>
<span id="cb55-9">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>),</span>
<span id="cb55-10">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb55-11">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>),</span>
<span id="cb55-12">           candy_cards)</span></code></pre></div>
</div>
<p>This will increase the overall size of the deck, which might have some consequences by itself, but I don’t think it’ll matter too much.</p>
<p>I now have to modify the code I use for the simulation to account for triple cards</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">simulate_game_with_triples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb56-2">  </span>
<span id="cb56-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declare space for the full game.</span></span>
<span id="cb56-4">  n_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cards_with_triples)</span>
<span id="cb56-5">  turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb56-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start    =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb56-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">card  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_with_triples, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), </span>
<span id="cb56-8">                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_with_triples, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb56-9">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shortcut =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb56-10">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end      =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb56-11">  </span>
<span id="cb56-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop until the game is over</span></span>
<span id="cb56-13">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-14">  keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb56-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb56-16"></span>
<span id="cb56-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Start at zero</span></span>
<span id="cb56-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb56-19">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb56-20"></span>
<span id="cb56-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb56-22">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb56-23">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb56-24">    }</span>
<span id="cb56-25"></span>
<span id="cb56-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: This is where the game actually happens.</span></span>
<span id="cb56-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a candy card, go straight there.</span></span>
<span id="cb56-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards) {</span>
<span id="cb56-29">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board[board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>special <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]],]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile</span>
<span id="cb56-30">      </span>
<span id="cb56-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's not, find the next colors.</span></span>
<span id="cb56-32">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb56-33">      card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb56-34">      card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb56-35"></span>
<span id="cb56-36">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb56-37">      eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-38">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb56-39">               color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-40">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb56-41">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb56-42">      n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb56-43">      </span>
<span id="cb56-44">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb56-45">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb56-46">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb56-47">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb56-48">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb56-49">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb56-50">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># triple cards</span></span>
<span id="cb56-51">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"triple"</span>) {</span>
<span id="cb56-52">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb56-53">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb56-54">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb56-55">        turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb56-56">      }</span>
<span id="cb56-57">    }</span>
<span id="cb56-58">    </span>
<span id="cb56-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the shortcuts.</span></span>
<span id="cb56-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb56-61">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb56-62">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span></span>
<span id="cb56-63">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>) {</span>
<span id="cb56-64">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span></span>
<span id="cb56-65">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy pass"</span></span>
<span id="cb56-66">    }</span>
<span id="cb56-67">  </span>
<span id="cb56-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Check if it's game over.</span></span>
<span id="cb56-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb56-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb56-71">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb56-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb56-73">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb56-74">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb56-75">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb56-76">      i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-77">    }</span>
<span id="cb56-78">  }</span>
<span id="cb56-79"></span>
<span id="cb56-80">  turns <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-81">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(turn_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-82">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb56-83">}</span></code></pre></div>
</div>
<p>Now, let’s actually run the 10,000 simulated games.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250320</span>)</span>
<span id="cb57-2">games_triple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(game_num, simulate_game_with_triples)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(game))</span>
<span id="cb57-5">games_triple_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> games_triple <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb57-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(turn_num),</span>
<span id="cb57-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_candies =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(card <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> candy_cards),</span>
<span id="cb57-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_singles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>)),</span>
<span id="cb57-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_doubles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>)),</span>
<span id="cb57-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_triples =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"triple"</span>)),</span>
<span id="cb57-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_shortcuts =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(shortcut)),</span>
<span id="cb57-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> game_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb57-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 7
   game_num turns n_candies n_singles n_doubles n_triples n_shortcuts
      &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;     &lt;int&gt;     &lt;int&gt;       &lt;int&gt;
 1        1    30         1        17         9         3           1
 2        2    16         3         6         4         3           0
 3        3     7         1         2         4         0           0
 4        4    24         1        12        10         1           0
 5        5    16         1         6         7         2           0
 6        6    18         0         8         8         2           0
 7        7    25         1        13        11         0           0
 8        8    13         2         7         3         1           0
 9        9    22         1        10         9         2           0
10       10    18         2        10         4         2           0
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>Now we can take a look at the results!</p>
</div>
</div>
</div>
<p>First, we’ll see how many triple cards were drawn in a typical game.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">games_triple_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb59-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(n_triples) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb59-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb59-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_triples, prop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb59-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e6cff"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb59-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb59-7">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of triple-color cards drawn in a game of Candyland"</span>,</span>
<span id="cb59-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games with triple-color cards added"</span>,</span>
<span id="cb59-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of triple cards drawn"</span>,</span>
<span id="cb59-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb59-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-58-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>There are only six triples in the deck, so it’s unsurprising that there are relatively few drawn in a game. But most games encountered at least one, just like the candy cards. Let’s see what overall effect this hand on the number of turns in the game.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> games_summary, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with triples added</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> games_triple_summary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game_type"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(turns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> game_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> game_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb60-6">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-7">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_ptol</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-8">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_ptol</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of turns to finish a solo game of Candyland"</span>,</span>
<span id="cb60-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb60-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>,</span>
<span id="cb60-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb60-13">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-59-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>So, unsurprisingly, the overall number of turns it takes to complete a game of Candyland goes down if you add some triple-color cards. Interestingly, the most likely outcome is still to finish in about 12–20 turns. But, you’re a little more likely to finish in that range, you’re more likely to finish in fewer turns than that, and less likely to finish in more terns.</p>
<p>So, if the creators wanted to change the game a little bit, they could tweak the deck and run some simulations. If they feel the game is too long, add some more doubles or triples. If it’s too short, add more singles.</p>
</section>
<section id="sec-removing_candies" class="level3 page-columns page-full" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="sec-removing_candies"><span class="header-section-number">4.2</span> Removing Candies</h3>
<p>We’ve established in Section&nbsp;3.6 that the candy cards ultimately don’t benefit the player if the only objective is to finish the game. They are, of course, the most fun part of the game. (My family’s Chocolate Truffle card is starting to fall apart because my kids like to hold it so much!) But, what would happen if we took those cards out entirely? How would that affect the length of the game?</p>
<div class="callout callout-style-default callout-note callout-titled" title="Click here to see the details and code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Click here to see the details and code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>First, I’ll need to modify my deck of cards to not have those candy cards.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">create_one_color_card <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.color) {</span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb61-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single "</span>, .color), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb61-4">}</span>
<span id="cb61-5">cards_without_candies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb61-6">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>),</span>
<span id="cb61-7">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>),</span>
<span id="cb61-8">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>),</span>
<span id="cb61-9">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb61-10">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_one_color_card</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>))</span></code></pre></div>
</div>
<p>This will decrease the overall size of the deck, so I’ll allocate room for going through the deck a third time. I’ll now modify the simulation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">simulate_game_without_candies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb62-2">  </span>
<span id="cb62-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declare space for the full game.</span></span>
<span id="cb62-4">  n_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cards_without_candies)</span>
<span id="cb62-5">  turns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb62-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start    =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb62-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">card  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_without_candies, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), </span>
<span id="cb62-8">                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_without_candies, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), </span>
<span id="cb62-9">                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_without_candies, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb62-10">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shortcut =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb62-11">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end      =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb62-12">  </span>
<span id="cb62-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop until the game is over</span></span>
<span id="cb62-14">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb62-15">  keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb62-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(keep_playing) {</span>
<span id="cb62-17"></span>
<span id="cb62-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Start at zero</span></span>
<span id="cb62-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb62-20">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb62-21"></span>
<span id="cb62-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, start where the last turn ended.</span></span>
<span id="cb62-23">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb62-24">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb62-25">    }</span>
<span id="cb62-26"></span>
<span id="cb62-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: This is where the game actually happens.</span></span>
<span id="cb62-28">    card_color  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>)</span>
<span id="cb62-29">    card_amount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>card[[i]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)</span>
<span id="cb62-30">    </span>
<span id="cb62-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move to the next spot</span></span>
<span id="cb62-32">    eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-33">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tile <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start[[i]],</span>
<span id="cb62-34">             color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> card_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-35">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(tile)</span>
<span id="cb62-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of eligible spots</span></span>
<span id="cb62-37">    n_eligible_spots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(eligible_spots)</span>
<span id="cb62-38">    </span>
<span id="cb62-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular single card</span></span>
<span id="cb62-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>) {</span>
<span id="cb62-41">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb62-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular double card</span></span>
<span id="cb62-43">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_eligible_spots <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> card_amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>) {</span>
<span id="cb62-44">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eligible_spots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb62-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no more eligible spots</span></span>
<span id="cb62-46">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb62-47">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span></span>
<span id="cb62-48">    }</span>
<span id="cb62-49"></span>
<span id="cb62-50">    </span>
<span id="cb62-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the shortcuts.</span></span>
<span id="cb62-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb62-53">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb62-54">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span></span>
<span id="cb62-55">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>) {</span>
<span id="cb62-56">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span></span>
<span id="cb62-57">      turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>shortcut[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gummy pass"</span></span>
<span id="cb62-58">    }</span>
<span id="cb62-59">  </span>
<span id="cb62-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Check if it's game over.</span></span>
<span id="cb62-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run out of cards</span></span>
<span id="cb62-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n_cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb62-63">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb62-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># win</span></span>
<span id="cb62-65">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (turns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>end[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tile)) {</span>
<span id="cb62-66">      keep_playing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb62-67">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb62-68">      i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb62-69">    }</span>
<span id="cb62-70">  }</span>
<span id="cb62-71"></span>
<span id="cb62-72">  turns <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb62-73">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(turn_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb62-74">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb62-75">}</span></code></pre></div>
</div>
<p>Now, let’s actually run the 10,000 simulated games.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250320</span>)</span>
<span id="cb63-2">games_without_candies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(game_num, simulate_game_without_candies)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(game))</span>
<span id="cb63-5">games_without_candies_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> games_without_candies <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(turn_num),</span>
<span id="cb63-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_singles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single"</span>)),</span>
<span id="cb63-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_doubles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(card, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>)),</span>
<span id="cb63-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_shortcuts =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(shortcut)),</span>
<span id="cb63-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> game_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb63-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 5
   game_num turns n_singles n_doubles n_shortcuts
      &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;       &lt;int&gt;
 1        1    23        13        10           0
 2        2    24        18         6           1
 3        3    24        15         9           0
 4        4    26        17         9           0
 5        5    25        17         8           0
 6        6    13         8         5           1
 7        7    28        18        10           0
 8        8    22        15         7           1
 9        9    18         7        11           0
10       10    10         4         6           1
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>Now let’s take a look at the results.</p>
</div>
</div>
</div>
<p>In this plot, I’ve shown the distribution of the number of turns it takes to finish a game of Candyland. In blue is a normal game, while in red is the game if we took all the candy cards out.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> games_summary, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">without candies</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> games_without_candies_summary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game_type"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(turns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> game_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> game_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb65-6">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-7">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_ptol</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-8">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_ptol</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of turns to finish a solo game of Candyland"</span>,</span>
<span id="cb65-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb65-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>,</span>
<span id="cb65-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb65-13">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-63-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>These results surprised me! I thought that because candy cards, on average, don’t help the player advance that much, that the number of turns required to finish a game would be basically the same. I was prepared to make the conclusion that while they don’t help advance the game, they certainly make it more fun. I was wrong! Well, kinda. They’re still fun regardless, but taking out the candy cards has several effects.</p>
<p>First, the minimum number of turns it takes to finish the game goes up. The shortest game took just eight turns. In all four that this happened, the simulation got six double-color cards <em>and</em> the peppermint pass. This makes sense because you have to work your way across the entire board “the long way.”</p>
<p>Second, the longest game is considerably shorter. This also makes sense because every turn brings you closer to the end and there’s nothing pulling you back. You might think the longest game in theory would be 133 turns because that’s how many tiles there are, but you’d have to start drawing double cards at some point, so it’d have to be shorter. In these 10,000 simulations, the longest game took 32 turns. There’s nothing special about it other than they just got crummy luck. Many of their single cards advanced them just two or three tiles, and several of their doubles advanced them just seven or eight tiles.</p>
<p>The combined effects of lengthening the shortest game and shortening the longest game means that the variability in number of turns needed to finish the game goes down. This is visually apparent in the plot: there’s a tighter cluster centered around 21–22 games, rather than the much more spread out distribution in a regular game.</p>
<p>The final effect that I see is a greater exaggeration of the bimodal distribution. In Section&nbsp;3.1, I pointed out there was a spike around 13–14 turns and another around 20. We see those same numbers, maybe shifted slightly, but in a much more stark way. It’s really hard to pick out what’s going on here, but I think the obvious answer is that the games that took a shortcut took fewer turns. I mean, of course taking a shortcut will make the whole game shorter, but is the effect as strong as it seems?</p>
<p>It seems so. I classified the games based on whether they finished in 15 turns or less and whether they took the Peppermint Pass (the really good shortcut at the beginning of the game). Sure enough, 95% of games that took that shortcut also finished in 15 turns or less, and 98% of games that did <em>not</em> take the shortcut finished the game in more than 15 turns.<sup>4</sup> When I plot the data split up by whether the peppermint pass was taken, the pattern is crystal clear.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;I ran a chi-squared on this data and it supports the idea of a relationship between these two categories (<img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2"> = 159,941.1, df = 1, <em>p</em> &lt; 0.0001). I’m not really sure if chi-squared tests work with such large numbers, but the results are so clear in just the summary that stats aren’t needed to show the pattern.</p></div></div><div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">games_without_candies <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb66-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb66-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">took_peppermint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(shortcut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb66-4">                                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>,</span>
<span id="cb66-5">                                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>),</span>
<span id="cb66-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> game_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(turns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> took_peppermint, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> took_peppermint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb66-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb66-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)),</span>
<span id="cb66-11">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-12">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_ptol</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-13">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_ptol</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of turns to finish a solo game of Candyland without candy cards"</span>,</span>
<span id="cb66-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb66-16">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>,</span>
<span id="cb66-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb66-18">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb66-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-67-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>So, going back to the original data plotted in Section&nbsp;3.1, I’ll bet that’s what’s going on. It’s not as clear of a pattern in a real game because it mostly gets washed out from the candies, but I’ll bet that’s what’s going on. Let me plot that original data again just to make sure.</p>
<div class="cell">
<details class="code-fold">
<summary>See code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">games <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb67-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">took_peppermint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(shortcut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peppermint pass"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb67-4">                                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>,</span>
<span id="cb67-5">                                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>),</span>
<span id="cb67-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> game_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(turns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> took_peppermint, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> took_peppermint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)),</span>
<span id="cb67-11">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-12">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_ptol</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-13">  ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_ptol</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"took the peppermint pass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not take the peppermint pass"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of turns to finish a solo game of Candyland"</span>,</span>
<span id="cb67-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Based on 10,000 simulated games"</span>,</span>
<span id="cb67-16">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent of games"</span>,</span>
<span id="cb67-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb67-18">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/simulating_candyland/index_files/figure-html/unnamed-chunk-68-1.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
<p>Yep, there it is. So, that bimodal distribution is because of the peppermint pass. Pretty cool.</p>
</section>
</section>
<section id="conclusion" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">5</span> Conclusion</h2>
<p>Okay, so I had some fun with this. Simulating Candyland is pretty straightforward, and once you’ve got it going, it’s easy to query and see patterns. And it’s easy to make some adjustments and see what kind of effect it has on the gameplay.</p>
<p>Here’s a summary of the main findings:</p>
<ul>
<li>The typical number of turns to finish a game is 10–25, more on the lower end if you take the Peppermint Pass and more on the upper end if you don’t.</li>
<li>It’s typical to see 5–15 single-color cards and 3-10 double cards.</li>
<li>Only about a third of games take one of the shortcuts, and the Gummy Pass is 1.4 times as likely as the Peppermint Pass.</li>
<li>You’ll see at least one candy card in 90% of games. For some inexplicable reason, the Cupcake and Chocolate Truffle are far more common than due to random chance alone, and the Lollipop, Ice Cream Cone, and Gingerbread Man are far less common.</li>
<li>The candy cards are, overall, neither an advantage nor a disadvantage. If you remove candy cards drawn on the first turn, the average number of tiles advanced because of a candy card is basically zero.</li>
</ul>


</section>


 ]]></description>
  <category>Side Projects</category>
  <category>Simulations</category>
  <guid>https://joeystanley.com/blog/simulating_candyland/</guid>
  <pubDate>Fri, 21 Mar 2025 20:47:00 GMT</pubDate>
</item>
<item>
  <title>Automated Transcription in R using Whisper</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/whisper/</link>
  <description><![CDATA[ 





<p>In this tutorial, I’ll walk you through how to use OpenAI’s Whisper model to automatically transcribe your audio completely within R. We’ll do so using the <a href="https://github.com/bnosac/audio.whisper"><code>audio.whisper</code></a> pacakge.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <a href="https://github.com/bnosac/audio.whisper">R package</a> for Whisper is only available through a third-party company called <a href="http://www.bnosac.be">BNOSAC</a>, rather than through OpenAI itself. From what I can tell, it is more limited in its capabilities than <a href="https://github.com/openai/whisper">OpenAI’s own Python package</a>. Since I have never really learned Python programming, I’ll stick with R.</p>
</div>
</div>
<section id="preliminaries" class="level2 page-columns page-full" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="preliminaries"><span class="header-section-number">1</span> Preliminaries</h2>
<p>The first step is to install <a href="https://github.com/bnosac/audio.whisper"><code>audio.whisper</code></a>. Since it’s not available through R’s official repository for R packages, we won’t be able to just use <code>install.packages</code> like normal. Instead, we’ll use the <code>install_github</code> function, which is available in a package called <code>devtools</code>. <sup>1</sup> You’ll need to specify the path <code>"bnosac/audio.whisper"</code>, which let’s R know <a href="https://github.com/bnosac/audio.whisper">where on GitHub</a> the package is located. We add <code>ref = "0.3.3"</code> as an argument to the installation function to ensure that we’re getting the latest <em>stable</em> version of the package. Without it, you’ll get the latest <em>development</em> version which may be buggy and not work for you.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;If you don’t have <code>devtools</code> already, you can install it the normal way: <code>install.packages("devtools")</code>.</p></div></div><div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bnosac/audio.whisper"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ref =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3.3"</span>)</span></code></pre></div>
</div>
<p>Now that you’ve got the R package installed, you’ll need to actually download the Whisper model to your computer, so that Whisper can function completely offline. There are different sizes of the model, ranging from tiny to <code>large-v3</code>. The smaller ones will get transcription done quicker and take up less room on your computer, but they may not be as accurate. The larger models will take longer to do and will take up more room on your computer, but they will be more accurate. On my computer (a 2023 MacBook Pro), I’ve only been able to get the “small” model to work. Anything larger fails on my computer, possibly because of a lack of processing power. I have transcribed lab quality speech with pretty good results using the small model. A student of mine compared the output to the medium model and found it to be raelly not that much improved over the small model, even though it took more than twice as long. So, for my purposes (and possibly yours too), the small model may be all you need.</p>
<p>Here are the options and the code for each one. We’ll load it using the function <code>whisper</code> and save the output to an object called <code>model</code>. We’ll call that object later on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(audio.whisper)</span>
<span id="cb2-2">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tiny"</span>)</span>
<span id="cb2-3">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span>)</span>
<span id="cb2-4">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb2-5">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb2-6">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"large-v1"</span>)</span>
<span id="cb2-7">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"large-v2"</span>)</span>
<span id="cb2-8">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">whisper</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"large-v3"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>whisper_init_from_file: loading model from '/Users/joeystan/Library/CloudStorage/Box-Box/KohlerTapes/scripts/ggml-small.bin'
whisper_model_load: loading model
whisper_model_load: n_vocab       = 51865
whisper_model_load: n_audio_ctx   = 1500
whisper_model_load: n_audio_state = 768
whisper_model_load: n_audio_head  = 12
whisper_model_load: n_audio_layer = 12
whisper_model_load: n_text_ctx    = 448
whisper_model_load: n_text_state  = 768
whisper_model_load: n_text_head   = 12
whisper_model_load: n_text_layer  = 12
whisper_model_load: n_mels        = 80
whisper_model_load: f16           = 1
whisper_model_load: type          = 3
whisper_model_load: mem required  =  603.00 MB (+   16.00 MB per decoder)
whisper_model_load: kv self size  =   15.75 MB
whisper_model_load: kv cross size =   52.73 MB
whisper_model_load: adding 1608 extra tokens
whisper_model_load: model ctx     =  464.56 MB
whisper_model_load: model size    =  464.44 MB</code></pre>
</div>
</div>
<p>I’ll pick the small model for this tutorial. When you load one, it’ll download the file to your computer in the same folder as where your script is located. You should see a file called <code>ggml-small.bin</code> or something.<sup>2</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;If you have whisper installed already somwhere for another project, there’s no need to install it a second time for this specific project. Feel free to provide a pathname to that file instead of <code>"small"</code> and it’ll load it from there.</p></div></div><p>We’re also going to need to install the <code>av</code> package. This is just for working with audio files and converting them into a format that <code>audio.whisper</code> likes. You can install it the normal way.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"av"</span>)</span></code></pre></div>
</div>
<p>We’ll then load it, as well as <code>tidyverse</code>, and we’ll be ready to go.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(av)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
</section>
<section id="using-whisper" class="level2 page-columns page-full" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="using-whisper"><span class="header-section-number">2</span> Using Whisper</h2>
<p>Using Whisper really only takes a few lines of code. So if you’re interested in just a one-off use, then you’re in luck. I’ll first show the bare minimum you’ll need to use Whisper. However, be aware that the output isn’t in a particularly useful format, so you’ll likely need to convert it to a TextGrid, which we can do right here as well. And of course, wrapping it all into a function can help if you need to process multiple files.</p>
<p>The first thing you need to do is convert the audio to a 16-bit WAV file. This is a constraint imposed by <code>audio.whisper</code> (and maybe Whisper itself, I don’t know). We can do this with the <code>av_audio_convert</code> function in the <code>av</code> package. This function takes four arguments:</p>
<ul>
<li>the pathname to the audio you want to convert</li>
<li>the pathname to the output you want to convert</li>
<li>the format you want to convert the audio to</li>
<li>the sample rate you want to convert the audio to.</li>
</ul>
<p>I have a file named <code>02-Carol.wav</code> that I’m going to use for this tutorial.<sup>3</sup> It’s a 1-minute snippet from a sociolinguistic interview I did as part of my dissertation in Washington where she talks about what it was like living near Mount St.&nbsp;Helens when it erupted in 1980. The file is already in the right format, but I’ll run the code anyway just to be sure.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;You can get this and other sample audio [here](/data.</p></div></div><div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">av_audio_convert</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02-Carol.wav"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02-Carol.wav_16bit.wav"</span>, </span>
<span id="cb6-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wav"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_rate =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16000</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Output #0, wav, to '/Users/joeystan/GitHub/joeystanley/blog/whisper/02-Carol.wav_16bit.wav':</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Metadata:</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     ISFT            : Lavf60.3.100</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 16000 Hz, mono, s16, 256 kb/s</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding audio frame 1305 at timestamp 55.57sec - audio stream completed!</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] "/Users/joeystan/GitHub/joeystanley/blog/whisper/02-Carol.wav_16bit.wav"</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that putting just the filename (i.e.&nbsp;<code>"02-Carol.wav"</code>) assumes that the file is in the same folder as the script that you’re running this code from. If your file lives somewhere else on your computer, you’ll need to provide a full path (e.g.&nbsp;<code>"/Users/joeystan/Desktop/dissertation/audio/02-Carol/02-Carol.wav</code>) or a relative path (e.g.&nbsp;<code>"../audio/02-Carol.wav"</code>).</p>
<p>The same applies to the output. By just providing a filename, it’ll create the file in the same folder as the script. If you want it to be saved somewhere else, you’ll need to provide a full or relative path.</p>
</div>
</div>
<p>I’ve now created a new file called <code>02-Carol.wav_16bit.wav</code>. That one should be ready to process. We’ll now use the <code>predict</code> function in <code>audio.whisper</code> to actually run Whisper on that newly created audio file. There are four arguments here.</p>
<ul>
<li>first, <code>model</code>, or the name of the object you created when you loaded the model above</li>
<li><code>newdate</code>: the path to the 16-bit WAV file you want to process</li>
<li><code>language</code>: the language of the audio being transcribed</li>
<li><code>n_threads</code>: the number of cores in your computer you want to devote towards the task. This is not optional, but since many computers nowadays have mutliple cores, you can speed up the task by having the function run in parallel across multiple cores. You can check how many cores you have by running <code>parallel::detectCores()</code> after installing the <code>parallel</code> package. Mine has 12.</li>
</ul>
<p>We’ll run that function and save that transcription to an object called <code>trans</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">trans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02-Carol.wav_16bit.wav"</span>, </span>
<span id="cb7-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">language =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_threads =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing 02-Carol.wav_16bit.wav (889065 samples, 55.5666 sec), lang = en, translate = 0, timestamps = 0

[00:00:00.000 --&gt; 00:00:03.500]   - Where were you and what happened when Mount St. Helens?
[00:00:03.500 --&gt; 00:00:05.580]   - Oh, that was a Sunday morning.
[00:00:05.580 --&gt; 00:00:11.580]   And I remember, well there were months leading up to this.
[00:00:11.580 --&gt; 00:00:13.880]   We didn't know what was gonna be happening up there.
[00:00:13.880 --&gt; 00:00:17.600]   Following the news and all the scientists and all that.
[00:00:17.600 --&gt; 00:00:21.860]   Anyway, so we knew something was going to happen.
[00:00:21.860 --&gt; 00:00:23.120]   We just didn't know when.
[00:00:23.120 --&gt; 00:00:24.340]   And it was a Sunday morning.
[00:00:24.340 --&gt; 00:00:25.820]   It was like 8.30 in the morning
[00:00:25.820 --&gt; 00:00:28.660]   and I think we had church at 11 or something.
[00:00:28.660 --&gt; 00:00:31.220]   So it was kind of a, the kids were all really little.
[00:00:31.220 --&gt; 00:00:32.720]   We only had three at the time.
[00:00:32.720 --&gt; 00:00:36.360]   The kids were really little.
[00:00:36.360 --&gt; 00:00:37.860]   We had kind of slept in that morning.
[00:00:37.860 --&gt; 00:00:41.200]   Kind of taken a slow pace, getting ready for church.
[00:00:41.200 --&gt; 00:00:45.380]   And my dad, who lived about 10 miles north of here
[00:00:45.380 --&gt; 00:00:49.420]   and had a view, he couldn't actually see it
[00:00:49.420 --&gt; 00:00:52.980]   but he could see the plume come up, called us.
[00:00:52.980 --&gt; 00:00:55.720]   And he said, "The mountain just blew."</code></pre>
</div>
</div>
<p>Technically, you’re done using Whisper! Hooray! Here’s the transcription:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">trans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   segment         from           to
1        1 00:00:00.000 00:00:03.500
2        2 00:00:03.500 00:00:05.580
3        3 00:00:05.580 00:00:11.580
4        4 00:00:11.580 00:00:13.880
5        5 00:00:13.880 00:00:17.600
6        6 00:00:17.600 00:00:21.860
7        7 00:00:21.860 00:00:23.120
8        8 00:00:23.120 00:00:24.340
9        9 00:00:24.340 00:00:25.820
10      10 00:00:25.820 00:00:28.660
11      11 00:00:28.660 00:00:31.220
12      12 00:00:31.220 00:00:32.720
13      13 00:00:32.720 00:00:36.360
14      14 00:00:36.360 00:00:37.860
15      15 00:00:37.860 00:00:41.200
16      16 00:00:41.200 00:00:45.380
17      17 00:00:45.380 00:00:49.420
18      18 00:00:49.420 00:00:52.980
19      19 00:00:52.980 00:00:55.720
                                                          text
1    - Where were you and what happened when Mount St. Helens?
2                             - Oh, that was a Sunday morning.
3   And I remember, well there were months leading up to this.
4         We didn't know what was gonna be happening up there.
5      Following the news and all the scientists and all that.
6            Anyway, so we knew something was going to happen.
7                                    We just didn't know when.
8                                 And it was a Sunday morning.
9                              It was like 8.30 in the morning
10               and I think we had church at 11 or something.
11       So it was kind of a, the kids were all really little.
12                              We only had three at the time.
13                                The kids were really little.
14                       We had kind of slept in that morning.
15        Kind of taken a slow pace, getting ready for church.
16          And my dad, who lived about 10 miles north of here
17                 and had a view, he couldn't actually see it
18              but he could see the plume come up, called us.
19                      And he said, "The mountain just blew."</code></pre>
</div>
</div>
<p>Okay, but now we need to get it into a format that’s actually useful. Right now it’s saved basically as a data frame (<code>trans$data</code>). Unfortunately, if you want to do subsequent processing, like forced alignment or extracting acoustic measurements, you’ll need to convert this output into a different format.</p>
</section>
<section id="using-elan-to-convert-to-a-praat-textgrid" class="level2 page-columns page-full" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="using-elan-to-convert-to-a-praat-textgrid"><span class="header-section-number">3</span> Using ELAN to convert to a Praat TextGrid</h2>
<p>If you’re just doing a small number of files, the easiest way to go would probably be to open this file in ELAN and from there export it into a Praat TextGrid. Let’s walk through that.</p>
<p>First, let’s export the file. Normally, I like doing a comma-separated value (.csv) file, but because Whisper automatically punctuates the transcription, which includes commas, it throws off how .csv files are stored. Instead, I’ll export it as a .txt file, and separate columns with tabs, which are coded in R as <code>\t</code>. I’ll do this using <code>write_delim</code>, which is part of <code>tidyverse</code>. There are three arguments:</p>
<ul>
<li>The file you want to export. That’s <code>trans$data</code>.</li>
<li>The name and path of the file you want to create.</li>
<li><code>delim = "\t"</code>, which tells R to put tabs between columns.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_delim</span>(trans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trans.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>The result is a new file that looks something like this:</p>
<p><img src="https://joeystanley.com/blog/whisper/trans_screenshot.png" class="img-fluid"></p>
<p>OKay, so now we need to jump over to the ELAN software. ELAN is an annotation tool for audio and video and is used by linguists all over the world. You can download it <a href="https://archive.mpi.nl/tla/elan/download">here</a>. I’m not going to explain much more because it’s pretty tangential to what this tutorial is about. All you need to know is that it’s great and that it can convert one transcription format to another, a fact we’ll take advantage of now.</p>
<p>Let’s open up ELAN. Here’s what the window looks like when you first open it.</p>
<p><img src="https://joeystanley.com/blog/whisper/elan_basic.png" class="img-fluid"></p>
<p>Go to File &gt; Import &gt; CSV/Tab-delimited Text File and open the new <code>trans.txt</code> file (or whatever you called it) that you just created. You’ll then be presented with a window that will give you some options for how ELAN should read the file in. Here’s what you’ll need to do:</p>
<ul>
<li>Towards the bottom of the file, specify that the delimiter is a Tab. That’ll change how the rest of the window looks.</li>
<li>In the middle of the window (in the “Import options” portion), uncheck the box under 1. That corresponds to the first column of the exported dataframe which is just sequentially numbering the intervals. Not super useful to us.</li>
<li>For column 2, change it to “Begin Time”. This corresponds to the start of each interval.</li>
<li>For column 3, change it to “End Time”. This corresponds to the end of each interval.</li>
<li>For column 4, change it to “Annotation”. This corresponds to the actual transcription.</li>
</ul>
<p><img src="https://joeystanley.com/blog/whisper/elan_settings.png" class="img-fluid"></p>
<p>Once you’ve done that, the transcription should be loaded like this:</p>
<p><img src="https://joeystanley.com/blog/whisper/elan_loaded.png" class="img-fluid"></p>
<p>We don’t really need to do anything in ELAN other than one small change. Currently, the tier is called “Tier-0”, which you can see in red text towards the bottom left of the window. Let’s change that to something more meaningful to us. Go to Tier &gt; Change Tier Attributes…. In the center of the new window that pops up, change the tier name to whatever you want, then hit “Change”. I’ll change it to “sentence” so that if I want to send it off to <a href="http://darla.dartmouth.edu">DARLA</a> (see tutorial <a href="../../blog/darla/">here</a>), I can do so without any other changes.</p>
<p><img src="https://joeystanley.com/blog/whisper/elan_changetiername.png" class="img-fluid"></p>
<p>Now you can simply export it into a Praat TextGrid. Go to File &gt; Export As &gt; Praat TextGrid…. You can use the default settings that show up in that export window, navigate to a location that is convenient for you, give it a name (be sure it has <code>.TextGrid</code> at the end of the filename), and save it with UTF-8 encoding.</p>
<p>Congrats! You now have a Praat TextGrid of an automatically generated transcription using Whisper.</p>
<p><img src="https://joeystanley.com/blog/whisper/elan_praat.png" class="img-fluid"></p>
<p>Now, there are a few things you need to be aware of. First, Whisper is going to assume that there’s only one speaker. If there are multiple speakers in your audio, you’ll need to modify the TextGrid and separate those out. It’s out of the scope of this tutorial to show how to do that, but you can look at <a href="https://joeystanley.com/downloads/190911-intro_to_Praat.html">my tutorial on Praat</a> for some basic, general advice on how to work with TextGrids. You’ll have to just listen to the audio and move any speech from, say, the interviewer, to a new tier.</p>
<p>The other thing that you should be aware of is that for some reason the TextGrid goes for five minutes, even if the audio is not that long. In my case, the audio is only about a minute, but you’ll notice that the TextGrid goes to 300 seconds. That bug must have been introduced in ELAN because it’s not part of the Whisper output. I don’t think it’ll harm anything, but it’s just something to be aware of.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;There may be an easy fix to that, but I rarely use ELAN so I don’t know it well enough to say!</p></div></div><p>Finally, very occasionally, Whisper may introduce a bug in the timing of the intervals such that the end time of one interval is later than the start time of the next interval. I’m not sure why that happens. Praat seems to be able to handle it most of the time, but sometimes it causes Praat to crash. If that happens to you, you’ll need to carefully check <code>trans.txt</code> and make sure each interval’s start time is identical to the previous interval’s end time. If you spot any errors, you can fix them manually.</p>
</section>
<section id="conclusion" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">4</span> Conclusion</h2>
<p>Hopefully with this brief tutorial, you’re able to start to automatically transcribe your own audio files.</p>
<p>In the future, I’ll expand this post to show how you can do all the Whisper stuff in a more automated way. This will include writing a function that converts the output into a TextGrid right in R so that you don’t have to go through ELAN for every file. All you’ll need to do is provide the name of the audio file and it’ll load it it, create the 16-bit WAV file, do the transcription, and export the TextGrid all at once. You can then start to loop over many files at once. But that tutorial will have to wait until I have a little more time.</p>


</section>


 ]]></description>
  <category>How-to Guides</category>
  <guid>https://joeystanley.com/blog/whisper/</guid>
  <pubDate>Tue, 11 Mar 2025 09:55:00 GMT</pubDate>
</item>
<item>
  <title>Y Magazine’s Video on my Missionary Voice research</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/missionary-voice-video/</link>
  <description><![CDATA[ 





<p>A couple years ago, Wendy Smemoe, Josh Stevenson, and I did some research on “Missionary Voice”, or the speech register used by missionaries of the Church of Jesus Christ of Latter-day Saints. After it was was <a href="https://journals.linguisticsociety.org/proceedings/index.php/PLSA/article/view/5701">published</a> last year,<sup>1</sup> my institution, Brigham Young University, apparently thought the research was interesting. So, first, the linguistics department did <a href="https://ling.byu.edu/missionary-voice-real-or-fake/">a write-up</a> in summer 2024. Then, in Fall 2024, <em>Y Magazine</em>, which is sent out to alumni, did <a href="https://magazine.byu.edu/article/missionary-voice-byu-research/">a write-up</a> as well. I just found out this week that a video they produced was posted onto YouTube! I hadn’t seen it before a few people started telling me about it.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;For a more detailed write-up about that paper, see <a href="../../blog/missionary-voice">this earlier blog post</a>.</p></div></div><div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/UIcYzTiONRk" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>It was a fun experience to be interviewed about my research like this. Jedidiah Flores of <em>Y Magazine</em> contacted us—I think as a result of the article that Rachel Bowden wrote originally for the department—in July, and we met virtually to talk about our findings. Her article was published in the Fall 2024 issue and online. We then met with the <em>Y Magazine</em> videography team at the end of August to talk about the possibility of making a video, and then in October we filmed the interview itself. <sup>2</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;I remember that was about an hour after getting barbecue for lunch with some friends, so I was really careful to not get sauce on my shirt or food in my teeth!</p></div></div><p><img src="https://joeystanley.com/blog/missionary-voice-video/behind-the-scenes.jpg" class="img-fluid"></p>
<p>For what it’s worth, the room we were in is the linguistics department’s conference room. While may look like just a room, but I have a lot of memories in there. I took some of my most memorable courses there when I was an undergrad. And my job talk when I applied for a faculty position was not only in that room, but I stood right where the interview took place.</p>
<p>I think they interviewed us for around 45 minutes. I remember just going on and on, not necessarily about the specifics of the findings, but about sociolinguistics generally and its greater implications. So, props to the editors for cutting down so much material into a much shorter video! You see just a glimpse of that larger discussion towards the end of the video. We talk about how it’s important to be aware of language bias and that it’s hard to love and respect other people if you don’t like the way they talk.</p>
<p>Some of you reading this might find the transition to religious topics in the video unusual. We mention a basic Christian tenet that we are all children of God and that Christ taught us to love one another (<a href="https://www.churchofjesuschrist.org/study/scriptures/nt/john/13?lang=eng&amp;id=p34#p34">John 13:34</a>). This is a church-owned institution and we were encouraged to find ways to unapologetically infuse our research with our religion. I believe our research stands on its own as an interesting sociolinguistic study, independent of religion. But, I also think that knowledge of sociolinguistic principles can make someone a better person because it draws attention to language bias and helps us overcome it.</p>




 ]]></description>
  <category>Mormonese</category>
  <category>Research</category>
  <category>Publications</category>
  <category>Students</category>
  <guid>https://joeystanley.com/blog/missionary-voice-video/</guid>
  <pubDate>Fri, 07 Mar 2025 12:03:00 GMT</pubDate>
</item>
<item>
  <title>A tutorial on using DARLA</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/darla/</link>
  <description><![CDATA[ 





<p>This tutorial focuses on DARLA, an online tool to facilitate automatic processing phonetic data, specifically for English vowels.<sup>1</sup> I’ll walk you through the most common use cases, based on my experience using DARLA and what I’ve seen students do. There is more to DARLA than what I can show here, and I encourage you to explore its full capabilities once you’ve mastered the basics.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This tutorial comes about a decade later than it should have. I hope it can still be of use to new linguistics students.</p></div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I am not affiliated with the folks who created or maintain DARLA, but I have been using DARLA since soon after its release in 2015. In grad school, I processed many hundreds of files of all kinds, lengths, and qualities. I don’t know all the inner workings of DARLA, so what I present here is what I’ve been able to gather based on using it a lot.</p>
</div>
</div>
<section id="what-is-darla" class="level2 page-columns page-full" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="what-is-darla"><span class="header-section-number">1</span> What is DARLA?</h2>
<p>DARLA is a website that has various sociophonetic data processing tools set up in a pipeline so that you can send files through various steps to get acoustic measurements. The various tools it uses are difficult to install for an average person, and even if you do have them on your computer, getting the output of one to feed nicely into the next is sometimes not a trivial task. DARLA does all the hard work of setting up the assembly line for you so that you don’t have to.</p>
<p>DARLA’s ultimate goal is to provide you a spreadsheet of acoustic measurements. Specifically, formant measurements at multiple points along the duration of each vowel in your audio file. Because some of the software that it uses are based on English, it only works on English data. And while some people have had success using DARLA for other varieties of English, you’ll have the best results when working with American English.</p>
<p>There are three main processing steps that need to happen to go from raw audio to a spreadsheet of formant measurements. First is <strong>transcription</strong>. We need to have a sentence- or utterance-level transcription of the audio, with timestamps, in regular English orthography. The timestamps are important. If you think about the closed captioning in a movie, it needs to know when to start showing a particular sentence and when to stop showing it. I suspect there’s a file somewhere under-the-hood of a DVD or streaming service that has a transcription file that has the sentence, the start time and the end time. Unlike closed captioning though, our transcription needs to be in a Praat TextGrid format (see Section&nbsp;7.1 for more details). Regardless of how the transcription is done, it will help in DARLA’s ultimate goal of knowing the start and end points of each vowel in the audio.</p>
<p>Next, is <strong>forced-alignment</strong>. Using a software called the Montreal Forced Aligner (or MFA).<sup>2</sup> <sup>3</sup> This takes a sentence-level transcription and ultimately converts it to a word- and phoneme-level transcription. The way it does this is it’ll take every word in the transcription and look it up in a pronunciation dictionary. DARLA uses the <a href="http://darla.dartmouth.edu/cmudict">CMU Dict</a>.<sup>4</sup> It’ll then convert your transcription into a quasi-IPA transcription called ARPABET (see the bottom of <a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict">this page</a>). The MFA then goes through its acoustic model, which knows what each speech sound is supposed to look/sound like in an audio file. For each utterance, it then does the best job it can at matching the audio to the string of speech sounds it’s expecting to find. It’s a somewhat complicated process, but you don’t need to fully understand it. The point is, at the end of forced alignment, MFA (and therefore DARLA) will provide you a version of your transcription that has every word and every phoneme aligned with start and end times.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;Created by Michael McAuliffe, Michaela Socolof, Sarah Mihuc, Michael Wagner, and Morgan Sonderegger in 2017.</p></div><div id="fn3"><p><sup>3</sup>&nbsp;You can <a href="https://montreal-forced-aligner.readthedocs.io/en/latest/">install MFA yourself</a>, but it’s not as easy as other software.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Also available <a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict">here</a></p></div></div><p>Finally, we have <strong>formant extraction</strong>. DARLA uses a software called <a href="https://github.com/JoFrhwld/FAVE">FAVE</a> to do this step. FAVE goes through the phoneme-level transcription that MFA provides, and looks at each vowel. For each one, it’ll extract a whole bunch of acoustic measurements and save them into a spreadsheet. In the end FAVE (and therefore DARLA) will provide you with that spreadsheet, which you can use for whatever you want, including processing in Excel or some statistical software.</p>
<p>You can do all these steps yourself manually if you’d like, but as old-school sociophoneticians know, that takes forever. You can also install these pieces of software yourself and do it completely offline if you’d like too, but it takes a bit of computer know-how to get that going. Or, you can upload your files to DARLA and with a few clicks, have it do the hard work of sending it through those three processing steps!</p>
<div class="callout callout-style-default callout-tip callout-titled" title="To summarize…">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
To summarize…
</div>
</div>
<div class="callout-body-container callout-body">
<p>The main pipeline is transcription → forced alignment (with MFA) → formant extraction (with FAVE). DARLA lets you jump into the pipeline at any point. You can choose to do all three, just the last two, or just the last one. And with transcription and forced alignment, it offers a few options on how to do it.</p>
</div>
</div>
<section id="how-this-tutorial-will-work" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="how-this-tutorial-will-work"><span class="header-section-number">1.1</span> How this tutorial will work</h3>
<p>What do you need in order to use DARLA? Well, it depends on how much automatic work you want to do. For the rest of this tutorial, it’ll be a bit of a choose-your-own-adventure book.</p>
<ul>
<li><p>If all you have is an audio file and you want DARLA to do transcription, forced alignment, and formant extraction, go to Section&nbsp;2.</p></li>
<li><p>If you have a transcription of your audio, and want to do forced alignment and formant extraction, go to Section&nbsp;3.</p></li>
<li><p>If you have a force-aligned transcription of your audio already and all you need to do is run FAVE to get formants, go to Section&nbsp;4.</p></li>
</ul>
<p>Regardless of where along the pipeline you are, many of the options that DARLA presents to you to customize the processing are the same, so I’ve included Section&nbsp;5, which has further instructions that apply regardless of what method you choose. If you run into trouble, see Section&nbsp;7.</p>
</section>
</section>
<section id="sec-completely_automated" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="sec-completely_automated"><span class="header-section-number">2</span> Completely Automated Vowel Extraction</h2>
<p>If you’ve got an audio file and are excited to get some quick-and-dirty results, you can send it through DARLA’s <a href="http://darla.dartmouth.edu/cave">completely automatic pipeline</a>. This will automatically transcribe your data using one of two speech recognition systems, and then send it off for further processing.</p>
<section id="darlas-in-house-transcription-system" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="darlas-in-house-transcription-system"><span class="header-section-number">2.1</span> DARLA’s in-house transcription system</h3>
<p>The first of the two methods is DARLA’s <a href="http://darla.dartmouth.edu/uploadasr">in-house speech recognition system</a>. You’ll be presented with this interface, which is typical of all DARLA’s interfaces:</p>
<p><img src="https://joeystanley.com/blog/darla/automated_inhouse.png" class="img-fluid"></p>
<p>First, it’ll ask you to upload a sound recording. They recommend audio files at least two minutes long, but it will run on slightly shorter files, although I don’t know what kind of effect that has on the output. As for the next thre questions about filters, see Section&nbsp;5.1. Once you’ve filled out that page and hit “submit”, you can jump to Section&nbsp;5.2.</p>
<p>Regarding DARLA’s in-house transcription, <a href="http://darla.dartmouth.edu/about#">they say</a> that it’s not a particularly good model and is really only intended to reliably transcribe the stressed vowel. It’s a model based on 400 hours of speech, but compared to contemporary speech-to-text methods, it doesn’t fare particularly well. They say in <a href="https://aclanthology.org/N15-3015.pdf">their write-up</a> that it has a 42% word-error rate and a 9% stressed vowel error rate once you’ve filtered out some of the bad measurements. If all you’re interested in are average positions of vowel categories, you’re probably okay trying it out, but for anything beyond that and I would start to think about providing your own transcription rather than have DARLA doing it.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="My Recommendation">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Recommendation
</div>
</div>
<div class="callout-body-container callout-body">
<p>Only use DARLA’s in-house speech recognition system if you want to get a very rough look at some vowel formants. Don’t rely on it for any serious analysis of vowels.</p>
</div>
</div>
</section>
<section id="sec-bedword" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="sec-bedword"><span class="header-section-number">2.2</span> Bed Word</h3>
<p>The other option for completely automated transcription in DARLA is to <a href="http://darla.dartmouth.edu/bedword">use a third-party software called Bed Word</a>. This is a relatively new option (around 2023) and works on more than just English.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Some backstory; feel free to skip">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Some backstory; feel free to skip
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bed Word is the brainchild of Marcus Ma, a then-undergraduate at Georgia Tech. He noticed that there are decent speech-to-text systems out there, but linguists hardly use them because the output they return is in a format that’s not particularly easy for linguists to work with, especially for subsequent acoustic analysis. So, with the help of Lelia Glass (a linguist at Georgia Tech) and Jim Stanford (who maintains DARLA), Ma took the Deepgram model and incorporated it into a pipeline that gives a Praat TextGrid instead of some other format. I had the opportunity to meet Ma and try out Bed Word before it went live and I was impressed with how good it was!</p>
<p>This is not the first time linguists have incorporated third-party transcription models into linguistic analysis pipelines. DARLA used to have another option that involved sending the audio through YouTube’s closed captioning service. And in 2018, linguists at the University of Washington (Alicia Wassink, Rob Squizzero, Campion Fellin, and David Nichols) introduced <a href="https://clox.ling.washington.edu/#/">CLOx</a>, which involved using Microsoft’s speech-to-text system. These let users leverage the power of models created by companies with far more money and resources than what linguists have, but in sort of a backdoor sort of way. The difference here is that Bed Word is incorporated into DARLA, and the output can be sent on to subsequent processing steps all in one go, which makes it even more convenient.</p>
</div>
</div>
</div>
<p>Because Bed Word uses a third-party software, there’s a small bit of work involved when getting started fo the first time. DARLA gives some instructions on how to do this, which will involve creating an account through <a href="https://developers.deepgram.com/docs/introduction">Deepgram</a>. Using Deepgram (and therefore Bed Word) is technically <a href="https://deepgram.com/pricing">not free</a>, but at the time of writing in February 2025, you get $200 of free credit, which is far more than what you’d need if you’re a casual user of DARLA. So, you shouldn’t have to worry about paying for this service.</p>
<p>If you select this option, you’ll see a screen that looks like this:</p>
<p><img src="https://joeystanley.com/blog/darla/bedword.png" class="img-fluid"></p>
<p>There are more options than the in-house transcription. I honestly don’t use Bed Word too much, so I can’t offer additional insight into these options other than what DARLA has on that webpage. I encourage you to read through the explanations carefully. The main one you’ll want to pay attention to is the last one. If your data is in English and you want to get formant measurements and a vowel chart, check this box so DARLA will send your files down the rest of the pipeline.</p>
<p>Once you’ve filled out the entire page and hit “submit”, see Section&nbsp;5.2 for what to next.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="My Recommendation">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Recommendation
</div>
</div>
<div class="callout-body-container callout-body">
<p>Bed Word is pretty good. If you plan on processing multiple files with DARLA, and you don’t have other feasible options for transcribing your audio, it’s worth it to get your Deepgram account set up and to use it for transcription.</p>
</div>
</div>
</section>
</section>
<section id="sec-semiautomated" class="level2 page-columns page-full" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sec-semiautomated"><span class="header-section-number">3</span> Semi-Automated Alignment and Extraction</h2>
<p>Automated transcription is great, but it introduces errors and uncertainty into your analysis. If you have the time and resources to do so, it is better to provide DARLA a transcription of the audio. There are several ways to do this.</p>
<ul>
<li><p>You could transcribe your audio manually using <a href="https://www.fon.hum.uva.nl/praat/">Praat</a>, <a href="https://archive.mpi.nl/tla/elan">ELAN</a>, or some other software. This is very time consuming but it is likely the best option if you are concerned about accuracy. It’s a bit of a rite of passage for some linguists (<a href="../../blog/transcribing-a-sociolinguistic-corpus">here are my thoughts</a> when I finished transcribing my dissertation data) and there’s no better way to really get to know your data than to listen and trascribe every second of it. If you’re doing just one audio file, manual transcription shouldn’t take too long.</p></li>
<li><p>If you don’t have the time or resources to do a full manual transcription, you can try correcting an automatic transcription. There are <em>tons</em> of free or paid transcription services and software that you could use, including <a href="@sec-bedword">Bed Word via DARLA</a>. The problem though is that the output might not be in a format that can be processed by phonetic software like DARLA (i.e.&nbsp;a Praat TextGrid). And if the automatic transcription is not very good, you might spend just as much time correcting as you would have just transcribing it yourself.</p></li>
</ul>
<p>Regardless of how you get your transcriptions, in order to use the semi-automated option in DARLA, you’ll need a transcription of your audio file. The format of that transcription will determine which option you use.</p>
<section id="a-textgrid-transcription" class="level3 page-columns page-full" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="a-textgrid-transcription"><span class="header-section-number">3.1</span> A TextGrid transcription</h3>
<p>Probably the most typical way of using DARLA is to provide it with a transcription in the form of a Praat TextGrid.<sup>5</sup> This is the method recommended by DARLA. Here are the instructions that DARLA provides when prepping your TextGrid.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;It is beyond the scope of this tutorial to explain what a TextGrid is or how to prepare one. I do however have a <a href="../../downloads/190911-intro_to_Praat.html">Praat basics tutorial</a>, which includes how to create TextGrids. You can also watch Jim Stanford’s <a href="https://www.youtube.com/watch?v=HK1MVfqemUQ">YouTube video</a> on how to prepare a TextGrid for DARLA.</p></div></div><p><img src="https://joeystanley.com/blog/darla/textgrid_option.png" class="img-fluid"> I also have some tips on how to prepare your TextGrid in Section&nbsp;7.1, including a screenshot of what a properly prepared TextGrid looks like.</p>
<p>Once you’re prepared your TextGrid using DARLA’s instructions and you’ve gone through my tips, you’re ready to go. Here’s the screen you’ll see:</p>
<p><img src="https://joeystanley.com/blog/darla/textgrid_interface.png" class="img-fluid"></p>
<p>You just need to upload your audio and your transcription file. For the filtering options see Section&nbsp;5.1. Once you hit submit, see Section&nbsp;5.2.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="My Recommendation">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Recommendation
</div>
</div>
<div class="callout-body-container callout-body">
<p>I agree that this is the best way to use DARLA. It takes time to get the transcriptions you need, but the output is usually very clean.</p>
</div>
</div>
</section>
<section id="a-plaintext-file" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="a-plaintext-file"><span class="header-section-number">3.2</span> A plaintext file</h3>
<p>The alternative to using a TextGrid is to upload your transcription as a “plaintext” file. If you’re not even sure what this means, here’s what that would look like:</p>
<p><img src="https://joeystanley.com/blog/darla/plaintext_example.png" class="img-fluid"></p>
<p>It’s not pretty, but the content is all there. It’s kind of like a TextGrid transcription but without any timestamps. You might get this if you use a third-party transcription service that does not have linguistic data processing in mind.</p>
<p>DARLA has some instructions on how to prepare for this method, which involves removing extraneous noise from the audio file itself:</p>
<p><img src="https://joeystanley.com/blog/darla/plaintext_option.png" class="img-fluid"></p>
<p>The last tip references the “smart replace” option (or something similar) that a lot of word processors have. See Section&nbsp;7.1, specifically the part about curly quotes, to get a little more clarification on what that means.</p>
<p>The interface for this looks simliar to what was seen with the TextGrid transcriptions. Simply upload your audio and transcription file. See Section&nbsp;5.1 for what to do about the filtering options and see Section&nbsp;5.2 for what to do once you hit the “submit” button.</p>
<p>I don’t recommend this option for a few reasons. DARLA has to work harder to get an accurate transcription. With a sentence- or utterance-level transcription, DARLA only needs to scan a few seconds of speech and match up a few dozen speech sounds to the audio. With a transcription like this without timestamps, DARLA has to scan the entire audio file and look through hundreds or thousands of speech sounds to match them up. It’s far more prone to error this way, even on pristine audio.</p>
<p>Another reason I don’t recommend it is because extraneous noise and speech errors complicate things. The transcription needs to match <em>exactly</em> what the person says, so DARLA recommends you remove things like loud breaths and other voices. You also need to remove things like false starts or stutters. And since we’re used to tuning those things out, you’re likely going to miss some. To me, this takes a lot of work—perhaps as much as just doing a transcription—and is still prone to error. One single “um” that you forgot to transcribe might throw off the entire transcription. It also means you’re no longer working with the original audio, which makes reproducibility difficult.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="My Recommendation">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Recommendation
</div>
</div>
<div class="callout-body-container callout-body">
<p>I can’t think of a good reason to use this option unless the transcription file you’re provided is in this format. Even then, I would try to create a Praat TextGrid with what I have to make processing less error-prone.</p>
</div>
</div>
</section>
</section>
<section id="sec-faveonly" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="sec-faveonly"><span class="header-section-number">4</span> FAVE only</h2>
<p>The last option for DARLA is to just have it extract formant measurements, given an already force-aligned TextGrid. You might need to do this if you have MFA installed on your computer already and just need to run FAVE. Or perhaps you took the MFA output that DARLA provides and made some corrections and want to get an updated spreadsheet of formant measrurements based on those updates.</p>
<p>This option is the last on the page of “semi-automated” options and the interface looks basically the same as all the others we’ve discussed above. Once again, see Section&nbsp;5.1 for more detail on the filtering options. Once you hit submit, see Section&nbsp;5.2.</p>
<p>You should know that DARLA has a tool to help <a href="http://darla.dartmouth.edu/asreval">look at the quality of transcriptions</a>. In all my years of using DARLA, I’ve actually never used this feature. It may be helpful for you if you need to compare two different transcriptions, but I unfortunately can’t offer any advice.</p>
</section>
<section id="sec-further_instructions" class="level2 page-columns page-full" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="sec-further_instructions"><span class="header-section-number">5</span> Further instructions</h2>
<p>The sections below apply to multiple DARLA options, so I’ve put them here instead of integrated with the above walkthroughs so that I don’t have to repeat myself too much. You should have been linked to these sections already if you’re doing a walkthrough.</p>
<section id="sec-filtering" class="level3 page-columns page-full" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="sec-filtering"><span class="header-section-number">5.1</span> The filtering options</h3>
<p>In pretty much every uploading interface in DARLA, you’ll be presented with three filtering options: stop-words, unstressed vowels, and bandwidths:</p>
<p><img src="https://joeystanley.com/blog/darla/filtering.png" class="img-fluid"></p>
<p>Let’s go through each of these:</p>
<ul>
<li><p><strong>stop-words</strong>: This refers to the most common words in English. There are numerous lists of stopwords, so there’s no hard-and-fast rule for what is considered a stopword and what is not. <a href="http://darla.dartmouth.edu/stopwords">DARLA’s list</a> is relatively small. The reason why you’d want to remove stopwords is because they tend to be phonetically reduced. Because they’re so common, we tend not to say them with full vowel qualities as we might with other words. Some researchers are not interested in that kind of phonetic reduction, so they often remove stopwords from analysis because it arguably gets in the way of the patterns they hope to find.</p></li>
<li><p><strong>unstressed vowels</strong>: In English, unstressed vowels tend to be schwa-like or otherwise reduced. Many sociophoneticians are not interested in unstressed vowels and instead focus on the vowel quality of stressed vowels. So, you can filter those unstressed vowels out so you don’t have to worry about them.</p></li>
<li><p><strong>bandwidths</strong>: This is a way to kinda measure the quality of audio at the moment the vowel formant measurements are taken. Without getting into the nitty-gritty of it, a larger bandwidth just means that the sound quality is probably not great, which means the formant estimation will be less reliable. <a href="https://www.youtube.com/watch?v=fh7GPtzx5D8">Marinaccino, Shapp, &amp; Singler (2021)</a> is the only study I’ve seen that analyzes bandwidths directly, and they find that checking this box gives you a little less data but overall doesn’t affect the results all that much. Of course, it depends highly on the audio quality: this will filter out many more vowels from digitized cassette tapes than from audio recorded in a sound booth.</p></li>
</ul>
<p>For what it’s worth, these filtering options are not an original feature of DARLA, but I’m glad they’re there.<sup>6</sup> I personally say “no” to all of those boxes so that I can be in control of the filters. For example, I use a different set of stopwords than what DARLA uses.<sup>7</sup> Ultimately, whether you use those filters is up to you.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;I’m pretty sure they were added was because my team at the University of Georgia requested the option to opt out of those filters so that we could have greater flexibility in how we filter our data.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;I typically use the one called “marimo” from <a href="https://cran.r-project.org/web/packages/stopwords/readme/README.html">the stopwords R package</a>.</p></div></div><div class="callout callout-style-default callout-tip callout-titled" title="My Recommendation">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Recommendation
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are just getting started with sociophonetic analysis, say “yes” to all three of those filters.</p>
<p>If you are competent at sociophonetic data analysis, say “no” to all three of those filters.</p>
</div>
</div>
</section>
<section id="sec-speaker_information" class="level3 page-columns page-full" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="sec-speaker_information"><span class="header-section-number">5.2</span> Enter Speaker Information</h3>
<p>Once you’ve filled out all the information on the form and hit the “submit” button, you’ll have to wait a minute or longer for your files to upload. If you’re working with large, uncompressed .wav files, it might take several minutes, depending on your internet connection. If you’re working with shorter .mp3 files, it might be only a few seconds. Don’t close the webpage just yet! You’ll need to wait until it’s fully uploaded, and only then will a couple new menu options appear that will prompt you to give the Speaker ID and their “Voice Type.”</p>
<p><img src="https://joeystanley.com/blog/darla/enter_speaker_information.png" class="img-fluid"></p>
<p>The Speaker ID is just whatever ID you use to refer to that speaker in your own records. If you’re doing just a one-off analysis of your speech or something, just put your name. If it’s part of a larger project, you can use the unique identifier (UT001-Joey or whatever).</p>
<p>For the Voice Type, this determines a setting in FAVE’s formant extraction. Typically, you’d use the “Low” option for men or taller people, and the “High” option for women and shorter people. But it’s not a precise setting, so if your data comes out looking messier than you expect, try resubmitting it with the other option and see if it works better.</p>
<p>Once you’ve hit “submit” this second time, you’re good to go. You are now free to close that window and you should get an email confirmation saying the process has started. See Section&nbsp;6 for more detail on what you do once DARLA has started processing your files.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Tips for submitting multiple files in a row">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tips for submitting multiple files in a row
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you plan on submitting multiple files to DARLA simultaneously in multiple tabs, it’s important to note that when you see this “Enter speaker information” part of the screen, the rest of the form resets. So, you won’t see the name of the audio or TextGrid you submitted. This is normally not a problem for the one-off file, but if you’ve got, say, five open DARLA tabs, you might forget which one had which files uploading. There were many times in grad school where I forgot which file was uploaded in that tab, and I ended up writing down the wrong speaker ID and selecting the wrong voice type, which means I had to process it all over again.</p>
<p>My first recommendation is to limit the number of simultaneous uploads to about five otherwise it might cause DARLA to crash for all of them. See Section&nbsp;7.2.2.</p>
<p>My other recommendation is to simply have a piece of paper handy and write down the names of the files you’re processing. Once you’ve submitted the speaker ID and voice type, you can cross off that speaker, close that tab (which moves all other tabs to the left), start a new DARLA tab all the way to the right, and write down that speaker. You then wait for the next one to finish uploading (they may not be ready in the order you submit them because of file size differences) and repeat the process, always carefully noting the order you submit them and crossing things off when you’re done. The highest uncrossed-out name on the paper corresponds to the leftmost DARLA tab. This technique has the added benefit of making it clear what files still need to be processed, reducing the accidental submission of the same file twice.<sup>8</sup></p>
</div>
</div>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;I often had to process dozens of files in a single setting, and this technique worked for me. If you ever walked past my desk in grad school, you probably saw tons of little sheets of paper with speaker IDs organized in neat columns with all but the bottom five or so crossed out.</p></div></div></section>
</section>
<section id="sec-output" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="sec-output"><span class="header-section-number">6</span> DARLA’s output</h2>
<p>If everything goes well, you should get two emails from DARLA. The first comes a few moments after you’ve submitted your files. It is just a confirmation to let you know that the processing has started. The second comes a few minutes later (perhaps up to 20 minutes) and contains five files for you. Let’s look at those individually.</p>
<ul>
<li><p><strong>formants.csv</strong>: this is the whole reason you used DARLA. It contains all the formant measurements for the entire file. Unfortunately, it’s out of the scope of this tutorial to go through that file in depth, but I hope to have a separate tutorial on that soon.</p></li>
<li><p><strong>formants.fornorm.tsv</strong>: this is the same data as in formants.csv, but it’s formatted in a specific way so that it can be read in by an online tool called <a href="http://lingtools.uoregon.edu/norm/">NORM</a>. That site is used for normalizing vowel formant data. If you’re not sure what that means or how to use NORM that’s okay—it’s a bit of an outdated tool nowadays anyway. I usually do nothing with that file.</p></li>
<li><p>some sort of <strong>.TextGrid</strong> file: this is the word- and phoneme-level transcription provided by MFA.</p></li>
<li><p><strong>transcription.txt</strong>: This contains just the text of the transcription file. This is useful in case you want to create a text corpus of your audio files. This file can easily be read into a program like <a href="https://www.laurenceanthony.net/software/antconc/">AntConc</a>.</p></li>
<li><p><strong>plot.pdf</strong>: A basic vowel plot of your data. I have some issues with this plot because it’s often a bit misleading. All vowels are averaged across the entire dataset to get these points, but the problem is it includes things like prerhotic and prenasal allophones which can throw everything off. If you don’t have any other data processing skills, this plot is the best you’ve got. (Stay tuned for an online tool I’ve created to help with creating interactive vowel plots based on DARLA data for people who don’t have coding skills!)</p></li>
</ul>
<p>Once you’ve got those files, you’re good! Save them in a place that makes sense, probably in the same folder with the audio and original transcription or maybe in a separate subfolder called “DARLA.”</p>
</section>
<section id="sec-troubleshooting" class="level2 page-columns page-full" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="sec-troubleshooting"><span class="header-section-number">7</span> Troubleshooting</h2>
<p>I have prepared hundreds of files for DARLA, so I’ve seen what works and what doesn’t. In this section, I give some advice to help you prepare your files for DARLA. You should also look at DARLA’s <a href="http://jstanford.host.dartmouth.edu/DARLA_Helpful_Hints_page.html">Helpful Hints page</a> and watch Jim Stanford’s <a href="https://www.youtube.com/watch?v=HK1MVfqemUQ">YouTube video</a> on how to prepare Textgrids.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>As of writing in February 2025, this section is very much incomplete. I’ll try to add to it when I can.</p>
</div>
</div>
<section id="sec-preparing_textgrids" class="level3 page-columns page-full" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="sec-preparing_textgrids"><span class="header-section-number">7.1</span> Preparing TextGrids</h3>
<p>Here are a few tips you should keep in mind when preparing your TextGrids to reduce the likelihood of DARLA crashing or otherwise being unable to process your file.</p>
<ul>
<li><p>Make sure the tier you want to be transcribed by DARLA is called “sentence”.</p></li>
<li><p>Don’t use digits in the transcription. So, type “nine” instead of “9”. This applies to dates and years too. For years, this is actually important because DARLA (well, technically MFA) won’t know whether “2017” is “twenty-seventeen” or “two thousand seventeen.” It might be unnatural to type those out, but it makes for a more accurate transcription and it’ll prevent some errors when processing it with DARLA.</p></li>
<li><p>Don’t use curly quotes and apostrophes. To understand what I mean by that, I’ll need to get into some typographical detail, but it’s important. Every time you type the apostrophe or double-quote character, there’s a possibility that it’ll convert into a curly quote character. Here is a straight apostrophe ( <code>'</code> ) and double quote ( <code>"</code> ) and here are curly apostrophes ( ‘ ) or ( ’ ) and curly double quotes ( “ ) and ( ” )<sup>9</sup>. Not all software does this conversion automatically—Praat and ELAN do not—but if you’re copying text over from Microsoft Word or some other program, it’s likely that there are curly quotes in there. You should care about this because <em>DARLA will crash if it encounters a curly quote character</em>! So you’ll need to learn to spot them and change them back to straight quotes before uploading it to DARLA.</p></li>
<li><p>Avoid very short intervals.</p></li>
<li><p>Avoid including sharp intakes of breath in a transcribed interval. DARLA may think it’s an [h] sound which could mess up the rest of that interval. So, even if it’s mid-sentence, end an interval before the breath and start a new one after it. (In general, the way to exclude something from being analyzed in DARLA is to simply put it in an empty interval.)</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;For more information about quotes, see <a href="https://practicaltypography.com/straight-and-curly-quotes.html">Butterick’s Practical Typography</a>.</p></div></div><p>Here is an example of what a TextGrid prepared for DARLA looks like:</p>
<div class="column-screen">
<p><img src="https://joeystanley.com/blog/darla/textgrid_example.png" class="img-fluid"></p>
</div>
<p>Here, you can see I have just one tier and it’s called “sentence”. You can add more tiers if you want (and you probably should if you want to transcribe additional people, make a note of extraneous noise, or have other annotations), but DARLA will ignore it. Notice that the number is spelled out. And notice at the very end a loud sound (it was the interviewer saying something like “mm” as some verbal feedback). To have DARLA ignore it, I just left that interval blank.</p>
</section>
<section id="what-to-do-if-darla-crashes" class="level3 page-columns page-full" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="what-to-do-if-darla-crashes"><span class="header-section-number">7.2</span> What to do if DARLA crashes</h3>
<p>If you use DARLA, you will likely experience it crashing. It is, unfortunately, not an uncommon occurrence. In this section I go through some of the error messages you might see and how to maybe fix things so they’ll work with DARLA.</p>
<section id="a-terrifying-error-page" class="level4 page-columns page-full" data-number="7.2.1">
<h4 data-number="7.2.1" class="anchored" data-anchor-id="a-terrifying-error-page"><span class="header-section-number">7.2.1</span> A terrifying error page</h4>
<p>DARLA can crash in a variety of ways. Sometimes it’s a full-screen error page that is terrifying to some people.</p>
<p><img src="https://joeystanley.com/blog/darla/error_page.png" class="img-fluid"></p>
<p>In my experience, the most common reason this page shows up is because there’s some sort of special character in the transcription. This may be a curly quote, punctuation mark, or anything that is not normally used in English orthography. To force this page, I actually added an <em>é</em> to an otherwise good transcription.</p>
<p>Fortunately, while this page is scary, DARLA now sends you an email with specifics on where the problem occurred.<sup>10</sup> Here’s what my email looked like:</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;I only discovered this today when I purposely triggered that error page! It must be a relatively new feature!</p></div></div><p><img src="https://joeystanley.com/blog/darla/nonascii-email.png" class="img-fluid"></p>
<p>Here it gives very specific information about where the error occurred (between 10.7 seconds and 15.84 seconds into the transcription). It then gives the transcription of that interval, with the problematic character replced with “X”. The character’s unicode value is provided (“0xe9”), which you can google to hopefully get an answer about what it is. That information is exactly right: here’s the relevant section of the TextGrid:</p>
<p><img src="https://joeystanley.com/blog/darla/nonascii_textgrid.png" class="img-fluid"></p>
<p>As you can see, there’s an <em>é</em> exactly where DARLA said it was! So, if you get an email like this, you can hopefully use it to find where the problem occurred and fix the special character.</p>
</section>
<section id="sec-error_email" class="level4 page-columns page-full" data-number="7.2.2">
<h4 data-number="7.2.2" class="anchored" data-anchor-id="sec-error_email"><span class="header-section-number">7.2.2</span> A generic error email</h4>
<p>Other times you’ll simply get an email saying DARLA failed:</p>
<p><img src="https://joeystanley.com/blog/darla/error_email.png" class="img-fluid"></p>
<p>This is, rather unfortunately, not a particularly helpful error message because it doesn’t say at all what the problem might be.</p>
<p>My recommendation is to just try submitting it again, possibly a third time. I have noticed that DARLA crashes if there are too many files in line to be processed at once.<sup>11</sup> So if you submit many files all in a row, try spacing them out.<sup>12</sup> If you happen to submit around the time other people are doing so, wait a few minutes or maybe try again later.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;I’ve made the mistake of having 25 students all try to submit files to DARLA during class. A few lucky ones got their files, but the rest all got error emails. I tell them to just continue trying several times until it goes through and usually everyone eventually is successful. Apparently, getting 25 submissions all at once overwhelms DARLA.</p></div><div id="fn12"><p><sup>12</sup>&nbsp;In grad school, I found that I could submit about four or five files at once without them crashing. As soon as I got the results of one, I would then submit the next one so that I never had too many going at the same time.</p></div></div><p>If that doesn’t work, please visit DARLA’s <a href="http://jstanford.host.dartmouth.edu/DARLA_Helpful_Hints_page.html">Helpful Hints page</a>. It lists may possible reasons why your file isn’t working. Some are just double-checking to make sure things are prepared properly. Other hints involve a bit of work, like the “divide and conquer” solution.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">8</span> Conclusion</h2>
<p>As far as where to go from here, well, that’s the next step in sociophonetic data processing! If you want to learn to make your own vowel plots, I have <a href="https://joeystanley.com/blog/making-vowel-plots-in-r-part-1/">a tutorial</a> that walks you through how to do so, and it’s even based on a DARLA-generated spreadsheet! For all other data processing, try to find books, websites, or advisors who can help you go from there.</p>


</section>


 ]]></description>
  <category>How-to Guides</category>
  <guid>https://joeystanley.com/blog/darla/</guid>
  <pubDate>Thu, 13 Feb 2025 05:20:00 GMT</pubDate>
</item>
<item>
  <title>A new publication in Linguistics Vanguard!</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/source_separation/</link>
  <description><![CDATA[ 





<p>Together with my co-authors, Lisa Morgan Johnson and Earl Kjar Brown, I’m happy to announce <a href="https://www.degruyter.com/document/doi/10.1515/lingvan-2024-0152/html">a new publication in <em>Linguistics Vanguard</em></a>!</p>
<section id="a-brief-summary" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-summary">A “Brief” Summary</h2>
<p>The problem that sociophoneticians face when working with interview data—particularly recordings not originally intended for linguistic analysis like older oral narratives—is overlapping speech. When two people talk at the same time, it is usually impossible to get reliable formant measurements automatically. My impression is that that data is somehow tagged or detected as overlapping speech and is excluded. When you’re working with shorter recordings that don’t have a lot of data to begin with, it would be nice to recover that data.</p>
<p>So, we introduce source separation. It’s an algorithm that takes in a single audio file containing speech from multiple speakers, and split it up into different audio files, one for each speaker. It detects when each speaker is talking (aka <em>diarization</em>) and then uses fancy models to separate the speakers from each other. In theory, this is a great way to recover data that would have otherwise been excluded.</p>
<p>The purpose of this paper then is to see whether such source separation models can feasibly be incorporated into a sociophonetic pipeline. In other words, is the output of a source separation model reliable enough that we can trust the formant measurements that come from the separated audio?</p>
<p>We decided to stress test the method. We took some audio I collected in grad school of two speakers, a man and a woman from Georgia. On separate occasions, they both read 300 sentences in a sound booth. We then overlayed that audio to create a very cacophonous audio file of the two of them talking at the same time for 30 minutes.</p>
<p>We then used three source separation models to separate the two speakers: Libri2, Whamr, and WSJ02. This created six new audio files, one for each speaker and for each model. Combine those with the two original audio files, and we had eight.</p>
<p>For each of the eight files, we sent them through a typical sociophonetic pipeline. First, the originals were manually transcribed at the utterance-level and we used those transcriptions for the their respective derived source-separated audio. We then sent the audio and transcriptions through DARLA to have them force-aligned with MFA and formant-extracted with FAVE. We then followed the same order of operations to process them. In the end, we had four versions of spreadsheets of formant measurements for each speaker’s audio recording. We could then compare them to each other.</p>
<p>First, while coming through the audio, we noticed that two of the models did a pretty good job. But one, the WSJ02 didn’t. We don’t really recommend that one.</p>
<p>Looking through the vowel plots, we’re surprised at how good they were, especially compared to the original. In these vowel plots (the female is on the left and the male is on the right), all four panels look pretty similar for the most part, and they all look like the top left panel which has the original audio.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/source_separation/female.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/source_separation/male.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>However, when we ran statistical tests on the formant data and compared them to the original, there were some statistically significant differences. But thy varied depending on the vowel, the model, and the speaker. In this plot, red dots are statistically significant differences. But there are many gray dots, meaning the difference between the source-separated audio and the original was not significant much of the time.</p>
<p><img src="https://joeystanley.com/blog/source_separation/pairwise_comparisons.png" class="img-fluid"></p>
<p>Then when we zero in on specific comparison and then draw lines connecting points that came from the same observation in the two recordings, we see a fair number of differences. So, while the means may be comparable, the values from any one observation may not be close to the original. Thi sis a similar finding to what Strelluf &amp; Gordon report in <a href="https://rowman.com/ISBN/9781498597265/The-Origins-of-Missouri-English-A-Historical-Sociophonetic-Analysis">their book on historical sociophonetics</a>.</p>
<p><img src="https://joeystanley.com/blog/source_separation/boxplot_comparisons.png" class="img-fluid"></p>
<p>So, we are cautiously optimistic about this. If you only model vowel means, you can probably feel comfortable doing so on source-separated data. But if you want to look at individual tokens, maybe not. Fortunately, most audio will not be as overlapped as this, so the effect will be smaller. Although, for dyads of speakers with similar sounding voices, it might not be as good.</p>
<p>We end with some recommendations, which I repeat here:</p>
<ul>
<li><p>Experiment with different models to find the one that is most suitable. In this rapidly developing field, models improve over time and new options emerge. So, rather than clinging to one that works, continuously explore potentially better tools.</p></li>
<li><p>Split audio at natural breaks rather than equal intervals. This can be done manually or using a script.</p></li>
<li><p>Listen to the output to ensure clean separation.</p></li>
<li><p>Transcribe based on the source-separated audio or ensure that existing transcriptions still match the new audio before conducting acoustic analysis.</p></li>
<li><p>Treat formant estimates at the token level with caution. To be safe, only do analyses on vowel summaries like averages.</p></li>
<li><p>Carefully document and report all methodological choices and human interventions.</p></li>
</ul>
</section>
<section id="backstory" class="level2">
<h2 class="anchored" data-anchor-id="backstory">Backstory</h2>
<p>I enjoy learning about papers’ back stories, so here is ours.</p>
<p>May 7, 2024, Lisa and I were talking about this and pitched the idea to Earl. Earl is the one who knows how to implement this stuff, so he worked on it that month and on May 21st, he basically did a proof of concept and said “I think we may have a paper!” In June, we fine-tuned the methods and prepared the audio. We had big plans to do a more robust study with different gender dyads and audio qualities, but we figured for this proof of concept paper, we’d keep it simple. (We may submit a bigger version to <em>JASA</em> still.) By the end of June, we basically had the results we needed, so we submitted an abstract to LSA.</p>
<p>Soon after the abstract was submitted, I figured we might as well write-up the paper. On July 17, I said let’s try and submit to <em>Linguistics Vanguard</em>. For the next week or so, we had a really nice asynchronous collaboration going as we each chipped away at the various parts of the paper we contributed to. (I did the vowel analysis, Lisa did the qualitative analysis, and Earl actual Python scripting). On July 26th, we submitted it!</p>
<p>On October 9th, we got a provisional accept and some useful reviewer comments. Bad timing for us because Lisa and I were about to head to NWAV. But on November 19, we returned the manuscript at 11:54am and at 7:01pm it was officially accepted! Quickest turn-around time ever! We submitted the final version on November 20th, got proofs on January 5th, we presented it at LSA on January 12th, and it was published online on January 29th.</p>
<p>So from inception (May 7) to paper submission (June 26) was 11 weeks. And from original submission to publication (January 29) was 26 weeks. Not too shabby.</p>


</section>

 ]]></description>
  <category>Methods</category>
  <category>Phonetics</category>
  <category>Research</category>
  <category>Publications</category>
  <guid>https://joeystanley.com/blog/source_separation/</guid>
  <pubDate>Wed, 29 Jan 2025 15:12:00 GMT</pubDate>
</item>
<item>
  <title>LSA and ADS 2025</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/ads-and-lsa-2025/</link>
  <description><![CDATA[ 





<p>This week I’m in Philadelphia at annual meetings of the Linguistic Society of America and the American Dialect Society. I gave three talks, which you can download here, I officially started two new service positions, and I got an award! It was a busy conference for me!</p>
<section id="saturday-mornings-ads-talk-on-georgia-prelaterals" class="level2">
<h2 class="anchored" data-anchor-id="saturday-mornings-ads-talk-on-georgia-prelaterals">Saturday morning’s ADS talk on Georgia Prelaterals</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the slides <a href="../../downloads/250111-ADS2025_GAPrelats.pdf">here</a>!</p>
</div>
</div>
<p>On Saturday morning at the ADS session, Peggy Renwick presented research on behalf of our research term on prelateral front vowels and how they’ve changed over time in Georgia. The talk is called “Complementary pre-lateral mergers across ethnicities and generations in Georgia.” Overall, we find that the various prelateral mergers peaked and reversed at different times for Black and White speakers, and for the two <em>feel-fill</em> and <em>fail-fell</em> pairs.</p>
</section>
<section id="saturday-afternons-ads-poster-on-utah-english" class="level2">
<h2 class="anchored" data-anchor-id="saturday-afternons-ads-poster-on-utah-english">Saturday afternon’s ADS poster on Utah English</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the poster <a href="../../downloads/250111-ADS2025_Kohler.pdf">here</a>!</p>
</div>
</div>
<p>On Saturday afternoon, I presented with my student, Hallie Davidson, a poster called “Variation in Early 20th Century Utah English.” This is the first time I’ve presented results from a collection of oral narratives I acquired called the “Kohler Tapes.” I’ve written blog posts about <a href="../../blog/kohler-tapes">how I acquired the tapes</a>, <a href="../../blog/kohler-tapes-update">the process of digitizing them</a>, and <a href="../../blog/kohler-tapes-update2">a summary of the metadata</a>, so I won’t repeat that here. But, because Hallie has been working on transcribing these tapes, we finally have some really preliminary linguistic results to present. They’re just impressionistic right now, nothing really conclusive, but we show that there’s a lot of variation in this collection. We’re excitedly working on some developments that involve training an AI model on this data so we can get the rest transcribed and we look forward to doing acoustic analysis soon!</p>
</section>
<section id="sunday-mornings-lsa-talk-source-separation" class="level2">
<h2 class="anchored" data-anchor-id="sunday-mornings-lsa-talk-source-separation">Sunday morning’s LSA talk source separation</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the slides <a href="../../downloads/250112-LSA2025_SourceSeparation.pdf">here</a>!</p>
</div>
</div>
<p>On Sunday morning, my final presentation was with Lisa Morgan Johnson (who presented with me) and Earl Kjar Brown. We were interested in source separation, which is where you separate overlapping audio into different tracks, one per speaker. We wanted to see if current algorithms produced reliable enough data for sociophonetic analysis. We took two recordings and processed them using typical methods and called that output the ground truth. We than synthetically overlapped the audio to create a cacophonous overlapping recording. We then tried three source separate models and processed the resulting audio files and compared them to the baseline.</p>
<p>We’re cautiously optemisitic about the results. There were some differences here and there, but on the whole the output formant measurements were pretty similar. However, we did notice that while the <em>mean</em> formants per vowel per speaker were similar, at the indidual token level, there were larger differences.</p>
<p>Anyway, we hope this will spark some interest in source separation and maybe help people recover audio that was previously unanalyzable!</p>
</section>
<section id="other-things" class="level2">
<h2 class="anchored" data-anchor-id="other-things">Other Things</h2>
<p>At the ADS Business Meeting, I was voted a member of the American Dialect Society Executive Committee! I replace Alicia Wassink, who was just voted President-Elect of the Linguistic Society of America.</p>
<p>At that same meeting, I was also voted a Kurath Fund Trustee, which is a position within the Linguistic Atlas Project. I’ll serve with Jennifer Cramer and Dennis Preston.</p>
<p>Finally, at the ADS Breakfast on Saturday morning, I received the 9th Audrey Duckert Memorial Travel Award to attend these ADS meetings.</p>
<p>I’m so humbled to be considered for these positions and award! Thank you to all those who were involved!</p>


</section>

 ]]></description>
  <category>Conferences</category>
  <category>Kohler Tapes</category>
  <category>Methods</category>
  <category>Presentations</category>
  <category>Research</category>
  <category>Students</category>
  <category>Utah</category>
  <guid>https://joeystanley.com/blog/ads-and-lsa-2025/</guid>
  <pubDate>Thu, 09 Jan 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Synthesis Days</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/synthesis_days/</link>
  <description><![CDATA[ 





<p>I don’t often post just about teaching, but I thought I’d report on something I tried this past semester. I had some issues with how I taught sociolinguistics in the past, so I came up with “synthesis days” to solve some of them. I think it worked and it might be useful for you too.</p>
<section id="issues-with-past-iterations-of-the-course" class="level2">
<h2 class="anchored" data-anchor-id="issues-with-past-iterations-of-the-course">Issues with past iterations of the course</h2>
<p>While prepping to teach sociolinguistics again, I thought back on things I didn’t like about how I’ve taught it in the past. For one, it was one of my first courses I taught, so the slides were a bit amateurish and they needed to be spruced up a little bit. (I guess that says something about how I’ve grown as a teacher or whatever.)</p>
<p>But one main issue was that my version of the course was a holdover from covid-era teaching. The first time I taught it, it was a single 75-minute lecture taught twice a week. One section came in on Tuesday and the other came in Thursday. On students’ off-days, they did some online content I prepared for them. It worked for that early 2021 semester. I later taught it as a stand-alone graduate level course (as opposed to a cross-listed one) where I split that 75-minute lecture into two 50-minute lectures and then we discussed articles on Fridays. But now that I was teaching it as a regular Monday-Wednesday-Friday 50-minute course, I needed to make some changes beyond just continuing the stretch out what was once just a single lecture.</p>
<p>Meanwhile, I had some issues with how assessment happened. I had weekly open-book quizzes, weekly mini-projects for homework assignments, a midterm and final, and a final project. It was a lot, and I just didn’t feel like those quizzes and tests were good assessment tools.</p>
<p>Finally, one big issue I had was that the course was too modular. The topics didn’t build upon each other as much as I’d like and each week was more or less independent of the other. This means that a student could miss two weeks of class and then jump right in without feeling behind, and I don’t think that should be the case.</p>
<p>So, I went for a long walk and had a conversation with ChatGPT to help brainstorm some ideas. While many of its ideas were no good, it did spark an idea of my own. I decided to try adding “Synthesis Days” to the course.</p>
</section>
<section id="the-synthesis-days" class="level2">
<h2 class="anchored" data-anchor-id="the-synthesis-days">The synthesis days</h2>
<p>The course was already broken up into four broad units: situated language, language variation, language attitudes, and the life cycle of language. You can see the syllabus <a href="../../downloads/250103-L452_syllabus.pdf">here</a>. So, at the end of each unit, I dedicated an entire lecture to synthesizing what we had just discussed for the past 2–3 weeks. Theses synthesis days consisted of three main components: a paper, a presentation, and a discussion.</p>
<section id="the-synthesis-paper" class="level3">
<h3 class="anchored" data-anchor-id="the-synthesis-paper">The synthesis paper</h3>
<p>Each student had to write a synthesis paper for the unit. I emphasized that this was a <em>synthesis</em>, not a summary, so if they just wrote a paper that regurgitates the various topics from that unit one paragraph at a time, they would not get a good grade. You can read the prompt <a href="../../downloads/250103_L452_synthesis_prompt.pdf">here</a>, but I emphasized that I wanted them to draw connections between topics in the unit and to see how they relate to each other. I encouraged them to incorporate examples from class as well as add their own. They needed to cover every lecture topic from that unit without dwelling too much on any one too much, which means if they were gone at any point during the unit, they’d have to play catch-up. I didn’t give them a page/word limit, but I said I’d be hard to do a good job in less than 500 words. I graded them holistically out of ten.</p>
<p>Unlike other assignments, these synthesis papers were due when class started on the synthesis days. I wanted to see how students did without getting ideas from others in the presentation or discussion.</p>
<p>I will say that students expressed how difficult it was to do these papers. Sure enough, the first unit’s synthesis papers averaged an 8.3. They often lost points for not incorporating all the topics, not having a clear narrative throughout, being too much of a summary, and not discussing the bigger picture. But, I gave detailed feedback, and the average scores went up to 9.1, then a 9.7, and then a 10.0 (yes, they all did excellent the last time!). So, it was really cool to see them grow and finally learn how to write these. However, they took a long time to grade, and these were on top of regular weekly assignments, so that was tricky for me to stay caught up.</p>
<p>I think being able to do a synthesis like this is a good skill for other areas of writing. In fact, when I graded their final papers, I found myself giving the same kind of feedback in their literature reviews as I did on the synthesis papers (“don’t dwell on one paper too much”, “I don’t see a narrative”, “avoid the one-citation-per-paragraph summary”, “discuss the bigger picture”). Next time I teach the course, I’ll have to explicitly make the connection for them that the skills acquired in these syntheses should be applied to literature reviews.</p>
<p>Overall, I liked the synthesis papers and I plan on doing them again next year. I’ll just need to make sure I can grade them on time!</p>
</section>
<section id="the-synthesis-presentation" class="level3">
<h3 class="anchored" data-anchor-id="the-synthesis-presentation">The synthesis presentation</h3>
<p>So what do we do on the synthesis day? Instead of me giving a lecture, I thought it’d be good to see students present. So, this year I had 20 students and four units, so I randomly assigned them into groups of five and randomly assigned each group to each unit. Groups were then asked each one to prepare a 20-minute synthesis lecture for their assigned unit. So on each synthesis day, we saw one group presentation. Those who presented for that unit were exempt from turning in a paper. The presentations should have been similar in style to the papers: a synthesis rather than a summary, covering all topics equally, and incorporating new and old examples.</p>
<p>The presentations were mostly okay, but I realized this is a difficult thing to do well as a group. What I mostly saw was five students each giving good stand-alone presentations back-to-back. They were less unified in their delivery than I was hoping and there was usually not much of a larger narrative or arc that permeated through the entire thing.</p>
<p>This was my first time ever doing group work and I’m not sure if I’ll keep it for next time. They were hard for the students, difficult to grade, and I’m not sure what pedagogical purpose they served.</p>
</section>
<section id="the-synthesis-discussion" class="level3">
<h3 class="anchored" data-anchor-id="the-synthesis-discussion">The synthesis discussion</h3>
<p>For the remainder of the 50-minute lecture, we broke out into small groups and discussed the unit. I asked presenters to end their lecture with a handful of questions to stimulate some discussion topics. I then distributed the five presenters among the rest of the class so they could kind of lead the discussions. I jumped from group to group, contributing ideas here and there and just listening to what they were saying.</p>
<p>I was pleasantly surprised at how well these discussions went. Pretty much everyone stayed on-track as far as I could tell. People had good ideas and it was good to see them come out in those discussions. Everyone had the synthesis fresh on their minds because they all either gave a presentation or turned in a paper, so everyone was prepared. But it was good to see people telling personal stories and how the topics from the unit give them a different perspective on what happened. I heard a few students say they enjoyed this as an end-cap to the unit as well.</p>
<p>I’ll definitely try to do discussions again next year. My one issue is that because they were not graded, I noticed attendance was lower on the synthesis days. I’ll have to find a way to encourage students to be there.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I liked these synthesis days and will probably do them again next time I teach the course. I’ll have to tweak a few things, but overall I thought it was really good.</p>
<p>I will say that one major thing about adding four synthesis lectures is that I had to account for four non-contentful lecture days. I also took the last two weeks of the course (so, the five days after Thanksgiving) and made those final presentation days. So in total, there were nine non-lecture days. Keep in mind that my first iteration of the course had just fifteen 75-minute lectures, so it’s not like there were nine lectures that were just cut out entirely. But it did mean I had to be careful about covering everything I wanted in only about 35 lecture days. But, I thought keeping the units tight and more integrated was good for me as a teacher and for the students.</p>
<p>So, overall, I think these synthesis days solved many of my issues: the course was far less modular, there were more useful assessments than quizzes and exams, and the lectures were better organized and updated with fresh content.</p>


</section>

 ]]></description>
  <category>Teaching</category>
  <guid>https://joeystanley.com/blog/synthesis_days/</guid>
  <pubDate>Fri, 03 Jan 2025 12:00:00 GMT</pubDate>
</item>
<item>
  <title>Bill Labov</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/labov/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is edited from an email that I sent out this morning to the students in my undergraduate sociolinguistics course that just finished teaching. There is so much more I could say but I wanted to keep it focused on what they might know. I hope there aren’t any inaccuracies in what I’ve written. I only knew Bill Labov from a distance but he was still an influential figure for me.</p>
</div>
</div>
<p>Dear all,</p>
<p>It is with a heavy heart that I inform you that Bill Labov—the linguist behind the fourth floor study and Martha’s Vineyard Island study and the founder of variationist sociolinguistics—passed away yesterday at the ripe age of 97 at his home with his wife by his side.</p>
<p>Looking through this semester, I mentioned Labov at least nine times. He introduced attention to speech, the observer’s paradox, and the vernacular principle to linguistics and created the sociolinguistic interview. With his dissertation in New York, he introduced the idea of systematic variation or, as he puts it, ordered heterogeneity. He was the one to point out the gender paradox. He popularized Herzog’s and Garde’s principles in the study of language change (and coined those terms). He supervised the creation of the Penn Neighborhood Corpus and supervised students’ sociolinguistic interviews around Philadelphia for decades. That corpus now serves as an invaluable resource for tracking phonetic change over time. Looking back, I’m surprised that’s all I’ve said about him, because there are so many other important ideas he’s introduced to the field.</p>
<p>He was a prolific writer and extremely involved in the field. He founded <em>Language in Society</em> in 1972, which has since become a premiere venue for sociolinguistics research. He also founded another extremely influential journal, <em>Language Variation and Change</em> and edited it for a long time. He was a former president of the Linguistic Society of America and the American Dialect Society. He has numerous books, many of which are foundational in sociolinguistics. His last one, <em>Conversations with Strangers</em>, which he wrote with his wife, was published just last year and contains stories about the awesome things he’s learned from people in the 1000+ sociolinguistic interviews he conducted. (If you’ve ever done a sociolinguistic interview, you’ll find that <em>everyone</em> has a cool story.) I happened to buy that book recently, so that’ll be what I read this evening.</p>
<p>He mentored <a href="https://academictree.org/linguistics/tree.php?pid=24968&amp;fbclid=IwZXh0bgNhZW0CMTAAAR0k0VUZutEQngweBenpabuZMw8o4-hQ_XY4Auu60uAV9q8clumQyUNAsfI_aem_a9n9R6rxPmVLJOnGmS7X2A">countless</a> students at the University of Pennsylvania, many of whom have gone on to be their own giants in sociolinguistics. Among those whose ideas I’ve brought into class include Penny Eckert (she did the Jocks vs.&nbsp;Burnouts study and is the founder of 3rd Wave Sociolinguistics and brought ideas like indexicality to sociolinguistics), John Rickford (leading figure on African American English and proponent of the Creole Origins Hypothesis of African American English), John Baugh (housing discrimination), Anne Charity-Hudley (educational linguistics and linguistic activism). Many of them have then gone to mentor other giants in sociolinguistics. I can trace my academic lineage to Labov through Penny Eckert and can call him my academic great-great-grandfather.</p>
<p>While entire <a href="https://www.bloomsbury.com/us/labov-a-guide-for-the-perplexed-9781441158529/">books</a> and <a href="https://www.oxfordbibliographies.com/display/document/obo-9780199772810/obo-9780199772810-0195.xml">annotated bibliographies</a> have been written about his scholarly work, perhaps his bigger contribution to the world is in social activism and the pursuit of linguistic justice. He not only coined the “Principle of Error Correction” and the “Principle of Debt Incurred” as nice ideas, but he lived them too: he was an early researcher of African American English and, 30 years later, testified at a senate hearing on the legitimacy of African American English in the wake of the Oakland Ebonics Controversy. He was a champion for the underdog, marginalized communities, and children and did countless acts of uncompensated work in the community, far beyond what is expected from a professor.</p>
<p>All who knew him personally describe him so positively. He regularly cites older scholars, lesser-known researchers, and students in his own and he acknowledges that many of the ideas we attribute to him actually came from someone else. He was humble in his contributions and was so happy to hear of someone proving him wrong. He was his students’ loudest cheerleader and saw the potential in them before they did themselves. He attended their extra-curricular activities and weddings, and met their friends and families. He is the kind of mentor I try to be like. <a href="https://jofrhwld.github.io/blog/posts/2024/12/2024-12-17_in-remembrance/">Here</a> is a very nice tribute by Joe Fruehwald that I think captures the kinds of things I’ve heard from his students. <a href="https://languagelog.ldc.upenn.edu/nll/?p=67399">This post in Language Log</a> also shares these sentiments. If you look up other linguists on social media right now, you’ll see numerous other similar tributes. As for me, he attended my very first conference presentation in 2015 where I talked about address forms among Latter-day Saints (which shows that even he was willing to listen to students’ work) and while I did have the opportunity to see him speak at various conferences, unfortunately, I never had a chance to meet him. So all I know about him I learned from a distance and through others’ accounts; I can’t even imagine how awesome it would have been like to take classes from him.</p>
<p>Bill Labov is the reason I became a sociolinguist. I remember learning about the fourth floor study in my intro to linguistics course and thought it was one of the most fascinating studies ever. Since then, I have read so much of his work and it has been the foundation of my own research. The first time I went to New York City, I didn’t care to see the Statue of Liberty, One World Trade Center, Rockefeller Plaza, or Central Park. No, I did a pilgrimage to Saks, Macy’s, and the building where S. Klein was located and got workers to say “fourth floor” there. I encourage you to read Labov’s own account of <a href="https://www.ling.upenn.edu/~wlabov/HowIgot.html">how he got into linguistics</a>. Interestingly, he was a chemist for over a decade before beginning linguistics in his 30s, which just goes to show the value that late bloomers, non-traditional students, and people with unique backgrounds have on academia. He was a giant of a person and the best linguist of our generation.</p>
<p>Anyway, I’ll look forward to grading your final papers today. Thanks for a great semester.</p>
<p>Joey</p>



 ]]></description>
  <category>Personal</category>
  <guid>https://joeystanley.com/blog/labov/</guid>
  <pubDate>Wed, 18 Dec 2024 15:54:00 GMT</pubDate>
</item>
<item>
  <title>A new volume in the Publications of the American Dialect Society series!</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/PADS109/</link>
  <description><![CDATA[ 





<p>I am thrilled to announce the publication of the 109th volume of the Publications of the American Dialect Society (PADS) series. This one is called “Movement, Economy, Orientation: Twentieth-Century Shifts in North American Language” and was edited by me, Peggy Renwick, and Monica Nesbitt. In it, you’ll find our introduction and then eight fantastic chapters by phenomenal contributors. I am so fortunate to have worked with such amazing collaborators.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can find the volume online <a href="https://read.dukeupress.edu/pads/issue/109/1">here</a>!</p>
</div>
</div>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">We were not involved in the cover design, but I love the color scheme on this one!</span></div></div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/PADS109/front_cover.jpeg" class="img-fluid" width="360"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/PADS109/back_cover.jpeg" class="img-fluid" width="360"></p>
</div>
</div>
</div>
<div class="page-columns page-full"><p>The premise of the volume came from something I read Monica write in her 2021 paper in <em>American Speech</em>. She wrote</p><div class="no-row-height column-margin column-container"><span class="margin-aside">Nesbitt, Monica. 2021. The Rise and Fall of the Northern Cities Shift.” <em>American Speech</em> 96(3). 332–70. <a href="https://doi.org/10.1215/00031283-8791754">https://doi.org/10.1215/00031283-8791754</a>.</span></div></div>
<blockquote class="blockquote">
<p>“[T]he Baby Boomer–Gen X transition appears to be a pivotal transition throughout the country… [and] appears to be of great importance to North American English dialects in general.”</p>
</blockquote>
<p>Perhaps one reason why this stood out to me (other than the fact that the Monica’s entire paper is just brilliant writing and I’m lucky have collaborated with her) is it very well describes what me and colleagues were finding in the South. Around this time, Peggy Renwick, Jon Forrest, and I were looking at our data from seven generations of Georgians, and—I believe it was Peggy who spotted it first—we noticed that the generation with the most canonical Southern Vowel Shift was the Baby Boomers. Monica continues:</p>
<blockquote class="blockquote">
<p>“As future studies look to the Baby Boomer–Gen X transition as a pivotal moment of linguistic change, we must also consider other important social changes of the period, such as the increase in (geographic and economic) mobility, the rise of television and mediated speech, and so on. It is my contention that all of these aspects of lifestyle changes have contributed to the drastic changes to the North American regional map that appear to be unfolding.”</p>
</blockquote>
<p>What this volume does then is it provides a coherent explanation for these simultaneous language changes being found in a lot of discontinuous places. In our introduction, we discuss population shifts and economic changes through out the 20th Century with a focus on that Boomer–Gen X transition around the 1950s and 1960s. We also discuss how people’s orientations towards or away from places gets mixed into all of this. We briefly summarize generational theory and highlight many sociolinguistics studies that have found that language variation can be in part predicted by generational cohort. The eight chapters that make up the bulk of the book each contain case studies that show evidence for these changes across different speech communities and linguistic phenomena. Some provide evidence for the Boomer–Gen X transition. Others provide evidence that more local changes were stronger influences on language. Overall, the volume is a cohesive set of studies that illustrate the kinds of linguistic changes that have happened in the mid-to-late 20th Century in North American English and the kinds of social forces that likely influenced those changes. Here’s a list of the chapters in the volume ▼</p>
<p><img src="https://joeystanley.com/blog/PADS109/contents.jpeg" class="img-fluid" width="360"></p>
<p>I think it’s really useful to have a volume specifically dedicated to an observation that’s being made in lots of independent speech communities. Since we are not sociologists, demographers, economists, or historians, each linguist who writes about these mid-century changes can only speculate about what kinds of social forces were at play. But having it all combined into one volume I think makes it easier to connect the dots and make connections between what would otherwise have been isolated studies. I hope the volume is useful for you. Each chapter provides a rich case study of changes in a particular speech community and can stand on its own as an in-depth documentation of language changes in the 20th Century. But when combined, particularly with the overview that the editors have written in the introduction, I think you’ll get a greater sense of the larger pattern being described.</p>
<section id="notes-about-the-introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="notes-about-the-introduction">Notes about the Introduction</h2>
<p>Writing the Introduction was one of the academically challenging things I’ve been involved in. Part of the reason was because it’s the first time I’ve written something that wasn’t a “study” in the sense of providing novel results from some dataset, but rather an overview and synthesis of a larger topic. This involved looking outside of linguistics to find evidence for the arguments that we make. Another reason why it was so difficult for me personally is because it was entirely written while I was on parental leave. My time, access to a university library, and mental capacity to put towards this were all extremely limited. I’m so grateful for my co-authors generally, but also for their willingness to step up and cover for me while I was busy being unavailable and unhelpful. There’s no way the introduction or volume could have turned as as well as it did without them.</p>
<p>We knew that we had to cite a tremendous amount of research to make the case that the ideas we’re talking about are found over and over. In my own style of writing, I tend to be pretty citation-heavy anyway, but it looks like the references section for just the introduction ended up being nine pages long! But, while summarizing linguistics research is one thing, summarizing other research is so much tricker. Some parts of the introduction were divvied up, and one of my tasks was to write about how the economy shifted in the 20th Century and how that might have affected language. I’m not an economist or historian so this was new territory for me. (I had to relearn things I was taught in middle and high school social studies classes!) I thought that there’d be plentiful books on the history of 20th Century economics in the United States, but I had a hard time finding any. I had to explore a part of the library I didn’t know existed, and while I couldn’t find a summary with just the right amount of detail that I needed and could understand, I was also overwhelmed with the amount of related material. So summarizing a topic I knew little about and tying it into linguistics was tricky and I hope I did it justice.</p>
<div class="page-columns page-full"><p>I also wrote most of the section on generational theory. I’ll be the first to admit—and I do so in the chapter—that generational theory verges on the territory of pseudoscience, especially if you look at the strong positions held by Strauss &amp; Howe (1991). However, recent researchers like Jean Twenge provide compelling data-driven evidence for the idea that generational cohorts are not a completely bogus idea. In the end, that section about generational theory—while <em>much</em> shorter than what I originally wrote—may be helpful for linguists who divide their participants into generational cohorts to track stepwise language change. Of course it’s best to model age as a non-linear continuous variable, if you have enough data to do (see Fruehwald 2021). But for most people, the next best thing is to group participants into discrete generational cohorts—either societal ones like Boomers, Gen Xers, Millennials, and Gen Zers, or more locally defined ones—and modeling those as an ordinal variable.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">Strauss, William, and Neil Howe. Generations: The History of America’s Future, 1584 to 2069. New York: William Morrow and Company, Inc., 1991.</span><span class="margin-aside">Twenge, Jean M. <em>Generations: The Real Differences Between Gen Z, Millennials, Gen X, Boomers, and Silents—and What They Mean for America’s Future</em>. New York: Atria Books, 2023.</span><span class="margin-aside">Fruehwald, Josef. 2017. “Generations, Lifespans, and the Zeitgeist.” <em>Language Variation and Change</em> 29(1): 1–27. DOI <a href="https://doi.org/10.1017/S0954394517000060">10.1017/S0954394517000060</a>.</span></div></div>
<div class="page-columns page-full"><p>Another section I wrote was towards the end about Standard Language Ideology. Katie Carmichael tipped me off about Bonfiglio (2002) during a Q&amp;A session at ADS in 2023. While the writing style is a bit different than what I’m used to, it is a fascinating read and has completely changed my views of what Standard American English really is. I don’t really offer any new insight beyond what Bonfiglio discusses, but I think its important to bring up the racist and xenophobic backstory of what Standard American English is a little more.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">Bonfiglio, Thomas Paul. <em>Race and the Rise of Standard American</em>. Berlin: Mouton De Gruyter, 2002.</span></div></div>
<p>Finally, I forgot that the book immortalizes a cute thing my toddler does. I mentioned offhand that he says some words in an Australian accent because of the show <em>Bluey</em>. I thought it got cut, so I was delighted to see that little nugget make its way to the final edition.</p>
</section>
<section id="behind-the-scenes-look-at-the-volumes-development" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="behind-the-scenes-look-at-the-volumes-development">Behind-the-scenes look at the volume’s development</h2>
<p>I think it’s fun to read about the background of papers and projects, so I thought I share some insight into how this book came to be.</p>
<div class="page-columns page-full"><p>On January 3rd, 2022, I was in a meeting over Zoom with my Georgia English research team (Peggy Renwick, Jon Forrest, and Lelia Glass), presumably preparing for our ADS presentation a week later. Among the Georgians we studied, we noticed a major change in the speech of Baby Boomers compared to Gen Xers. We’ve noticed this in multiple speech communities now and Jon mentioned offhand that such a topic would make for a great PADS volume.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">You can read about those findings in <a href="https://www.cambridge.org/core/journals/language-variation-and-change/article/boomer-peak-or-gen-x-cliff-from-svs-to-lbms-in-georgia-english/6AEA44E9263DFAE376F3BB20E087E5F9">our 2023 LVC paper</a>.</span></div></div>
<p>A week later at the ADS, I noticed this mentioned in multiple presentations. Aaron Dinkin said something like, “‘and then the pattern goes away after the boomers’ is a common observation”. So, I started to discuss the observation more broadly with a few people during and after the conference. I reached out to editors of others PADS volumes people about the feasibility of editing a volume pre-tenure, and it didn’t sound too bad. Valerie Fridland, for example, said it’s not a tremendous amount of work, but there are bursts of intense activity (soliciting contributors, reviewing) and then long periods of nothing. I also wrote to Natalie Schilling, the series editor, to soft-pitch the idea of this being a PADS volume. After lots of emails back and forth and the encouragement of many people, I decided I’d spearhead the project by around January 9th, 2022.</p>
<p>By mid-February 2022, Peggy and Monica were on board to be co-editors of the volume. Peggy is a longtime collaborator of mine and Monica’s 2021 paper is what spurred the idea in the first place. (After my pitch to Monica, her first question was, “How many volumes did you have in mind?” We could have included <em>many</em> more chapters but we just couldn’t!) We then put together a list of potential contributors and painfully whittled it down to those that had the greatest geographic, social, and linguistic coverage.</p>
<p>On May 5th, 2022, the three of us officially pitched the idea to Natalie. She gave a soft approval and then asked for a list of contributors. So, we started reaching out to people, inviting them to contribute. By the end of that month, we had a tentative list of authors, topics, a shared GoogleDrive folder, and a greenlight from PADS. We were ready to go!</p>
<p>For reference, and only because I know it has been adopted by at least one edited volume in progress, here is the timeline we set up. This was borrowed from Valerie Fridland, although with a little extra wiggle room in some places since we had well over two years from the start to the intended publication date.</p>
<ul>
<li>May 2022: Invite contributors.</li>
<li>September 1, 2022 (three months later): Submit an abstract.</li>
<li>May 15, 2023 (nine months later): Submit a manuscript draft.</li>
<li>July 15, 2023 (two months later): Editors return comments to authors. Editors write Introduction.</li>
<li>December 13, 2023 (five months later): Authors return revisions. Editors compile everything and submit to Series Editor for external review. (Note that this phase took about two months longer than we anticipated, mostly because the introduction was a beast to write and I was parental leave at the time.)</li>
<li>May 16, 2024 (five months later): External reviews received and sent to authors.</li>
<li>June 24, 2024 (six weeks later): Revisions returned to editors. Entire volume submitted to PADS.</li>
<li>September-ish, 2024 (three months later): Proofs received from Duke University Press. Author publication agreements signed. (Copyediting and some slight changes here and there happened in August.)</li>
<li>Mid-December 2024 (three months later): Volume is shipped and made available online.</li>
</ul>
<p>So, very broadly, we gave people about a year to write the chapters. It took a little over a year to do two rounds of revisions (an internal one by the editors and an external one facilitated by the Series Editor). About six months after submitting the whole thing, it was published. I felt like this was a comfortable timeline. It had its bouts of intense activity, but that’s to be expected, and overall, it wasn’t a crazy amount of work, partially because there were three co-editors. If I do an edited volume in the future, I’ll likely adopt a similar timeline.</p>


</section>

 ]]></description>
  <category>Research</category>
  <category>Publications</category>
  <guid>https://joeystanley.com/blog/PADS109/</guid>
  <pubDate>Wed, 11 Dec 2024 15:12:00 GMT</pubDate>
</item>
<item>
  <title>NWAV52</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/nwav52/</link>
  <description><![CDATA[ 





<p>This weekend, I’m at the 52nd New Ways of Analyzing Variation conference in Miami Beach, Florida. See below for summaries and files from my two presentations.</p>
<section id="fridays-presentation-on-prelaterals-in-georgia-english" class="level2">
<h2 class="anchored" data-anchor-id="fridays-presentation-on-prelaterals-in-georgia-english">Friday’s presentation on prelaterals in Georgia English</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the slides <a href="../../downloads/241108-NWAV2024_GA-Prelats.pptx">here</a>!</p>
</div>
</div>
<p>My research team, including Jon Forrest, Peggy Renwick, and Lelia Glass, presented yet again at NWAV with our talk called “Natural Class Reorganization over Apparent Time by Prelateral /u/ and /oʊ/ in Georgia.” We focused on prelateral vowels and how they’ve changed over time. Focusing just on /ul/ and /ol/, what we’re calling <a href="../../blog/extending-wells-lexical-sets-to-prelateral-vowels"><sc>spool</sc> and <sc>jolt</sc></a>, we found that their relationship with their preobstruent counterparts has changed over time in Georgia English. Earlier generations had them slightly backer than their preobstruent counterparts, likely due to mere articulatory consequences. Evidence for this comes from the fact that <sc>spool</sc> is as front as <sc>boot</sc> in our oldest speakers. Later generations separate them quite a lot. For Black speakers it was seen in Gen Zers as they began fronting <sc>boot</sc>; for White speakers it was as the prelateral vowels backed even more. We therefore describe a reorganization of natural classes and the birth of a new natural class, prelaterals, in this speech community.</p>
</section>
<section id="saturdays-presentation-on-ls-and-lθ-closure-durations" class="level2">
<h2 class="anchored" data-anchor-id="saturdays-presentation-on-ls-and-lθ-closure-durations">Saturday’s presentation on /ls/ and /lθ/ closure durations</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the slides <a href="../../downloads/241109-NWAV_ClosureDurations.pdf">here</a>!</p>
</div>
</div>
<p>Hallie Davidson is working with me on our project called, “Social Meaning of Closure Duration in the Affrication of /ls/ and /lθ/ in Utah English.” In some previous work, I noticed that some people in Utah have closures in /lθ/ clusters as in <em>health</em>, <em>filth</em>, or <em>wealth</em> and that there might be some correlations between longer closures and membership in some social groups. Hallie is testing that specifically by setting up a matched-guise test and seeing if people respond differently to longer durations. This is a “Project Launch” poster, so we welcome any feedback on what questions to ask or how to ensure that our recordings are as natural as possible. We suspect that longer closures will index some social meaning among Utahns. If we do find that, this might be the first time that that particular acoustic cue—closure durations—have shown to be socially meaningful in a language that doesn’t have geminate stops!</p>


</section>

 ]]></description>
  <category>Conferences</category>
  <category>Presentations</category>
  <category>Research</category>
  <guid>https://joeystanley.com/blog/nwav52/</guid>
  <pubDate>Mon, 14 Oct 2024 03:30:00 GMT</pubDate>
</item>
<item>
  <title>AACL 2024</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/aacl2024/</link>
  <description><![CDATA[ 





<p>Today, some collaborative work between Brett Hashimoto, me, and Jack Grieve is being presented at the <a href="https://sites.google.com/view/aacl-2024/home?authuser=0">American Association for Corpus Linguistics Conference</a> at the University of Oregon.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the slides <a href="../../downloads/240913-AACL_YouTube.pdf">here</a>!</p>
</div>
</div>
<p>We use the Corpus of North American Spoken English (CoNASE; Coats 2019, 2023), which has YouTube transcriptions of over 300,000 geotagged regional and local government videos from across the US and Canada. It represents over 150,000 hours of spoken language and 1.2 billion words of text. We follow Grieve’s (2016) methods and extract information from 135 grammatical alternation variables. We then ran spatial stats to identify areas where those alternations cluster together. Basically, we’re using YouTube to identify regional grammatical variation. Our presentation today could only show a few of the over 200 maps that we’ve generated and here’s just one of my favorites.</p>
<p><img src="https://joeystanley.com/blog/aacl2024/slide10.png" class="img-fluid"></p>
<p>We’re just getting started in our analysis of this unbelievably big and rich dataset. Stay tuned for many more additional findings in future presentations!</p>



 ]]></description>
  <category>Conferences</category>
  <category>Presentations</category>
  <category>Research</category>
  <guid>https://joeystanley.com/blog/aacl2024/</guid>
  <pubDate>Thu, 12 Sep 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>New publication on Missionary Voice in Proceedings of the Linguistic Society of America</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/missionary-voice/</link>
  <description><![CDATA[ 





<p>I’m happy to announce that <a href="https://journals.linguisticsociety.org/proceedings/index.php/PLSA/article/view/5701">a new paper</a> by me, Josh Stevenson, and Wendy Baker-Smemoe called “The Missionary Voice: Perceptions of an Emerging Register” has been published in <em>Proceedings of the Linguistic Society of America</em>! This is based on our <a href="../../downloads/240104-LSA2024_missionary_script.pdf">LSA presentation</a> in 2023, which ultimately had its origin in Josh Steveson’s <a href="https://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=1336&amp;context=studentpub_uht">BYU Undergraduate Honor’s Thesis</a>. This has been a fun project and I’m excited to see this published.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Media Coverage
</div>
</div>
<div class="callout-body-container callout-body">
<p>See <a href="https://ling.byu.edu/missionary-voice-real-or-fake">Rachel Bowden’s write-up</a> on this article from June 2024 published on the BYU linguistics department website.</p>
<p>See also <a href="https://magazine.byu.edu/article/missionary-voice-byu-research/">Jedidiah A. Flores’ article</a> in the Fall 2024 issue of <em>Y Magazine</em>, including <a href="https://www.youtube.com/watch?v=UIcYzTiONRk">a brief video</a>.</p>
</div>
</div>
<p>Josh started has been explore a particular way of speaking that is typical of missionaries of the Church of Jesus Christ of Latter-day Saints. In fact, in my very first semester at BYU (Fall of 2020), his final paper was on the topic, so he’s been working on this for a while. Later, he had this experience, which he tells in his thesis:</p>
<blockquote class="blockquote">
<p>In early January 2022, my sister Megan—then serving as a missionary for the LDS Church in Finland—sent me a voice memo (transcribed below) about another voice memo that she had recently received from a childhood friend who was also on a mission at the time. Megan’s words anecdotally illustrate the sense I’d had that something interesting was happening at the nexus of missionary culture and language: “Oh my gosh Josh, OK [my friend] just sent me a voice memo and I can’t. It doesn’t sound like her. She changed to a “missionary voice.” It is insane. I can’t even explain it. Oh my gosh, like at first I didn’t even recognize it was her. I just want to submit [her] voice memo to you. I can’t even listen to it; it’s painful because she’s so cute but it sounds— (Her voice then trails off.)”</p>
</blockquote>
<p>Josh turned this idea into a more complete study as his honor’s thesis by specifically trying to see whether Latter-day Saints can accurately identify a missionary by their voice alone. This study became Study 2 in the <em>PLSA</em> paper that came out this week more-or-less as-is, though in an abbreviated form. The gist is that people generally did <em>not</em> do a good job at guessing whether a person is a missionary or not. For the LSA talk and this paper, we took it a step further though and looked at the voices of people who people thought were missionaries, regardless of whether they actually were. (You can listen to the recordings we analyzed <a href="../../data/missionary_voice/">here</a>!) We put together a tentative list of linguistic features that are and are not a part of Missionary Voice. That became Table 2 of the paper.</p>
<p>Around the time Josh was starting his thesis, which I chaired with Wendy Baker-Smemoe as a reader, I was starting some data collection that invovled asking people about various aspects of the Latter-day Saint religiolect, including whether there’s a “Mormonese”, a “Relief Society voice” (more on that later), and a “General Authority voice”. For fun, I threw in a question about Missionary Voice because Josh’s thesis intrigued me and I wanted to see what people might say. I ended up with a lot of really interesting comments. For the most part, people felt like Missionary Voice was generally good, compassionate, lively, and religious. As one person put it, “everything is like a ray of sunshine.” This brief analysis (more like a compilation of adjectives) eventually became Study 1 in the <em>PLSA</em> paper. I think this study really support each other well.</p>
<p>At the end of the paper, we speculated about how Missionary Voice came to be, couched in 3rd Wave sociolinguistic theory. We suspect it originally started as a generic presentation-mode voice, particularly a presentation-mode when the material is memorized. Missionaries are not asked to memorize things now, but the style may have been passed down from more experienced missionaries to less experienced ones in micro-generations, changing along the way and acquiring additional sociolinguistic meaning. As one person put it, “It’s what spiritual discussions are supposed to sound like,” which I think says a lot about its indexicality and, more broadly, how language can shape contexts.</p>
<div id="fig-missionaries" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-missionaries-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/missionary-voice/sisters.jpg" class="img-fluid figure-img" width="360"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/missionary-voice/elders.png" class="img-fluid figure-img" width="360"></p>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-missionaries-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Here are some images I liked that I found of missionaries and used in the LSA talk. I’ll put them here just to add a visual component to this page :)
</figcaption>
</figure>
</div>
<section id="fun-background" class="level2">
<h2 class="anchored" data-anchor-id="fun-background">Fun background</h2>
<p>I think it’s fun to learn a little background about papers, so here’s a little bit of what happened behind the scenes. Josh finished his thesis and graduated. I encouraged him to submit it to LSA, which he did. I eventually presented for him because when he saw the price tag of LSA’s registration, he decided he wasn’t going to go. I had fun putting the talk together and giving it. But, I didn’t have a clear venue for where to publish it. I had (and still) have a few other higher-priority papers I’d like to send out, so this was low on my to-do list.</p>
<p>Anyway, so around mid-March—I believe it was a Tuesday—I get a regular newsletter from LSA saying, “Hey, if you haven’t submitted your manuscripts to the Proceedings, this week is the last chance to do so!” Apparently I hadn’t been reading previous newsletters carefully enough because that was the first I had heard of it! Well, I figured if I didn’t submit this paper to <em>PLSA</em>, it may never get submitted. So I decided to go for it.</p>
<p>I had a few things with classes that day, but starting Wednesday afternoon, I began writing. I started off with the script from my slides and adapted it to fit a more appropriate style for written papers. About 36 hours later, I had the full manuscript done. I was fortunate to not have anything scheduled on that Thursday, so I spent most of the day writing, going through the original data, and creating a few plots. I sent it to Wendy and Josh for their approval and they made a few tweaks. And then we sent it off! So, that Tuesday morning I had no idea I’d be submitting a paper that week, and by Friday it was done. Wild.</p>


</section>

 ]]></description>
  <category>Mormonese</category>
  <category>Research</category>
  <category>Publications</category>
  <category>Students</category>
  <guid>https://joeystanley.com/blog/missionary-voice/</guid>
  <pubDate>Thu, 16 May 2024 15:12:00 GMT</pubDate>
</item>
<item>
  <title>Kohler Tapes (Update #2)</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/kohler-tapes-update2/</link>
  <description><![CDATA[ 





<p>In 2021, I acquired a huge collection of cassette tapes I’ve called the Kohler tapes. In my <a href="../../blog/kohler-tapes">first blog</a> post about it, I geeked out about how much data I had collected. A few months later, I gave an <a href="../../blog/kohler-tapes-update">update</a> since at that point they were all digitized and cataloged, and I had listened to a couple dozen. I’m excited to give a second update with the news that I’ve just gotten a grant to cover the costs of processing all these tapes!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>See <a href="../../blog/kohler-tapes-update3">this post</a> from June 3, 2025 after I got all the data processed!</p>
</div>
</div>
<section id="progress-since-2021" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="progress-since-2021">Progress since 2021</h2>
<p>At the end of my previous update, I mentioned that I had gotten a John Topham and Susan Redd Butler BYU Faculty Research Award from the <a href="https://reddcenter.byu.edu/">Redd Center for Western Studies</a>. That provided just enough funds to hire an RA to help with metadata extraction. As I’ve mentioned already, a great many of the tapes start off with the student interviewer staying their name and the date, and then they ask basic demographic questions about their interviewee. It’s important that I know as much of the metadata about these interviewees as I can so that I can prioritize which tapes I should process first.</p>
<p>So, my RA listened to the first five or so minutes of each tape and wrote down as much metadata as they could. They then looked up that person on <a href="https://www.familysearch.org/en/united-states/">FamilySearch</a>, a genealogical database. If they could find the person, they could then flesh out the rest of their basic metadata as well as get tons of other information like places they’ve lived and their family ancestry. Not all interviews had good metadata and not all tapes had much information written on the outside, but between those two sources, my RA was able to get full metadata for 505 of 751 people (67%), which is pretty good if you ask me. I can now give updated version of figures I had in my last update that summarized a little bit more about these people.</p>
<section id="gender-split-56-44" class="level3">
<h3 class="anchored" data-anchor-id="gender-split-56-44">Gender split: 56%-44%</h3>
<p>Only male and female genders are reported. There are 448 women (56%) and 346 men (44%).</p>
</section>
<section id="birth-years-18921953" class="level3">
<h3 class="anchored" data-anchor-id="birth-years-18921953">Birth Years: 1892–1953</h3>
<p>I have birth years for 527 people. They range from 1892 to 1953, with both the median and average birth year being 1919. Previously, I only went back to 1905, so this extends that range a little bit. Here’s an updated plot showing the distribution of birth years.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/kohler-tapes-update2/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="624"></p>
</figure>
</div>
</div>
</div>
<p>This is a pretty satisfying bell curve if you ask me. It makes sense that we’d see a distribution like that: these people were grandparents (or around that age) of the eighth grade interviewees between 1986 and 2001. I predicted early on before seeing this metadata that most people would be born between 1900 and 1940. That turned out to be pretty spot on. In fact, a full 69% of people are in the GI generation, which is 1908–1928, and there are only five Baby Boomers. So, this is pretty cool because these people are primarily the current oldest generation’s parents. Unfortunately, it means I won’t be able to look at much change over time using just this collection, but it’ll provide a nice point of comparison for other data.</p>
</section>
<section id="place-of-birth-still-primarily-wasatch-county" class="level3">
<h3 class="anchored" data-anchor-id="place-of-birth-still-primarily-wasatch-county">Place of Birth: Still primarily Wasatch County</h3>
<p>In my previous post, which was based on just 28 people, I found that people were mostly from Wasatch County. That makes sense since the interviews took place in Heber, the seat of Wasatch County. But, with more complete metadata, I see that there are many, many more places represented.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://joeystanley.com/blog/kohler-tapes-update2/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="624"></p>
</figure>
</div>
</div>
</div>
<p>47% of the people are from Wasatch County, and 22% of the total are from Heber. Interestingly, the second-most common category was people born outside of Utah. Salt Lake County is next (most of those are from Salt Lake City proper), which makes sense since it’s the most populus county and is pretty nearby. Utah County (most of those are from Provo) is next, and is just down Provo Canyon and is on the other side of Mount Timpanogos. Summit County (primarily folks from Park City), is just north of Wasatch County and is next.</p>
<p>I mentioned last time that I suspect a significant proportion of Heber is represented in this collection. The 1940 Census had 2,748 people. I have data from 128 of them. That’s only 4.6% of them. BUT, that’s not any 128 people, that’s 128 <em>young</em> people. If I had more census-data-hacking skills, I’d give more specific details about the proportion of Heber by age group, but it’s probably a decent proportion.</p>
<p>Combing through the specific birth places, there were three people born in ghost towns!</p>
<ul>
<li>One person was born in <a href="https://en.wikipedia.org/wiki/Bingham_Canyon,_Utah">Bingham Canyon</a>, which is a town that once existed in southwest Salt Lake County. It not only no longer exists, but the land it was built on is literally gone. It has been completely devoured by <a href="https://en.wikipedia.org/wiki/Bingham_Canyon_Mine">Bingham Canyon Mine</a>.</li>
<li>One person was born in <a href="https://en.wikipedia.org/wiki/Victor,_Utah">Victor, Emory County</a>. This town only existed from 1910 and 1920. According to Wikipedia, it was founded when a nearby dam broke and residents of the nearby town of Desert Lake relocated to more fertile area. Turns out it wasn’t a great place, so they abandoned it.</li>
<li>One person was born in <a href="https://en.wikipedia.org/wiki/Rockport,_Utah">Rockport, Summit County</a>, a town that was inhabited for nearly a century before the Rockpoint Reservoir was created and now covers almost the whole site.</li>
<li>I guess the opposite case is the person born in <a href="https://en.wikipedia.org/wiki/Vineyard,_Utah">Vineyard</a>. As of the 2010 Census, there were just 139 people who lived in this town close to Provo. Since 2012 though, the town has exploded into since then to over 100 times that size. The area has been called Vineyard since 1899 and one person was born there in 1914.</li>
</ul>
<p>I don’t know what to do dialectologically for people born in ghost towns, especially that person from a town that only existed for 10 years. But it’s kinda fun to think about what the variety there was like or what it could have been like.</p>
</section>
<section id="what-to-do-with-this-information" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="what-to-do-with-this-information">What to do with this information?</h3>
<p>Okay, so that’s where things have been for about two years, thanks to the hard work of an RA. With this information, I have a better idea of the nature of this collection.</p>
<p>One of the main reasons I wanted this complete picture of the demographics is so that I could start to narrow down which tapes I should transcribe first. There are 751 tapes and limited resources, so I don’t want to just start transcribing them randomly. Since the collection is so large, I have the luxury of picking out a nice sample to start with. For example, I could select a relatively homogeneous group and go with people from Heber born within a five year range. Or, I could choose two people from each county and get a wide sample of Utah.</p>
<p>I think my priority for now will be to compare Heber to Wallsburg. Heber is the seat of Wasatch County and while it has grown a lot since the 2002 Olympics, it historically has been a small town. But, Wallsburg is a smaller nearby, tucked away two mountains outside of Heber Valley.</p>
<p><img src="https://joeystanley.com/blog/kohler-tapes-update2/heber_to_wallsburg.png" class="img-fluid" width="400"></p>
<div class="page-columns page-full"><p>Why Wallsburg? Well, when I did fieldwork in Heber in 2018, I heard that Wallsburgers were made fun of in school for being the country bumpkins or whatever. And when I introduced myself as a linguist studying Wasatch County, it seems like everyone in Heber I talked to said I needed to go down to Wallsburg (“That’s where the <em>real</em> Utah accent is!”) So I went down there, knocked a few doors asking to interview people, and eventually found a nice older woman who had lived there most of her life. Sure enough, pretty much every feature of Utah English I was studying she had to the max. So, if she’s representative of her town, there may really be linguistic differences between Heber and Wallsburg!</p><div class="no-row-height column-margin column-container"><span class="margin-aside">You can hear some of her speech <a href="https://joeystanley.com/blog/idaho-montana-wyoming-and-utah-english-survey-results/index.html#thr">here</a>!</span></div></div>
<p>Anyway, I’ve already got a list of the first dozen or so tapes I’d like to get transcribed. It’s 12 women born between 1908 and 1927 with six from Wallsburg and six from Heber. It should be a nice comparison and a good first look at what this collection has to offer. (Stay tuned ADS 2025!)</p>
</section>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>Okay, so that’s where I’ve been sitting on for about a year or so. But, staring down the barrel of hundreds of hours of audio is daunting, and I never really made much progress on this project since then. However, recently, I met a student who has connections to Heber and was interested in working on the collection. So, I applied for a the Annaley Naegle Redd Assistantship from <a href="https://reddcenter.byu.edu/">Redd Center for Western Studies</a> (the same folks that funded my earlier RA) to fund them for a few semesters. And I found out today that I will be awarded the grant! Hooray!</p>
<p>As I mentioned in my last post, to transcribe all of these tapes manually, I estimated it would take about $100,000 and 14 student workers two years of time. My grant is certainly not that much! BUT, I don’t think I’ll need that much anymore!</p>
<p>The main bottleneck in sociolinguistic data processing is transcription. Once something is transcribed, we can then send it through forced alignment and formant extraction without much problem. But automatic transcribers haven’t been good enough for sociolinguists’ needs. But, just in the past year, some interesting possibilities have opened up thanks to AI. In particular, OpenAI’s Whisper program is accessible via an R package. I’ve played around with it on some of these tapes and the result is pretty good.</p>
<p>So, this semester I’ve been working on a fully automated pipeline that takes raw audio, transcribes it at the utterance-level with Whsiper, converts the output to a Praat TextGrid, sends that to the Montreal Forced Aligner, sends that output to FastTrack, and then spits out a spreadsheet of formant measurements. It takes a few scripts between each step to massage the output into a format that the next step likes, but I got a proof-of-concept working. From raw audio to vowel plot, it takes about 10 minutes.</p>
<p>Assuming I can get it all working well, I won’t need $100,000 to have manual transcriptions. Instead, I can have students send the files down this pipeline and check the automatic transcription instead. This means they can work through tapes faster and process more data in far less time. So, with this grant, if everything goes well, I’ll be able to process a significant chunk of the Kohler Tapes!</p>
<p>So that’s it for now. Stay tuned for more updates and soon enough you’ll see some actual linguistic results at conferences and in publications!</p>


</section>

 ]]></description>
  <category>Kohler Tapes</category>
  <category>Research</category>
  <category>Utah</category>
  <guid>https://joeystanley.com/blog/kohler-tapes-update2/</guid>
  <pubDate>Fri, 26 Apr 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>BYU Students’ Evaluations of Swear Words</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/swearing/</link>
  <description><![CDATA[ 





<p>This year, I’ve been participating in Chris Rogers’ <a href="https://ling.byu.edu/language-science-and-exploration-research-group">Langauge Science and Exploration Group</a>. This month, we talked about slang, taboo, and subversive language. For my mini-project, a few of us conducted an informal survey about swear words and other taboo terms. The survey had a list of about 30 words of varying degrees of severity. I then asked them to indicate the inappropriateness of each word, from “completely” to “not at all”. I tallied up the responses and put them in order from overall most inappropriate to least. We sent it out to people in the BYU community and to other members of the Church of Jesus Christ of Latter-day Saints.</p>
<p>Here are the results:</p>
<p><img src="https://joeystanley.com/blog/swearing/swearing.jpeg" class="img-fluid"></p>
<p>There’s a lot to dissect here, and I won’t overanalyze it too much because it’s so informal and based on a small sample size. But, what I will say is that it’s interesting how high words the words <em>Jesus</em> and <em>god</em> are ranked—this is something that is likely unique to the BYU community and would not be found in too many other places!</p>



 ]]></description>
  <category>Side Projects</category>
  <guid>https://joeystanley.com/blog/swearing/</guid>
  <pubDate>Fri, 08 Mar 2024 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Research Pipeline</title>
  <dc:creator>Joey Stanley</dc:creator>
  <link>https://joeystanley.com/blog/research-pipeline/</link>
  <description><![CDATA[ 





<p>As of this week, I am now halfway through my fourth year of working at Brigham Young University. I successfully passed my third-year review earlier this year, and I’m starting to think about tenure, or what BYU calls tenure, “Continuing Faculty Status” (CFS). I thought I’d take some time and write about the process I use for keeping track of my research and publications to help me stay on track towards tenure.</p>
<section id="the-need-for-a-system" class="level2">
<h2 class="anchored" data-anchor-id="the-need-for-a-system">The need for a system</h2>
<p>In my first semester here, I realized quickly that I needed a system to keep track of my research. I had some leftover projects from grad school that were in various stages of completion and that I wanted to get finished. I was also beginning some new research as well, some solo, some with students, and some with collaborators. It was getting to the point where I couldn’t immediately remember all the projects I was working on. I knew that if I wasn’t diligent about keeping up with them, then some would fall through the cracks.</p>
</section>
<section id="the-research-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="the-research-pipeline">The Research Pipeline</h2>
<p>It just so happens that I stumbled across what really turned out to be the perfect solution for me just a month into my first year. The paper is “Managing your Research Pipeline,” by Matthew J. Lebo, published in the <em>American Political Science Association</em> in 2016 (DOI: <a href="https://doi.org/10.1017/S1049096516000160">10.1017/S1049096516000160</a>). In it, Lebo describes a system that he uses to keep track of his research pipeline. It is an ideal solution for my brain and organizational style and I have now been using it consistently for three years now.</p>
<p>The system is based on the premise that publishing a single academic paper can be a daunting task. And if your goal is to publish, say, six papers by the time you go up for tenure, then that task is so much scarier. Oftentimes, when I’m faced with too daunting of a task, I just don’t do it, even if I need to! So, rather than have one very large goal of “publish a paper”, Lebo breaks it down into seven sub-goals:</p>
<ul>
<li><em>Stage 7</em> - You have a research idea.</li>
<li><em>Stage 6</em> - IRB is completed, data is collected, and analysis is finished. You have everything you need to start writing. Depending on the nature of the data collection—like if you’re running a new experiment or need to otherwise collect brand new data—it might take a <em>long</em> time to get from Stage 7 to Stage 6. If you’re using an existing dataset or reprocessing something old, it might take less time.</li>
<li><em>Stage 5</em> - The paper has been written up as a (500-word) abstract and has been submitted to a conference. In the original article, Lebo suggests that you’ve reached Stage 5 if you have a full draft of the manuscript. In his field, it must be more common to have a paper drafted before going to a conference. Since that’s not how my workflow has ever been, I’ve changed it to having an abstract. To me, an abstract is a good fit here because it means I have an outline, at least a brief lit review, a coherent presentation of the results, and contextualization with other studies.<br>
</li>
<li><em>Stage 4</em> - The paper is presented at a conference. This is a large step from Stage 5 because it means I have basically the entire paper but in a powerpoint format. This includes figures, the best examples, argumentation, greater impact, etc.</li>
<li><em>Stage 3</em> - The paper is submitted to a journal. In my experience so far, the maw between Stage 4 and Stage 3 is huge. I can crank out a conference talk without too much work. But actually sitting down and turning that conference talk into a paper is a huge task. Even if the paper sticks very closely to the original presentation, it’s a lot of work. For me, advancing to Stage 3 is cause for celebration.</li>
<li><em>Stage 2</em> - You get an R&amp;R from the journal. Or anything other than a reject. This means you’ve got your foot in the door and it potentially publishable. It’s just a matter of (usually) a little more work to get it to publication. If you get a reject, the paper moves back to Stage 4.</li>
<li><em>Stage 1</em> - You submit the revised version of the paper back to the journal.</li>
<li><em>Stage 0</em> - The paper is accepted for publication.</li>
</ul>
<p>By itself, breaking the task down like this I think is a great idea. It’s nice to see what the next step is.</p>
</section>
<section id="the-point-system" class="level2">
<h2 class="anchored" data-anchor-id="the-point-system">The Point System</h2>
<p>Okay, but turning a large task into a smaller task is not a novel idea. What Lebo’s paper does though is assign points for each of these steps. Seven points for every paper in Stage 7, three points for Stage 3, etc. As a paper moves closer and closer to completion, the number of points it’s worth gets smaller.</p>
<p>So, if you’re ultimate goal is to have, say, six papers by the time you go up for tenure, that’s 42 points you need to reduce your score by in six years, assuming you’re starting from scratch. There are 72 months in six years, so you’ll need to reduce your score by one every 1.7 months, or rather, one every one to two months, or rather, 2–3 points every semester. That to me seems like a much more reasonable task. My guess is you’re not coming in from scratch, so you can realistically work at a slower pace than that, perhaps just two points a semester. So, it’s scary to face this monster goal of publishing six papers, but it’s less scary that you just need to reduce your score by a few points every few months.</p>
<p>It’s clever that you have to reduce your score instead of tallying points up. But it makes sense. Let’s say a project idea is worth one point and a published paper is worth seven. Well, 42 project ideas aren’t going to get you tenure. Neither will 14 abstracts or 11 conference presentations. You actually have to move papers all the way through the full pipeline to achieve the goal of zero/tenure.</p>
<p>With that in mind, I’ll give you a peek into my rate of productivity. When I first started this system, I took stock of my current projects. I was coming out of grad school and had a few publications already far along the pipeline. So I only needed to reduce my score from 14 to get to my minimum goal of six papers. I knew I’d be able to reduce my score by more than two points a year though, so I set a stretch goal of 14 papers, which put me at 68 points. Right now, I have just three of those 68 points left. (Calm down: some of those papers low-tier, non-peer-reviewed papers or are collaborations that I wasn’t too involved with!) So I’ve averaged a score reduction by about 1.7 points every month. It ebbs and flows though. Conference weekends when I’ve got three presentations are balanced out by months with zero progress.</p>
</section>
<section id="monthly-evaluations" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="monthly-evaluations">Monthly Evaluations</h2>
<p>When I first read the paper, I started off by evaluating all of my ongoing projects. As part of the process, I wanted to create a log for each one. So I went through emails, datetime stamps on files, and whatever other documentation I had to reconstruct a log with key dates. I also set up my “Research Pipeline” files and made plans and stuff. I remember this a couple days.</p>
<p>To keep myself on track and to regularly remind myself of where I am with my projects, I do monthly evaluations. During the last workday of the month, I take an hour and systematically go through every project that is currently assigned a point value. I add to each project’s log whatever progress was made that month (if any). If I remember, I add to the log throughout the month as well. Here’s a sample from me and Betsy Sneller’s <a href="https://asa.scitation.org/doi/pdf/10.1121/10.0016757">Pillai scores</a> paper:</p>
<p><img src="https://joeystanley.com/blog/research-pipeline/pillai_log.png" class="img-fluid"></p>
<p>On a master document, I have a list of my current projects, what their point value is, and the date of the last milestone. I also have an overview of what happend that month (with dates), how I did on my goals from last month, and my goals for the next month, with anticipated changes in point values.</p>
<p><img src="https://joeystanley.com/blog/research-pipeline/master_log.png" class="img-fluid"></p>
<p>I then add to two spreadsheets that show my progress over time. This first one shows the history of the points for each project. This one is kinda cool because it shows what projects were in what stages at any month during the past three years. It also shows that some projects take a long time and others are shorter. They’re in order by publication date, so I move them up and down as needed. You can see that I actually have five categories of goals: minimum (6), goal (10), stretch (14), “reach for the stars” (20), and bonus. Also, this spreadsheet is extremely useful for annual interviews with my department chair because I can see at a glance which papers got published or presented at conferences and when. You can also see I’m currently sitting on <em>lots</em> of 4-pointers—papers that have been presented at conferences but not yet written up an submitted. Guess what I’ll be doing in 2024!</p>
<div class="page-columns page-full"><p> <img src="https://joeystanley.com/blog/research-pipeline/spreadsheet.png" class="img-fluid"></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Why, yes, I do like conditional formatting, why do you ask?</span></div></div>
<p>Also, this spreadsheet makes it easy to see which projects are stagnating. My rule of thumb is that if a project has been at the same stage for 12 months, then I move it to my graveyard. No sense in worrying about it anymore. Of course, this is done on a case-by-case basis, but it’s a good guideline for me. If I do abandon a project, I move its row in the spreadsheet down past the bottom of what is shown above in case I need to revive it. I also remove it from the master document I showed above and I stop updating it’s individual log.</p>
<p>The other spreadsheet is focused on my points. Here I can see my pace and whether I’m on track to reach my goal or if I’m falling behind. As I said before, I’m only three points away from hitting my stretch goal. I still have 25 points to go to hit my “reaching for the stars” goal. On the right side of the spreadsheet, I have columns for each point progression (going from 7 to 6, 6 to 5, etc.). Reading the columns from top to bottom makes it easy to see when papers were published.</p>
<p><img src="https://joeystanley.com/blog/research-pipeline/spreadsheet_points.png" class="img-fluid"></p>
<p>As if those monthly reminders weren’t enough, I also print out papers for every one of my projects in progress and put them on my wall, with a brightly-colored post-it note showing the point value. Right now, only my first-authored projects get their own paper (because it was taking up too my room on my whiteboard), so I have a separate category for work co-authored with students, and other collaborations that I only play a minor role on. Here’s what my wall looks like.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2," data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p><img src="https://joeystanley.com/blog/research-pipeline/wall_context.png" class="img-fluid"> <br></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://joeystanley.com/blog/research-pipeline/wall_zoomed.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>So, with this system I force myself to think about my research all the time. Even if I’m teaching three courses a semester, I still see the papers on my wall every day, and I still evaluate each project once a month. Especially since I do a fair amount of collaborative work, I’m surprised at what progress can be made during a busy teaching semester.</p>
</section>
<section id="small-caveats" class="level2">
<h2 class="anchored" data-anchor-id="small-caveats">Small Caveats</h2>
<p>I’ve been using this system for three years and I love it and have no intention of ditching it. But, I have also noticed a few things it doesn’t quite handle as well.</p>
<ul>
<li><p>If a paper goes through multiple rounds of review, it’s sort of stuck in Stage 1. It doesn’t make sense to lower it to Stage 2 when a second review comes in because it’s still progress. So, that work isn’t “rewarded” in the point system even though it may be a substantial part of what I do that month.</p></li>
<li><p>This is just a small one, but getting accepted to a conference is currently not rewarded by this system. Writing (and submitting) an abstract does, and presenting does. But sometimes I get an exciting acceptance email and I wish I could update my points, but there’s no change.</p></li>
<li><p>Sometimes, a single study is presented at multiple conferences. That’s what happened with me and Betsy’s Pillai scores paper: we presented at ASA and NWAV. It was going to be one paper the whole time, so there was no reason to split it up into two projects in my spreadsheet. But prepping the NWAV abstract and doing the presentation were not really accounted for in this system because the project was already at Stage 4. (Actually we had already gotten an R&amp;R by the time NWAV happened, so it was at Stage 2.)</p></li>
<li><p>Occasionally, stages get skipped. This can happen in collaborations with students where we decide just a few weeks or days before the deadline to turn their work into a conference abstract. So, that project enters my research pipeline basically at Stage 5, rather than 7 or 6. (My Missionary Voice paper with Josh Stevenson at <a href="../../blog/ads-and-lsa-2024">LSA2024</a> was like that.) Stage 6 is usually short because it’s often the case that we finish the analysis and are ready to go because we need to write an abstract. (My “Idaho English the Epitome of Average English” presentation at <a href="../../blog/ads-and-lsa-2023">ADS2023</a> was like that.) And if a project is not presented at a conference and goes straight to journal publication. (My second <a href="https://asa.scitation.org/doi/pdf/10.1121/10.0016757">Order of Operations paper in <em>Linguistics Vanguard</em></a> was like that.) Not a big deal; it’s okay to skip.</p></li>
<li><p>Finally, as we mentioned at <a href="../../blog/ads-and-lsa-2024">ADS</a> this year, I’m a co-editor of the 2024 PADS volume (with Peggy Renwick and Monica Nesbitt). The pipeline for editing a volume is a bit different than for a single paper. So even though I’ll get rewarded in my tenue portfolio for that, it doesn’t quite fit into the point system.</p></li>
</ul>
<p>These are mostly minor drawbacks. I’ve noticed too that this system encourages certain behavior.</p>
<ul>
<li><p>I’m motivated to publish everything I present at conferences. If I don’t, it’ll eventually move to the graveyard. That decrease from 7 to 4 points is wasted and my score will go up when I toss the project. That’s not to say that projects that terminate in conferences presentations are wasted, but I’m less likely to get funding for future conferences if I don’t publish stuff I present at past ones. This also means I really think hard about what I start on and present at conferences because I don’t want to do the work of working it from a 7 to a 4 unless I can eventually get it to a 0.</p></li>
<li><p>This system also discourages submitting the same paper to multiple conferences. Then again, my funding situation also discourages that too, so I guess it’s good that they align that way.</p></li>
<li><p>The system does encourage follow-up studies, break-off papers, and continuations of projects though. I can work with the same data and skip the first stage or two and get a jump start on the points instead of starting over from scratch at Stage 7.</p></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So that’s the system I use for keeping track of my research projects. So far, it has worked well and has encouraged me to continue cranking things through the pipeline. It constantly reminds me of what papers I need to write-up next. And given that I have a lot of papers in Stage 4, it discourages me from starting some new shiny thing at the expense of existing projects. I highly recommend reading <a href="https://doi.org/10.1017/S1049096516000160">Lebo’s paper</a> and seeing if the system works for you.</p>


</section>

 ]]></description>
  <guid>https://joeystanley.com/blog/research-pipeline/</guid>
  <pubDate>Sat, 06 Jan 2024 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
